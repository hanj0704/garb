/*
 * App URI: 202102/gridTest
 * Source Location: 202102/gridTest.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202102/gridTest", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * gridTest.js
			 * Created at 2021. 2. 5. 오후 2:28:27.
			 *
			 * @author csj
			 ************************************************/
			
			var sendData;
			var _data ;
			var responseData;
			var parseTime;
			/*
			 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
			 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFi1ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.FileInput
				 */
				var fi1 = e.control;
				
				var reader = new FileReader();
				
				sendData = moment().valueOf();	
				
				var reader = new FileReader();	
				
				reader.onload = function(e){
					var data = e.target.result;
					
					var workbook = XLSX.read(data , {type : 'binary'});
					
					workbook.SheetNames.forEach(function(item, index){
						ws = workbook.Sheets[item];
						var range = XLSX.utils.decode_range(workbook.Sheets[item]['!ref']); 
						range.s.r = 1;
						var _header = app.lookup("ds1").getColumnNames();
						var EXCEL_JSON ; 			
						EXCEL_JSON = XLSX.utils.sheet_to_json(ws, {range : range, header: _header  });		
						parseTime = moment().valueOf() - sendData;
						app.lookup("grdExcel").value = (moment.duration(parseTime) / 1000) + "초";
						_data = EXCEL_JSON;
					});
				};
				
				reader.onloadend = function(e){		
					sendData = moment().valueOf();	
					app.lookup("grd1").dataSet.build(_data, false);
					app.lookup("grd1").redraw();
					responseData = moment().valueOf() - sendData;
					var dd = (moment.duration(responseData) / 1000);
					app.lookup("grdDrawTime").value = dd + "초";
				};
				console.log(fi1.file);
				reader.readAsBinaryString(fi1.file);		
				
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"},
					{"name": "column12"},
					{"name": "column13"},
					{"name": "column14"},
					{"name": "column15"},
					{"name": "column16"},
					{"name": "column17"},
					{"name": "column18"},
					{"name": "column19"},
					{"name": "column20"},
					{"name": "column21"},
					{"name": "column22"},
					{"name": "column23"},
					{"name": "column24"},
					{"name": "column25"},
					{"name": "column26"},
					{"name": "column27"},
					{"name": "column28"},
					{"name": "column29"},
					{"name": "column30"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51"},
					{"column1": "column11", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52"},
					{"column1": "column11", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53"},
					{"column1": "column11", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54"},
					{"column1": "column11", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "column4": "column46", "column5": "column56"}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var fileInput_1 = new cpr.controls.FileInput("fi1");
			if(typeof onFi1ValueChange == "function") {
				fileInput_1.addEventListener("value-change", onFi1ValueChange);
			}
			container.addChild(fileInput_1, {
				"top": "20px",
				"left": "42px",
				"width": "273px",
				"height": "27px"
			});
			
			var output_1 = new cpr.controls.Output("grdDrawTime");
			output_1.value = "";
			output_1.bind("displayExp").toExpression("\"'그리드 랜더링 시간: ' + value \"");
			container.addChild(output_1, {
				"top": "21px",
				"left": "341px",
				"width": "214px",
				"height": "24px"
			});
			
			var output_2 = new cpr.controls.Output("grdExcel");
			output_2.value = "";
			output_2.bind("displayExp").toExpression("\"'엑셀 데이터 변환시간: ' + value \"");
			container.addChild(output_2, {
				"top": "21px",
				"left": "566px",
				"width": "249px",
				"height": "24px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "57px",
				"left": "20px",
				"width": "400px",
				"height": "200px"
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"top": "57px",
				"left": "446px",
				"width": "400px",
				"height": "200px"
			});
		}
	});
	app.title = "gridTest";
	cpr.core.Platform.INSTANCE.register(app);
})();

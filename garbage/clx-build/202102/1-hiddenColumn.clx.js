/*
 * App URI: 202102/1-hiddenColumn
 * Source Location: 202102/1-hiddenColumn.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202102/1-hiddenColumn", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * 1-hiddenColumn.js
			 * Created at 2019. 6. 21. 오후 5:00:19.
			 *
			 * @author HANS
			 ************************************************/
			var util = createUtil(app);
			
			
			exports.getAllData = function() {
				return util.getAllData("ds1");
			}
			
			exports.getAllStatus = function() {
				return util.getAllStatus("grd1", "ds1");
			
			}
			
			exports.getAllSort = function() {
			
				return util.getAllSort("grd1");
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
			
				var hostApp = app.getHostAppInstance();
			
				if (!hostApp && sessionStorage.length > 0) {
					util.setDataStatus("grd1", "ds1");
				}
				
				console.log(cpr.core.Platform.INSTANCE.getParameter("param"));
				cpr.core.Platform.INSTANCE.initParameter({"param" : "secondValue"});
			
			
			}
			
			/*
			 * 그리드에서 copy 이벤트 발생 시 호출.
			 * Grid의 선택된 요소를 ctrl + c 로 복사했을 때 발생하는 이벤트.
			 */
			function onGrd1Copy( /* cpr.events.CGridEvent */ e) {
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				console.log("lol~");
				var vcDs = app.lookup("ds1");
				var vcGrid = app.lookup("grd1");
				var vsCheckVisi = true;
			
				var CellIndices = vcGrid.getSelectedCellIndices();
				var startCellIndex = CellIndices[0].cellIndex;
				var endCellIndex = CellIndices[CellIndices.length - 1].cellIndex;
				var startRowIndex = CellIndices[0].rowIndex;
				var endRowIndex = CellIndices[CellIndices.length - 1].rowIndex;
			
				var copyData = "";
			
				var checkIndex = startCellIndex;
				for (checkIndex; checkIndex <= endCellIndex; checkIndex++) {
			
					if (vcGrid.header.getColumn(checkIndex).visible == false) {
			
						vsCheckVisi = false;
			
						break;
					}
				}
				if (!vsCheckVisi) {
			   		
			   		    copyData = clipboardCopy(startRowIndex, endRowIndex, CellIndices, vcGrid, checkIndex);
				}
				
					e.data = copyData;	
			}
			
			function clipboardCopy(startRowIndex, endRowIndex, CellIndices, vcGrid, checkIndex) {
				for (var i = startRowIndex; i <= endRowIndex; i++) {
			
					CellIndices.push({
						rowIndex: i,
						cellIndex: checkIndex
					});
				}
			
				CellIndices.sort(function(a, b) {
					return a.rowIndex - b.rowIndex || a.cellIndex - b.cellIndex;
				});
			
			
				var copyData = "";
			
				for (var i = 0; i < CellIndices.length; i++) {
			
					copyData = copyData + vcGrid.getCellValue(CellIndices[i].rowIndex, CellIndices[i].cellIndex);
			
					if (i < CellIndices.length - 1) {
			
						if (CellIndices[i].rowIndex == CellIndices[i + 1].rowIndex) {
			
							copyData = copyData + "\t";
						} else {
			
							copyData = copyData + "\n";
						}
					}
				}
				return copyData;
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "City"},
					{"name": "Country"},
					{"name": "CountryCode"},
					{"name": "TimeZone"}
				],
				"rows": [
					{"City": "City1", "Country": "Country1", "CountryCode": "CountryCode1", "TimeZone": "TimeZone1"},
					{"City": "City2", "Country": "Country2", "CountryCode": "CountryCode2", "TimeZone": "TimeZone2"},
					{"City": "City3", "Country": "Country3", "CountryCode": "CountryCode3", "TimeZone": "TimeZone3"},
					{"City": "City4", "Country": "Country4", "CountryCode": "CountryCode4", "TimeZone": "TimeZone4"},
					{"City": "City5", "Country": "Country5", "CountryCode": "CountryCode5", "TimeZone": "TimeZone5"},
					{"City": "City6", "Country": "Country6", "CountryCode": "CountryCode6", "TimeZone": "TimeZone6"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "1 ) 히든컬럼 copy & paste - 불가";
			output_1.style.setClasses(["main-title"]);
			container.addChild(output_1, {
				"top": "20px",
				"right": "20px",
				"left": "20px",
				"height": "30px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.readOnly = false;
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columnMovable": false,
				"selectionUnit": "cell",
				"selectionMulti": "multi",
				"resizableColumns": "none",
				"columns": [
					{"width": "100px"},
					{
						"width": "100px",
						"visible": false
					},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "City";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "City";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "Country";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "Country";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "CountryCode";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "CountryCode";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "TimeZone";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "TimeZone";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "City";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "Country";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "CountryCode";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "TimeZone";
							}
						}
					]
				}
			});
			if(typeof onGrd1Paste == "function") {
				grid_1.addEventListener("paste", onGrd1Paste);
			}
			if(typeof onGrd1Copy == "function") {
				grid_1.addEventListener("copy", onGrd1Copy);
			}
			container.addChild(grid_1, {
				"top": "160px",
				"right": "20px",
				"bottom": "20px",
				"left": "20px"
			});
			
			var output_2 = new cpr.controls.Output("opt1");
			output_2.value = "1 ) 그리드와 excel 간 히든컬럼도 데이터 copy & paste가 가능한지, 또는 옵션으로 설정이 가능한지\r\n불가능합니다.엑셀에 있는 데이터를 복사할 경우, 클립보드에 숨겨진 컬럼에 대한 값이 복사되지 않아, 해당 기능을 구현할 수 없습니다.";
			container.addChild(output_2, {
				"top": "70px",
				"right": "20px",
				"left": "20px",
				"height": "70px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "1-hiddenColumn";
	cpr.core.Platform.INSTANCE.register(app);
})();

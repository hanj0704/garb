/*
 * App URI: 202101/commonTemplate
 * Source Location: 202101/commonTemplate.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202101/commonTemplate", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * commonTemplate.js
			 * Created at 2020. 8. 21. 오후 2:51:01.
			 *
			 * @author han
			 ************************************************/
			
			var util = createNewHintKit();
			
			/**
			 * 
			 * @param {cpr.controls.layouts.FormLayout} layout
			 */
			function calcWidthFr(layout){
				
				var lay = layout;
				
				
				var cols = lay.getColumns();//컬럼 구획 크기 가져오기
				var colSp = lay.horizontalSpacing;//가로 간격
				var leftM = lay.leftMargin;//좌 여백
				var rightM = lay.rightMargin;//우 여백
				
				var corFr = cols.filter(function(each){
					return each.indexOf("fr") >=0;
				});
				corFr = corFr.map(function(each){
					return parseInt(each.replace("fr", ""));
				});
				var res = 0 ;
				corFr.forEach(function(each){
					res+= each;
				});
						//컬럼 구획 fr인 애들 전부 더하기
				
				if(leftM.indexOf("fr") >=0) {
					
					res += parseInt(leftM.replace("fr", ""));
				}//좌 마진이 fr이면 더하기
				if(rightM.indexOf("fr") >= 0) {
					
					res += parseInt(rightM.replace("fr",""));
				}//우 마진이 fr이면 더하기
				
				if(colSp.indexOf("fr") >= 0) {
					
					res += parseInt(colSp.replace("fr", "")) * (cols.length -1)
				}//간격이 fr이면 간격만큼 더하기
				
			//	console.log(res);
				return res;
			}
			
			/**
			 * 
			 * @param {cpr.controls.layouts.FormLayout} layout
			 */
			function calcHeightFr(layout) {
				
				var lay = layout;
				
				var rows = lay.getRows();
				var rowSp = lay.verticalSpacing;
				var topM = lay.topMargin;
				var botM = lay.bottomMargin;
				
				var rowFr = rows.filter(function(each){
					return each.indexOf("fr") >=0;
				});
				
				rowFr = rowFr.map(function(each){
					return parseInt(each.replace("fr", ""));
				});
				
				var res = 0;
				rowFr.forEach(function(each){
					res += each;
				});
				if(topM.indexOf("fr") >=0) {
					
					res += parseInt(topM.replace("fr", ""));
				}//좌 마진이 fr이면 더하기
				if(botM.indexOf("fr") >= 0) {
					
					res += parseInt(botM.replace("fr",""));
				}//우 마진이 fr이면 더하기
				
				if(rowSp.indexOf("fr") >= 0) {
					
					res += parseInt(rowSp.replace("fr", "")) * (rows.length -1)
				}//간격이 fr이면 간격만큼 더하기
				
				console.log(res);
				return res;
			}
			
			var horizontals = [];
			
			/**
			 * 
			 * @param {Container} pcContainer
			 * @param {Boolean} pb
			 */
			function drawHorizontalPlan(pcContainer,pb){
				if(pb) {
					
				var grp = pcContainer;
			/** @type cpr.controls.layouts.FormLayout */
				var layouts = grp.getLayout();
				var allFr = calcWidthFr(layouts);
				var cols = layouts.getColumns();
				
				var width = grp.getActualRect().width;
				
				var colPx = cols.filter(function(each){
					return each.indexOf("px") >= 0;
				});
				var survivedWidth = width;
				
				colPx.forEach(function(each){
					var pxWidth = parseInt(each.replace("px",""));
					
					survivedWidth -= pxWidth;
				});
			
				if(layouts.rightMargin.indexOf("px") >= 0){
					survivedWidth -= parseInt(layouts.rightMargin.replace("px", ""));
				}
				
				var startMan = grp.getActualRect().left;
				var margin = 0;
				if(layouts.leftMargin.indexOf("fr") >= 0 ) {
					margin = survivedWidth * parseInt(layouts.leftMargin.replace("fr","")) / allFr;
					startMan += margin
				} else {
					survivedWidth -= parseInt(layouts.leftMargin.replace("px",""));
					margin = parseInt(layouts.leftMargin.replace("px", ""));
					startMan += margin;
				}
				
				var spacing = 0;
				if(layouts.horizontalSpacing.indexOf("fr") >= 0 ) {
					spacing = survivedWidth * parseInt(layouts.horizontalSpacing.replace("fr","")) / allFr;
				} else {
					spacing = parseInt(layouts.horizontalSpacing.replace("px", ""));
					survivedWidth -= parseInt(layouts.horizontalSpacing.replace("px",""))*(cols.length-1);
				}
				
				cols.forEach(function(each){
					var button = new cpr.controls.Button();
					button.value = each;
					button.style.addClass("btn-outline-light");
					var constraint = {
						"left" : startMan+"px",
						"top" : grp.getActualRect().bottom+"px",
						"width" : "",
						"height" : "25px"
					}	
					if(each.indexOf("fr") >= 0) {
						
						constraint.width = survivedWidth * parseInt(each.replace("fr", "")) / allFr +"px";
					} else {
						
						constraint.width = each;
					}
					
					app.getContainer().floatControl(button, constraint);
					horizontals.push(button);
					startMan += parseInt(constraint.width.replace("px", "")) + spacing
			 	});
			 	} else {
			 		
			 		horizontals.forEach(function(each){
			 			each.dispose();
			 		})
			 	}
			}
			
			
			var verticals = [];
			/**
			 * 
			 * @param {cpr.controls.Container} pcContainer
			 * @param {Boolean} pb
			 */
			function drawVerticalPlan(pcContainer,pb) {
				if(pb){
					
				var grp = pcContainer;
			/** @type cpr.controls.layouts.FormLayout */
				var layouts = grp.getLayout();
				var allFr = calcHeightFr(layouts);
				var rows = layouts.getRows();
				var height = grp.getActualRect().height;
				
				var rowPx = rows.filter(function(each){
					return each.indexOf("px") >= 0;
				});
				var survivedHeight = height;
				
				rowPx.forEach(function(each){
					var psHeight = parseInt(each.replace("px",""));
					
					survivedHeight -= psHeight;
				});
			
				if(layouts.bottomMargin.indexOf("px") >= 0){
					survivedHeight -= parseInt(layouts.bottomMargin.replace("px", ""));
				}
				
				var startMan = grp.getActualRect().top;
				var margin = 0;
				if(layouts.topMargin.indexOf("fr") >= 0 ) {
					margin = survivedHeight * parseInt(layouts.topMargin.replace("fr","")) / allFr;
					startMan += margin
				} else {
					survivedHeight -= parseInt(layouts.topMargin.replace("px",""));
					margin = parseInt(layouts.topMargin.replace("px", ""));
					startMan += margin;
				}
				
				var spacing = 0;
				if(layouts.verticalSpacing.indexOf("fr") >= 0 ) {
					spacing = survivedHeight * parseInt(layouts.verticalSpacing.replace("fr","")) / allFr;
				} else {
					spacing = parseInt(layouts.verticalSpacing.replace("px", ""));
					survivedHeight -= parseInt(layouts.verticalSpacing.replace("px",""))*(rows.length-1);
				}
			
				rows.forEach(function(each){
					var button = new cpr.controls.Button();
					button.value = each;
					button.style.addClass("btn-outline-light");
					var constraint = {
						"left" : grp.getActualRect().right+"px",
						"top" : startMan+"px",
						"width" : "100px",
						"height" : ""
					}	
					if(each.indexOf("fr") >= 0) {
						
						constraint.height = survivedHeight * parseInt(each.replace("fr", "")) / allFr +"px";
					} else {
						
						constraint.height = each;
					}
					
					app.getContainer().floatControl(button, constraint);
					verticals.push(button);
					startMan += parseInt(constraint.height.replace("px", "")) + spacing
			 	});
			 	} else {
			 		
			 		verticals.forEach(function(each){
			 			
			 			each.dispose();
			 		});
			 	}
			}
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var vcHintCheckBox = new cpr.controls.Container();
				var vLayout = new cpr.controls.layouts.VerticalLayout();
				
				vcHintCheckBox.setLayout(vLayout);
				vcHintCheckBox.style.css({
					"background-color" : "#ffffff",
					"opacity" : 0.9
				});
				
				var vcClassCheck = new cpr.controls.CheckBox();
				vcClassCheck.text = "클래스 정보확인"
				vcClassCheck.addEventListener("value-change", function(e){
					util.configClassInfoHints(app, e.newValue);
				});
				var vcConstraintCheck = new cpr.controls.CheckBox();
				vcConstraintCheck.text = "Layouts";
				vcConstraintCheck.addEventListener("value-change", function(e){
			//		var control = app;	
			//		
			//		control.getContainer().getAllRecursiveChildren().forEach(function(/*cpr.controls.Control*/each){
			//			
			//			if(each instanceof cpr.controls.Container) {
			//				
			//				if(each.getLayout() instanceof cpr.controls.layouts.FormLayout) {
			//					
			//					drawHorizontalPlan(each,e.newValue);
			//					drawVerticalPlan(each,e.newValue);
			//				}
			//			}
			//		});
					util.showFormDivision(app, e.newValue);
				});
				
				vcHintCheckBox.addChild(vcClassCheck, {
					"width" : "100px",
					"height" : "30px",
					"autoSize" : "none"
				});	
				vcHintCheckBox.addChild(vcConstraintCheck, {
					"width" : "100px",
					"height" : "30px",
					"autoSize" : "none"
				});	
				app.floatControl(vcHintCheckBox,{
					"top" : "20px",
					"right" : "20px",
					"width" : "150px"
				});
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61", "column7": "column71", "column8": "column81", "column9": "column91"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62", "column7": "column72", "column8": "column82", "column9": "column92"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1324px)", "content-default");
			app.supportMedia("all and (max-width: 1323px)", "content-tablet");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container();
				group_2.userAttr({"useConstraintHintMode": "true"});
				group_2.style.setClasses(["search-box"]);
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.topMargin = "1fr";
				formLayout_1.rightMargin = "5px";
				formLayout_1.bottomMargin = "1fr";
				formLayout_1.leftMargin = "5px";
				formLayout_1.setColumns(["100px", "1fr", "1fr", "1fr", "100px", "1fr", "1fr", "1fr", "100px", "1fr", "1fr", "1fr", "140px"]);
				formLayout_1.setRows(["25px"]);
				group_2.setLayout(formLayout_1);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "Trsc Br.";
					output_1.style.setClasses(["label", "pr-1"]);
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var comboBox_1 = new cpr.controls.ComboBox("cmbBlngBrNo");
					comboBox_1.userAttr({"dvCd": "BR_CD:0000"});
					(function(comboBox_1){
					})(comboBox_1);
					container.addChild(comboBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 3,
						"rowSpan": 1
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "Title Type";
					output_2.style.setClasses(["label", "pr-1"]);
					container.addChild(output_2, {
						"colIndex": 4,
						"rowIndex": 0
					});
					var comboBox_2 = new cpr.controls.ComboBox("cmb2");
					comboBox_2.userAttr({"dvCd": "USR_POSN_CD:0000:ALL"});
					(function(comboBox_2){
					})(comboBox_2);
					container.addChild(comboBox_2, {
						"colIndex": 5,
						"rowIndex": 0,
						"colSpan": 3,
						"rowSpan": 1
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "User ID";
					output_3.style.setClasses(["label", "pr-1"]);
					container.addChild(output_3, {
						"colIndex": 8,
						"rowIndex": 0
					});
					var searchInput_1 = new cpr.controls.SearchInput("inpUserId");
					searchInput_1.style.css({
						"font-family" : "sans-serif"
					});
					container.addChild(searchInput_1, {
						"colIndex": 9,
						"rowIndex": 0,
						"colSpan": 3,
						"rowSpan": 1
					});
					var button_1 = new cpr.controls.Button("btn1");
					button_1.value = "Search";
					container.addChild(button_1, {
						"colIndex": 12,
						"rowIndex": 0,
						"horizontalAlign": "center",
						"verticalAlign": "center"
					});
				})(group_2);
				container.addChild(group_2, {
					"width": "1004px",
					"height": "45px"
				});
				var group_3 = new cpr.controls.Container();
				group_3.style.setClasses(["edit-group"]);
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.topMargin = "1fr";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "1fr";
				formLayout_2.leftMargin = "5px";
				formLayout_2.setColumns(["1fr", "1fr", "100px", "120px"]);
				formLayout_2.setRows(["25px"]);
				group_3.setLayout(formLayout_2);
				(function(container){
					var button_2 = new cpr.controls.Button("btnAdd");
					button_2.value = "Add";
					container.addChild(button_2, {
						"colIndex": 2,
						"rowIndex": 0,
						"horizontalAlign": "center",
						"verticalAlign": "center"
					});
					var button_3 = new cpr.controls.Button("btnUpd");
					button_3.value = "Update";
					container.addChild(button_3, {
						"colIndex": 3,
						"rowIndex": 0,
						"horizontalAlign": "left",
						"verticalAlign": "center"
					});
				})(group_3);
				container.addChild(group_3, {
					"width": "1004px",
					"height": "45px"
				});
				var grid_1 = new cpr.controls.Grid("grd1");
				grid_1.init({
					"dataSet": app.lookup("ds1"),
					"columns": [
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.targetColumnName = "column1";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column1";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.targetColumnName = "column2";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column2";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.targetColumnName = "column3";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column3";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.targetColumnName = "column4";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column4";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.targetColumnName = "column5";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column5";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.targetColumnName = "column6";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column6";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.targetColumnName = "column7";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column7";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.targetColumnName = "column8";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column8";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.targetColumnName = "column9";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column9";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "column1";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "column2";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "column3";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "column4";
									cell.control = (function(){
										var output_4 = new cpr.controls.Output();
										output_4.value = "Output";
										output_4.style.setClasses(["tex-left", "pl-2"]);
										output_4.bind("value").toDataColumn("column4");
										return output_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "column5";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "column6";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "column7";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "column8";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "column9";
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"width": "360px",
					"height": "142px"
				});
				var group_4 = new cpr.controls.Container("grd2");
				group_4.style.setClasses(["cl-form-group"]);
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.topMargin = "5px";
				formLayout_3.rightMargin = "5px";
				formLayout_3.bottomMargin = "5px";
				formLayout_3.leftMargin = "5px";
				formLayout_3.setColumns(["180px", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "180px", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr"]);
				formLayout_3.setRows(["30px", "30px", "30px", "30px", "30px", "30px", "30px", "30px", "30px", "30px", "30px", "30px"]);
				group_4.setLayout(formLayout_3);
				(function(container){
					var output_5 = new cpr.controls.Output("lblUserId");
					output_5.value = "User ID";
					output_5.style.setClasses(["label", "pr-1", "required"]);
					container.addChild(output_5, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var inputBox_1 = new cpr.controls.InputBox("ipbUserId");
					inputBox_1.maxLength = 7;
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 6,
						"rowSpan": 1
					});
					var button_4 = new cpr.controls.Button("btnDupChk");
					button_4.value = "Duplicate Check";
					container.addChild(button_4, {
						"colIndex": 7,
						"rowIndex": 0,
						"colSpan": 4,
						"rowSpan": 1,
						"verticalAlign": "center"
					});
					var output_6 = new cpr.controls.Output("lblUsrEngNm");
					output_6.value = "User Name (Eng)";
					output_6.style.setClasses(["fw-bold"]);
					container.addChild(output_6, {
						"colIndex": 11,
						"rowIndex": 0
					});
					var inputBox_2 = new cpr.controls.InputBox("ipbUsrEngNm");
					container.addChild(inputBox_2, {
						"colIndex": 12,
						"rowIndex": 0,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_7 = new cpr.controls.Output("lblBlngBrNo");
					output_7.value = "Transaction Branch";
					output_7.style.setClasses(["label", "pr-1"]);
					container.addChild(output_7, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var inputBox_3 = new cpr.controls.InputBox("ipbBlngBrNo");
					container.addChild(inputBox_3, {
						"colIndex": 1,
						"rowIndex": 1,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_8 = new cpr.controls.Output();
					output_8.value = "User Name (Local)";
					output_8.style.setClasses(["label", "pr-1"]);
					container.addChild(output_8, {
						"colIndex": 11,
						"rowIndex": 1
					});
					var inputBox_4 = new cpr.controls.InputBox("ipb1");
					container.addChild(inputBox_4, {
						"colIndex": 12,
						"rowIndex": 1,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_9 = new cpr.controls.Output("lblTmlIstBrNo");
					output_9.value = "Terminal Branch";
					output_9.style.setClasses(["label", "pr-1"]);
					container.addChild(output_9, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var inputBox_5 = new cpr.controls.InputBox("ipbTmlIstBrNo");
					container.addChild(inputBox_5, {
						"colIndex": 1,
						"rowIndex": 2,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_10 = new cpr.controls.Output("lblMbphNo");
					output_10.value = "Mobile Phone No.";
					output_10.style.setClasses(["label", "pr-1"]);
					container.addChild(output_10, {
						"colIndex": 11,
						"rowIndex": 2
					});
					var inputBox_6 = new cpr.controls.InputBox("ipbMbphNo");
					container.addChild(inputBox_6, {
						"colIndex": 12,
						"rowIndex": 2,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_11 = new cpr.controls.Output("lblStCd");
					output_11.value = "Status";
					output_11.style.setClasses(["label", "pr-1"]);
					container.addChild(output_11, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var comboBox_3 = new cpr.controls.ComboBox("cmbStCd");
					comboBox_3.userAttr({"dvCd": "LEDG_ST_CD:0000"});
					(function(comboBox_3){
					})(comboBox_3);
					container.addChild(comboBox_3, {
						"colIndex": 1,
						"rowIndex": 3,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_12 = new cpr.controls.Output("lblEmalAdr");
					output_12.value = "Email Address";
					output_12.style.setClasses(["label", "pr-1"]);
					container.addChild(output_12, {
						"colIndex": 11,
						"rowIndex": 3
					});
					var inputBox_7 = new cpr.controls.InputBox("ipbEmalAdr");
					container.addChild(inputBox_7, {
						"colIndex": 12,
						"rowIndex": 3,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_13 = new cpr.controls.Output("lblGrpId");
					output_13.value = "Authority Group ID";
					output_13.style.setClasses(["label", "pr-1"]);
					container.addChild(output_13, {
						"colIndex": 0,
						"rowIndex": 4
					});
					var output_14 = new cpr.controls.Output("lblSnrId");
					output_14.value = "Senior ID";
					output_14.style.setClasses(["label", "pr-1"]);
					container.addChild(output_14, {
						"colIndex": 11,
						"rowIndex": 4
					});
					var inputBox_8 = new cpr.controls.InputBox("ipbSnrId");
					container.addChild(inputBox_8, {
						"colIndex": 12,
						"rowIndex": 4,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_15 = new cpr.controls.Output("lblUsrPosnCd");
					output_15.value = "Title Type";
					output_15.style.setClasses(["label", "pr-1"]);
					container.addChild(output_15, {
						"colIndex": 0,
						"rowIndex": 5
					});
					var comboBox_4 = new cpr.controls.ComboBox("cmbUsrPosnCd");
					comboBox_4.userAttr({"dvCd": "USR_POSN_CD:0000"});
					(function(comboBox_4){
					})(comboBox_4);
					container.addChild(comboBox_4, {
						"colIndex": 1,
						"rowIndex": 5,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_16 = new cpr.controls.Output("lblIpAdr");
					output_16.value = "IP Address";
					output_16.style.setClasses(["label", "pr-1"]);
					container.addChild(output_16, {
						"colIndex": 11,
						"rowIndex": 5
					});
					var inputBox_9 = new cpr.controls.InputBox("ipbIpAdr");
					container.addChild(inputBox_9, {
						"colIndex": 12,
						"rowIndex": 5,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_17 = new cpr.controls.Output("lblBussBrUpdAlwnYn");
					output_17.value = "Change Branch Y/N";
					output_17.style.setClasses(["label", "pr-1"]);
					container.addChild(output_17, {
						"colIndex": 0,
						"rowIndex": 6
					});
					var comboBox_5 = new cpr.controls.ComboBox("cmbBussBrUpdAlwnYn");
					comboBox_5.userAttr({"dvCd": "INP_MDTY_YN_CD:0000"});
					(function(comboBox_5){
					})(comboBox_5);
					container.addChild(comboBox_5, {
						"colIndex": 1,
						"rowIndex": 6,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_18 = new cpr.controls.Output("lblTmlDvCd");
					output_18.value = "\tTerminal Divison";
					output_18.style.setClasses(["label", "pr-1"]);
					container.addChild(output_18, {
						"colIndex": 11,
						"rowIndex": 6
					});
					var comboBox_6 = new cpr.controls.ComboBox("cmbTmlDvCd");
					(function(comboBox_6){
					})(comboBox_6);
					container.addChild(comboBox_6, {
						"colIndex": 12,
						"rowIndex": 6,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_19 = new cpr.controls.Output("lblTlrDvCd");
					output_19.value = "Accounting Teller Division";
					output_19.style.setClasses(["label", "pr-1"]);
					container.addChild(output_19, {
						"colIndex": 0,
						"rowIndex": 7
					});
					var comboBox_7 = new cpr.controls.ComboBox("cmbTlrDvCd");
					comboBox_7.userAttr({"dvCd": "TLR_DV_CD:0000"});
					(function(comboBox_7){
					})(comboBox_7);
					container.addChild(comboBox_7, {
						"colIndex": 1,
						"rowIndex": 7,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_20 = new cpr.controls.Output("lblTmlTypCd");
					output_20.value = "\tTerminal Type Code";
					output_20.style.setClasses(["label", "pr-1"]);
					container.addChild(output_20, {
						"colIndex": 11,
						"rowIndex": 7
					});
					var comboBox_8 = new cpr.controls.ComboBox("cmbTmlTypCd");
					(function(comboBox_8){
					})(comboBox_8);
					container.addChild(comboBox_8, {
						"colIndex": 12,
						"rowIndex": 7,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_21 = new cpr.controls.Output("lblExpryDt");
					output_21.value = "Expiry Date";
					output_21.style.setClasses(["label", "pr-1"]);
					container.addChild(output_21, {
						"colIndex": 0,
						"rowIndex": 8
					});
					var dateInput_1 = new cpr.controls.DateInput("dtiExpryDt");
					container.addChild(dateInput_1, {
						"colIndex": 1,
						"rowIndex": 8,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_22 = new cpr.controls.Output("lblPwLckYn");
					output_22.value = "Password Lock";
					output_22.style.setClasses(["label", "pr-1"]);
					container.addChild(output_22, {
						"colIndex": 11,
						"rowIndex": 8
					});
					var comboBox_9 = new cpr.controls.ComboBox("cmbPwLckYn");
					comboBox_9.userAttr({"dvCd": "INP_MDTY_YN_CD:0000"});
					(function(comboBox_9){
					})(comboBox_9);
					container.addChild(comboBox_9, {
						"colIndex": 12,
						"rowIndex": 8,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_23 = new cpr.controls.Output("lblLstTrscDt");
					output_23.value = "Last Transaction Date";
					output_23.style.setClasses(["label", "pr-1"]);
					container.addChild(output_23, {
						"colIndex": 0,
						"rowIndex": 9
					});
					var dateInput_2 = new cpr.controls.DateInput("dtiLstTrscDt");
					container.addChild(dateInput_2, {
						"colIndex": 1,
						"rowIndex": 9,
						"colSpan": 10,
						"rowSpan": 1
					});
					var output_24 = new cpr.controls.Output("lblPwUpdDt");
					output_24.value = "PW Updated Date";
					output_24.style.setClasses(["label", "pr-1"]);
					container.addChild(output_24, {
						"colIndex": 11,
						"rowIndex": 9
					});
					var dateInput_3 = new cpr.controls.DateInput("dtiPwUpdDt");
					container.addChild(dateInput_3, {
						"colIndex": 12,
						"rowIndex": 9,
						"colSpan": 10,
						"rowSpan": 1
					});
					var inputBox_10 = new cpr.controls.InputBox("ipbLginPw");
					inputBox_10.visible = false;
					container.addChild(inputBox_10, {
						"colIndex": 11,
						"rowIndex": 10
					});
					var button_5 = new cpr.controls.Button("btnIntz");
					button_5.value = "Initialize Password";
					container.addChild(button_5, {
						"colIndex": 16,
						"rowIndex": 10,
						"colSpan": 6,
						"rowSpan": 1,
						"verticalAlign": "center"
					});
					var button_6 = new cpr.controls.Button("btn2");
					button_6.value = "Save";
					container.addChild(button_6, {
						"colIndex": 19,
						"rowIndex": 11,
						"colSpan": 3,
						"rowSpan": 1
					});
					var searchInput_2 = new cpr.controls.SearchInput("ipbGrpId");
					searchInput_2.readOnly = true;
					container.addChild(searchInput_2, {
						"colIndex": 1,
						"rowIndex": 4,
						"colSpan": 10,
						"rowSpan": 1
					});
				})(group_4);
				container.addChild(group_4, {
					"width": "1004px",
					"height": "427px"
				});
			})(group_1);
			container.addChild(group_1, {
				positions: [
					{
						"media": "all and (min-width: 1324px)",
						"top": "10px",
						"left": "10px",
						"width": "1004px",
						"height": "750px"
					}, 
					{
						"media": "all and (max-width: 1323px)",
						"top": "10px",
						"right": "5px",
						"left": "5px",
						"height": "750px"
					}
				]
			});
			
			var output_25 = new cpr.controls.Output();
			output_25.value = " 새 eXbuilder6 파일 생성시 편집기 좌측 상단에 있는 스크린 설정에 들어가서default, tablet,mobile을 없애버리고 프로젝트 템플릿에 있는 content-default, content-tablet을 추가하여 두가지 스크린만 사용합니다.\r\n루트 컨테이너의 레이아웃은 반응형 XY 레이아웃이며 그룹을 하나 추가하고 버티컬 레이아웃으로 지정하여 그 안에서 화면을 디자인합니다. 이때 이 그룹은 크기를 width : 1004px, heigth : 748px으로 지정하며, left : 10px, top : 10px으로 위치를 앵커를 지정합니다.\r\n\r\n 스크린 설정을 content-tablet으로 이동하여, 버티컬 레이아웃의 앵커를 left : 5px, top : 10px, right : 5px으로 right를 추가적으로 지정하도록 합니다.\r\n기본적으로 폼 레이아웃은 label 구획일 경우 100px이나, 크기에 맞춰서 유동적으로 늘리거나 줄여서 사용하도록 합니다.\r\nfr 유닛을 사용하는 구획은 이후에 아이템이 추가되는 경우가 있거나, 같은 구획임에도 크기를 다르게 디자인하길 바랄 때엔 여러개의 fr 구획을 사용할 수 있으나, 그렇지 않은 경우는 불필요한 fr 구획을 둘 필요 없습니다.\r\n 검색조건의 크기는 기본으로 45px이며, 행의 크기는 25px이며, 행을 하나 추가시킬 때마다 폼 레이아웃의 크기를 30px씩 증가시킵니다.\r\n검색조건의 spacing은 1fr 5px 이며, margin은 각 5px입니다.\r\n 검색조건과 그리드, 검색조건과 입력 폼, 입력폼과 그리드 사이에 api 를 수행하는 버튼등을 위한 공간이 필요할 경우 그룹을 배치하고\r\n레이아웃을 폼 레이아웃을 사용하여 클래스는 edit-group으로 지정하도록 합니다.\r\n행의 크기는 25px이고 폼의 크기는 기본 45px에서 행을 하나 추가시킬 때마다 30px씩 height를 증가시킵니다.\r\n\r\n 검색조건과 에디트그룹에 들어가는 버튼 컨트롤은 기본적으로 width : 100px, height : 25px을 준수합니다.\r\n버튼컨트롤이 단독으로 배치될 때는 구획의 크기를 140px으로 지정하고 그 안에 버튼 컨트롤을 집어넣고, align을 각 center로 지정하며,\r\n복수의 버튼 컨트롤을 사용할 경우 가장 오른쪽 구획의 버튼은 120px, 나머지 버튼은 100px으로 구획 크기를 지정하여 배치합니다.\r\n이때 가장 오른쪽 구획의 버튼은 horizontalAlign을 right로 지정하도록 합니다.\r\n\r\n 입력 폼의 행의 크기는 30px이며,행을 추가시킬 경우 입력 폼에서 우클릭을 누르고 컨텐트 크기에 자동 맞춤을 눌러줍니다.\r\n입력 폼의 컬럼의 크기는 기본적으로 100px이나, 컨텐츠 크기에 맞게 자유롭게 늘리거나 줄이도록 하되 최대한 해당 화면에서 사용중인 크기와 비슷하게 맞춰주도록 합니다.\r\n\r\n그리드에서는 따로 지정하는 스타일이 없으나, 내부에 컨트롤을 삽입할 경우 원하는 클래스를 입력하도록 합니다.\r\n\r\n해당 항목은 이후에 공통 스타일이 변경됨에 따라 수정될 수 있습니다.";
			container.addChild(output_25, {
				positions: [
					{
						"media": "all and (min-width: 1324px)",
						"top": "100px",
						"right": "8px",
						"left": "1123px",
						"height": "738px"
					}, 
					{
						"media": "all and (max-width: 1323px)",
						"top": "10px",
						"right": "4px",
						"left": "594px",
						"height": "0px"
					}
				]
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "commonTemplate";
	cpr.core.Platform.INSTANCE.register(app);
})();

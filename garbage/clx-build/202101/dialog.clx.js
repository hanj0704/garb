/*
 * App URI: 202101/dialog
 * Source Location: 202101/dialog.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202101/dialog", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * grid.js
			 * Created at 2020. 4. 17. 오후 4:11:15.
			 *
			 * @author daye
			 ************************************************/
			
			/**
			 * 조회로직
			 */
			function doList() {
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var initValue = app.getHostProperty("initValue");
					
				if(initValue) {
					// initValue는 JSON 형태이므로 key값을 통해 value를 받을 수 있습니다
					var vsIpbSrh = initValue["search"];
					app.lookup("dmParam").setValue("search", vsIpbSrh);
					app.lookup("ipb1").redraw();
					
					/** @type cpr.data.DataSet */
					var voData = initValue["data"];
					voData.copyToDataSet(app.lookup("ds2"));
					
					// TODO 자식 앱인스턴스에서 부모창의 앱인스턴스에 있는 컨트롤을 가져올 수 있습니다.
					var voHostAppIns = app.getHost().getAppInstance(); // 부모 앱인스턴스
					var voAllChildren = voHostAppIns.getContainer().getAllRecursiveChildren();
					var voDataCmp = voHostAppIns.getAllDataControls();
					
					doList();
				}
			}
			
			
			/*
			 * "닫기" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				closeDialog();
			}
			
			
			/*
			 * 그리드에서 row-dblclick 이벤트 발생 시 호출.
			 * detail이 row를 더블클릭 한 경우 발생하는 이벤트.
			 */
			function onGrd1RowDblclick(/* cpr.events.CGridEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				closeDialog();
			}
			
			
			/**
			 * 다이얼로그를 닫고 returnValue를 전달합니다.
			 * returnValue는 단일 또는 JSON 형태로 전달할 수 있습니다.
			 */	
			function closeDialog() {
				var vcGrid = app.lookup("grd1");
				var vnSelectedRowIndex = vcGrid.getSelectedRowIndex();
				var voSelection = app.lookup("ds1").getRowData(vnSelectedRowIndex);
				
				/*
				 * 1. Host에 returnValue 바인딩 
				 * 속성명은 바인딩가능한 속성명으로만 작성해야합니다. (바인딩이 안되는 속성일 경우 에러발생)
				 * 아래의 경우에는 returnValue외에도 여러속성을 바인딩 할 수 있습니다.
				 */
			//	app.setHostProperty("returnValue", voSelection);
				app.setHostProperty("returnValue", {
					grid : voSelection,
					dm : app.lookup("dmParam").getDatas()
				});
				app.close();
			
				/*
				 * 2. 닫을 때 returnValue 설정
				 * 아래의 경우는 returnValue만 설정이 가능합니다.
				 */
			//	app.close(voSelection);
			//	app.close({
			//		grid : voSelection,
			//		dm : app.lookup("dmParam")
			//	});
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "column4": "column46", "column5": "column56"},
					{"column1": "column17", "column2": "column27", "column3": "column37", "column4": "column47", "column5": "column57"},
					{"column1": "column18", "column2": "column28", "column3": "column38", "column4": "column48", "column5": "column58"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmParam");
			dataMap_1.parseData({
				"columns" : [{"name": "search"}]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1320px)", "eXFrame");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"autoFit": "1, 2, 3, 4, 5",
				"columns": [
					{"width": "50px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "35"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "No";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "35"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "rowindex";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						}
					]
				}
			});
			if(typeof onGrd1RowDblclick == "function") {
				grid_1.addEventListener("row-dblclick", onGrd1RowDblclick);
			}
			container.addChild(grid_1, {
				"top": "80px",
				"right": "20px",
				"bottom": "60px",
				"left": "20px"
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.rightMargin = "20px";
			formLayout_1.leftMargin = "20px";
			formLayout_1.setColumns(["70px", "1fr", "70px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "label";
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"verticalAlign": "center"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				inputBox_1.bind("value").toDataMap(app.lookup("dmParam"), "search");
				container.addChild(inputBox_1, {
					"colIndex": 1,
					"rowIndex": 0,
					"verticalAlign": "center"
				});
				var button_1 = new cpr.controls.Button("btn1");
				button_1.value = "조회";
				container.addChild(button_1, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "center"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "20px",
				"right": "20px",
				"left": "20px",
				"height": "50px"
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "닫기";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_2, {
				"bottom": "20px",
				"width": "100px",
				"height": "30px",
				"left": "calc(50% - 50px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "dialog";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202109/ProcessStepDetail2
 * Source Location: 202109/ProcessStepDetail2.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202109/ProcessStepDetail2", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * ProcessStepDetail.js
			 * Created at 2021. 8. 6. 오후 1:19:05.
			 *
			 * @author HANS
			 ************************************************/
			
			var util = createCommonUtil();
			
			exports.getStepTime = function(){
				
				var vbChamberASelect = util.DataMap.getValue(app, "dmStepInfo", "SELECTION_CHAMBER_A") == "TRUE" ? 1 : 0;
				var vbChamberBSelect = util.DataMap.getValue(app, "dmStepInfo", "SELECTION_CHAMBER_B") == "TRUE" ? 1 : 0;
				var vbChamberCSelect = util.DataMap.getValue(app, "dmStepInfo", "SELECTION_CHAMBER_C") == "TRUE" ? 1 : 0;
				var vnMaxStepTime = Number(util.DataMap.getValue(app, "dmStepInfo", "MAXIMUM_STEP_TIME"));
				/** @type String */
				var vsLoopControl = util.DataMap.getValue(app, "dmStepInfo", "LOOP");
				var vnRepeatCnt = 0;
				var vsLoopCtrl = app.getAppProperty("loopValue");
				
				if(vsLoopControl != "" && vsLoopControl != null) {
					
					var vaLoopCtrl  = vsLoopControl.split(" ");
					var vnRepeat = vaLoopCtrl[1];
					vnRepeatCnt = Number(vnRepeat);
				} else if(vsLoopCtrl != "" && vsLoopCtrl != null){
					
					var vaLoopCtrl = vsLoopCtrl.split("X");
					var vsRepeat = vaLoopCtrl[1].trim();
					vnRepeatCnt = Number(vsRepeat);
				}
				
				return {
					A : vbChamberASelect*vnRepeatCnt*vnMaxStepTime,
					B : vbChamberBSelect*vnRepeatCnt*vnMaxStepTime,
					C : vbChamberCSelect*vnRepeatCnt*vnMaxStepTime
				}
			}
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * LOOP컬럼안에 있는 값을 display되는 값으로 해석하는 함수입니다.
			 * LOOP컬럼값은 " " 공백 하나로 start Step Index와 Repeat횟수를 구분합니다.
			 * 표현식 내에서 수행되는 함수입니다.
			 * @param {String} psLoopCol
			 * @param {String} psLoopVal
			 */
			exports.getLoopExp = function(psLoopCol,psLoopVal){
				
				var vsStr = psLoopCol;
				var vsResult = "";
				if(psLoopVal != "" && psLoopVal != null){
					vsResult = psLoopVal;
				}else {
					if(vsStr != "") {
					
						var vaStr = vsStr.split(" ");
						var vsStartIndex = vaStr[0];
						var vsRepeat = vaStr[1];
					
						vsResult = "("+vsStartIndex+ " ~ "+app.getAppProperty("rowIndex")+ ") X "+ vsRepeat;
					} 
				}
				return vsResult;
			}
			
			/*
			 * 해당 행이 가진 스텝의 행정보를 리턴합니다.
			 */
			exports.getStepRowData = function(){
				
				var voData = app.lookup("dmStepInfo").getDatas();
				voData.STEP_NUMBER = app.getAppProperty("rowIndex");
				
				return voData;
			}
			
			/*
			 * 스텝 의 행 데이터를 가져와 데이터맵에 빌드하는 함수입니다.
			 * 최초 로드시, 앱속성 dataRow가 수정되었을 떄 수행됩니다.
			 */
			function StepRowDataBuild() {
				
				var voRowData = app.getAppProperty("dataRow");
				if(voRowData != null) {
					app.lookup("dmStepInfo").build(voRowData);
					app.getContainer().redraw();
				}
			}
			
			
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				
				util.Submit.send(app, "subComboList", null, function(){
					util.Control.redraw(app, ["cmbChA","cmbChB","cmbChC","cmbHost"]);
				});
			}
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				StepRowDataBuild();
			}
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				if(e.property == "rowIndex") {
					
					app.lookup("nbeStepNum").redraw();
				} else if(e.property == "dataRow") {
					
					StepRowDataBuild();
				}
			}
			
			
			/*
			 * 인풋 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onIpb2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb2 = e.control;
				var vsBorrowedLoop = app.getAppProperty("loopValue");
				if(vsBorrowedLoop == null || vsBorrowedLoop == ""){
					console.log(app.lookup("nbeStepNum").numberValue);
					util.Dialog.open(app, "app/popup/recipe/RecipeLoopControlPop", 400, 340, function(ev){
						/** @type cpr.controls.Dialog */
						var control = ev.control;
						
						var vsReturnValue = control.returnValue;
						if(vsReturnValue) {
							
							if(vsReturnValue == "Delete") {
								
								vsReturnValue = "";
							}	
								util.DataMap.setValue(app, "dmStepInfo", "LOOP", vsReturnValue)
								app.getHostAppInstance().callAppMethod("refreshLoop")
						}
					}, {
						loop :util.DataMap.getValue(app, "dmStepInfo", "LOOP"),
						stepIndex : app.lookup("nbeStepNum").numberValue
					}, {
						resizable : false
					})
				}
			}
			
			
			/*
			 * 인풋 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onIpb3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb3 = e.control;
				var vsStepEndCtrl = util.DataMap.getValue(app, "dmStepInfo", "STEP_END_CONTROL");
				
				util.Dialog.open(app, "app/popup/recipe/RecipeStepEndControlPopup", 400, 460, function(ev){
					/** @type cpr.controls.Dialog */
					var control = ev.control;
					
					var vsReturnValue = control.returnValue;
					if(vsReturnValue) {
						console.log(vsReturnValue);
						util.DataMap.setValue(app, "dmStepInfo", "STEP_END_CONTROL", vsReturnValue);
						util.Control.redraw(app, "ipb3");
					}
				},{
					stepEndControl : vsStepEndCtrl
				},{
					resizable : false
				})
				
			}
			
			
			/*
			 * 인풋 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onIpbPresCHClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbPresCH = e.control;
				
				var vsPressure = ipbPresCH.value;
				
				util.Dialog.open(app, "app/popup/recipe/RecipeChPressurePopup", 400, 260, function(ev){
					
					/** @type cpr.controls.Dialog */
					var control = ev.control;
					var vsReturnValue = control.returnValue;
					
					if(vsReturnValue) {
						
						ipbPresCH.value = vsReturnValue;
						ipbPresCH.redraw();
					}
				},{
					pressure : vsPressure
				},{
					resizable : false
				})
			}
			
			
			/*
			 * 인풋 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onIpbHeatChClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbHeatCh = e.control;
				
				var vsHeat = ipbHeatCh.value;
				
				util.Dialog.open(app, "app/popup/recipe/RecipeHeatPopup", 400, 340, function(ev){
					
					/** @type cpr.controls.Dialog */
					var control = ev.control;
					var vsReturnValue = control.returnValue;
					
					if(vsReturnValue){
						
						ipbHeatCh.value = vsReturnValue;
						ipbHeatCh.redraw();
					}
				},{
					heat : vsHeat
				},{
					resizable : false
				})
			}
			
			
			/*
			 * 인풋 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onIpbGasClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipbGas = e.control;
				
				var vsGas = ipbGas.value;
				var vnRowIndex = app.getAppProperty("rowIndex");
				
				var vsColumnName = "";
				var voBindInfo = ipbGas.getBindInfo("value");
				var vsFieldLabel = ipbGas.fieldLabel;
				if(voBindInfo) {
					
					vsColumnName = voBindInfo.columnName;
				
					var vsMFCExp = /GAS\d+/;
					
					var vaGasString = vsMFCExp.exec(vsColumnName);
					
					if(vaGasString != null) {
						var vsGasString = vaGasString[0];
						
						vsGasString = vsGasString.replace("GAS","");
						vsFieldLabel = vsGasString + " [" +vsFieldLabel+"]";
					}
				}
				
				util.Dialog.open(app, "app/popup/recipe/RecipeGasPopup", 400, 220, function(ev){
					
					/** @type cpr.controls.Dialog */
					var control = ev.control;
					var vsReturnValue = control.returnValue;
					
					if(vsReturnValue) {
						
						ipbGas.value = vsReturnValue;
						ipbGas.redraw();
					}
				},{
					value : vsGas,
					stepIndex: vnRowIndex,
					title : "Step"+vnRowIndex + " : "+"MFC"+vsFieldLabel
				},{
					resizable : false
				})
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbChSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbCh = e.control;
				var vsMethodNm = "refreshMaximumTime";
				var voHostAppIns = app.getHostAppInstance();
				if(voHostAppIns.hasAppMethod(vsMethodNm)){
					
					voHostAppIns.callAppMethod(vsMethodNm);
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dataRow", null);
			app.declareAppProperty("rowIndex", null);
			app.declareAppProperty("loopValue", null);
			var dataSet_1 = new cpr.data.DataSet("dsSelectionChList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "label"},
					{"name": "value"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsSelectHostList");
			dataSet_2.parseData({
				"columns" : [
					{"name": "label"},
					{"name": "value"}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmStepInfo");
			dataMap_1.parseData({
				"columns" : [
					{"name": "RECIPE_NAME"},
					{"name": "STEP_NUMBER"},
					{"name": "STEP_NAME"},
					{"name": "SELECTION_CHAMBER_A"},
					{"name": "SELECTION_CHAMBER_B"},
					{"name": "SELECTION_CHAMBER_C"},
					{"name": "LOOP"},
					{"name": "STEP_END_CONTROL"},
					{"name": "MAXIMUM_STEP_TIME"},
					{"name": "INIT_RF_POWER"},
					{"name": "INIT_RF_POWER_TIME"},
					{"name": "WAFER_PLACE_CHECK"},
					{"name": "WPC_IGNORE_TIME"},
					{"name": "WPC_LOWER_PRESS"},
					{"name": "WPC_UPPER_PRESS"},
					{"name": "PRESSURE_CH1"},
					{"name": "PRESSURE_RAMP_RATE_CH1"},
					{"name": "HEATER_SPACING_CH1"},
					{"name": "RF_POWER_CH1"},
					{"name": "RF_POWER_TIME_CH1"},
					{"name": "RF_RAMP_UP_CH1"},
					{"name": "RF_RAMP_DOWN_CH1"},
					{"name": "RF_SHUNT_CH1"},
					{"name": "RF_SERIES_CH1"},
					{"name": "PRESSURE_CH2"},
					{"name": "PRESSURE_RAMP_RATE_CH2"},
					{"name": "HEATER_SPACING_CH2"},
					{"name": "RF_POWER_CH2"},
					{"name": "RF_POWER_TIME_CH2"},
					{"name": "RF_RAMP_UP_CH2"},
					{"name": "RF_RAMP_DOWN_CH2"},
					{"name": "RF_SHUNT_CH2"},
					{"name": "RF_SERIES_CH2"},
					{"name": "GAS01_CH1"},
					{"name": "GAS01_RAMP_CH1"},
					{"name": "GAS02_CH1"},
					{"name": "GAS02_RAMP_CH1"},
					{"name": "GAS03_CH1"},
					{"name": "GAS03_RAMP_CH1"},
					{"name": "GAS04_CH1"},
					{"name": "GAS04_RAMP_CH1"},
					{"name": "GAS05_CH1"},
					{"name": "GAS05_RAMP_CH1"},
					{"name": "GAS06_CH1"},
					{"name": "GAS06_RAMP_CH1"},
					{"name": "GAS07_CH1"},
					{"name": "GAS07_RAMP_CH1"},
					{"name": "GAS08_CH1"},
					{"name": "GAS08_RAMP_CH1"},
					{"name": "GAS09_CH1"},
					{"name": "GAS09_RAMP_CH1"},
					{"name": "GAS10_CH1"},
					{"name": "GAS10_RAMP_CH1"},
					{"name": "GAS01_CH2"},
					{"name": "GAS01_RAMP_CH2"},
					{"name": "GAS02_CH2"},
					{"name": "GAS02_RAMP_CH2"},
					{"name": "GAS03_CH2"},
					{"name": "GAS03_RAMP_CH2"},
					{"name": "GAS04_CH2"},
					{"name": "GAS04_RAMP_CH2"},
					{"name": "GAS05_CH2"},
					{"name": "GAS05_RAMP_CH2"},
					{"name": "GAS06_CH2"},
					{"name": "GAS06_RAMP_CH2"},
					{"name": "GAS07_CH2"},
					{"name": "GAS07_RAMP_CH2"},
					{"name": "GAS08_CH2"},
					{"name": "GAS08_RAMP_CH2"},
					{"name": "GAS09_CH2"},
					{"name": "GAS09_RAMP_CH2"},
					{"name": "GAS10_CH2"},
					{"name": "GAS10_RAMP_CH2"},
					{"name": "SELECT_HOST"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subComboList");
			submission_1.action = "data/RecipeListDatas.json";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["bg-gray-100", "border"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr", "20px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp11");
			var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("dmStepInfo"));
			group_1.setBindContext(dataMapContext_1);
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grp12");
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.horizontalSpacing = "5px";
				formLayout_2.verticalSpacing = "5px";
				formLayout_2.setColumns(["1fr"]);
				formLayout_2.setRows(["20px", "20px", "20px", "20px", "20px", "20px"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var group_3 = new cpr.controls.Container("grp13");
					// Layout
					var formLayout_3 = new cpr.controls.layouts.FormLayout();
					formLayout_3.topMargin = "0px";
					formLayout_3.rightMargin = "0px";
					formLayout_3.bottomMargin = "0px";
					formLayout_3.leftMargin = "0px";
					formLayout_3.horizontalSpacing = "5px";
					formLayout_3.verticalSpacing = "5px";
					formLayout_3.setColumns(["70px", "1fr"]);
					formLayout_3.setRows(["1fr"]);
					group_3.setLayout(formLayout_3);
					(function(container){
						var numberEditor_1 = new cpr.controls.NumberEditor("nbeStepNum");
						numberEditor_1.spinButton = false;
						numberEditor_1.bind("value").toAppProperty("rowIndex");
						container.addChild(numberEditor_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var numberEditor_2 = new cpr.controls.NumberEditor("nbe19");
						numberEditor_2.spinButton = false;
						numberEditor_2.bind("value").toDataColumn("STEP_NAME");
						container.addChild(numberEditor_2, {
							"colIndex": 1,
							"rowIndex": 0
						});
					})(group_3);
					container.addChild(group_3, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var group_4 = new cpr.controls.Container("grp14");
					// Layout
					var formLayout_4 = new cpr.controls.layouts.FormLayout();
					formLayout_4.topMargin = "0px";
					formLayout_4.rightMargin = "0px";
					formLayout_4.bottomMargin = "0px";
					formLayout_4.leftMargin = "0px";
					formLayout_4.horizontalSpacing = "5px";
					formLayout_4.verticalSpacing = "5px";
					formLayout_4.setColumns(["1fr", "1fr", "1fr"]);
					formLayout_4.setRows(["1fr"]);
					group_4.setLayout(formLayout_4);
					(function(container){
						var comboBox_1 = new cpr.controls.ComboBox("cmbChA");
						comboBox_1.hideButton = true;
						comboBox_1.preventInput = true;
						comboBox_1.style.setClasses(["text-center"]);
						comboBox_1.bind("value").toDataColumn("SELECTION_CHAMBER_A");
						(function(comboBox_1){
							comboBox_1.setItemSet(app.lookup("dsSelectionChList"), {
								"label": "label",
								"value": "value"
							});
						})(comboBox_1);
						if(typeof onCmbChSelectionChange == "function") {
							comboBox_1.addEventListener("selection-change", onCmbChSelectionChange);
						}
						container.addChild(comboBox_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var comboBox_2 = new cpr.controls.ComboBox("cmbChB");
						comboBox_2.hideButton = true;
						comboBox_2.preventInput = true;
						comboBox_2.style.setClasses(["text-center"]);
						comboBox_2.bind("value").toDataColumn("SELECTION_CHAMBER_B");
						(function(comboBox_2){
							comboBox_2.setItemSet(app.lookup("dsSelectionChList"), {
								"label": "label",
								"value": "value"
							});
						})(comboBox_2);
						if(typeof onCmbChSelectionChange == "function") {
							comboBox_2.addEventListener("selection-change", onCmbChSelectionChange);
						}
						container.addChild(comboBox_2, {
							"colIndex": 1,
							"rowIndex": 0
						});
						var comboBox_3 = new cpr.controls.ComboBox("cmbChC");
						comboBox_3.hideButton = true;
						comboBox_3.preventInput = true;
						comboBox_3.style.setClasses(["text-center"]);
						comboBox_3.bind("value").toDataColumn("SELECTION_CHAMBER_C");
						(function(comboBox_3){
							comboBox_3.setItemSet(app.lookup("dsSelectionChList"), {
								"label": "label",
								"value": "value"
							});
						})(comboBox_3);
						if(typeof onCmbChSelectionChange == "function") {
							comboBox_3.addEventListener("selection-change", onCmbChSelectionChange);
						}
						container.addChild(comboBox_3, {
							"colIndex": 2,
							"rowIndex": 0
						});
					})(group_4);
					container.addChild(group_4, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var group_5 = new cpr.controls.Container("grp15");
					// Layout
					var formLayout_5 = new cpr.controls.layouts.FormLayout();
					formLayout_5.topMargin = "0px";
					formLayout_5.rightMargin = "0px";
					formLayout_5.bottomMargin = "0px";
					formLayout_5.leftMargin = "0px";
					formLayout_5.horizontalSpacing = "5px";
					formLayout_5.verticalSpacing = "5px";
					formLayout_5.setColumns(["1fr", "1fr"]);
					formLayout_5.setRows(["1fr"]);
					group_5.setLayout(formLayout_5);
					(function(container){
						var numberEditor_3 = new cpr.controls.NumberEditor("nbe12");
						numberEditor_3.spinButton = false;
						numberEditor_3.format = "s#,##0.0";
						numberEditor_3.bind("value").toDataColumn("INIT_RF_POWER");
						container.addChild(numberEditor_3, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var numberEditor_4 = new cpr.controls.NumberEditor("nbe13");
						numberEditor_4.spinButton = false;
						numberEditor_4.format = "s#,##0.00";
						numberEditor_4.bind("value").toDataColumn("INIT_RF_POWER_TIME");
						container.addChild(numberEditor_4, {
							"colIndex": 1,
							"rowIndex": 0
						});
					})(group_5);
					container.addChild(group_5, {
						"colIndex": 0,
						"rowIndex": 5
					});
					var inputBox_1 = new cpr.controls.InputBox("ipb2");
					inputBox_1.userAttr({"ignorePolicy": "Y"});
					inputBox_1.style.setClasses(["text-center"]);
					inputBox_1.bind("value").toExpression("@getLoopExp(LOOP,@loopValue)");
					if(typeof onIpb2Click == "function") {
						inputBox_1.addEventListener("click", onIpb2Click);
					}
					container.addChild(inputBox_1, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var inputBox_2 = new cpr.controls.InputBox("ipb3");
					inputBox_2.userAttr({"ignorePolicy": "Y"});
					inputBox_2.style.setClasses(["text-center"]);
					inputBox_2.bind("value").toDataColumn("STEP_END_CONTROL");
					if(typeof onIpb3Click == "function") {
						inputBox_2.addEventListener("click", onIpb3Click);
					}
					container.addChild(inputBox_2, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var numberEditor_5 = new cpr.controls.NumberEditor("nbe8");
					numberEditor_5.spinButton = false;
					numberEditor_5.format = "s#,##0.000";
					numberEditor_5.bind("value").toDataColumn("MAXIMUM_STEP_TIME");
					container.addChild(numberEditor_5, {
						"colIndex": 0,
						"rowIndex": 4
					});
				})(group_2);
				container.addChild(group_2, {
					"width": "148px",
					"height": "155px"
				});
				var group_6 = new cpr.controls.Container("grp16");
				// Layout
				var formLayout_6 = new cpr.controls.layouts.FormLayout();
				formLayout_6.topMargin = "5px";
				formLayout_6.rightMargin = "5px";
				formLayout_6.bottomMargin = "5px";
				formLayout_6.leftMargin = "5px";
				formLayout_6.setColumns(["1fr", "1fr"]);
				formLayout_6.setRows(["20px", "20px", "20px", "20px", "20px", "20px", "20px", "20px"]);
				group_6.setLayout(formLayout_6);
				(function(container){
					var numberEditor_6 = new cpr.controls.NumberEditor("nbe6");
					numberEditor_6.spinButton = false;
					numberEditor_6.format = "s#,##0.0";
					numberEditor_6.bind("value").toDataColumn("RF_POWER_CH1");
					container.addChild(numberEditor_6, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var numberEditor_7 = new cpr.controls.NumberEditor("nbe7");
					numberEditor_7.spinButton = false;
					numberEditor_7.format = "s#,##0.0";
					numberEditor_7.bind("value").toDataColumn("RF_SHUNT_CH1");
					container.addChild(numberEditor_7, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var numberEditor_8 = new cpr.controls.NumberEditor("nbe14");
					numberEditor_8.spinButton = false;
					numberEditor_8.format = "s#,##0.000";
					numberEditor_8.bind("value").toDataColumn("RF_POWER_TIME_CH1");
					container.addChild(numberEditor_8, {
						"colIndex": 1,
						"rowIndex": 2
					});
					var numberEditor_9 = new cpr.controls.NumberEditor("nbe15");
					numberEditor_9.spinButton = false;
					numberEditor_9.format = "s#,##0.0";
					numberEditor_9.bind("value").toDataColumn("RF_SERIES_CH1");
					container.addChild(numberEditor_9, {
						"colIndex": 1,
						"rowIndex": 3
					});
					var inputBox_3 = new cpr.controls.InputBox("ipbPresCH1");
					inputBox_3.userAttr({"ignorePolicy": "Y"});
					inputBox_3.style.setClasses(["text-center"]);
					inputBox_3.bind("value").toDataColumn("PRESSURE_CH1");
					if(typeof onIpbPresCHClick == "function") {
						inputBox_3.addEventListener("click", onIpbPresCHClick);
					}
					container.addChild(inputBox_3, {
						"colIndex": 0,
						"rowIndex": 0,
						"colSpan": 2,
						"rowSpan": 1
					});
					var inputBox_4 = new cpr.controls.InputBox("ipbHeatCh1");
					inputBox_4.userAttr({"ignorePolicy": "Y"});
					inputBox_4.style.setClasses(["text-right"]);
					inputBox_4.bind("value").toDataColumn("HEATER_SPACING_CH1");
					if(typeof onIpbHeatChClick == "function") {
						inputBox_4.addEventListener("click", onIpbHeatChClick);
					}
					container.addChild(inputBox_4, {
						"colIndex": 0,
						"rowIndex": 1,
						"colSpan": 2,
						"rowSpan": 1
					});
					var inputBox_5 = new cpr.controls.InputBox("ipbGas2Ch1");
					inputBox_5.fieldLabel = "Ar";
					inputBox_5.userAttr({"ignorePolicy": "Y"});
					inputBox_5.style.setClasses(["text-right"]);
					inputBox_5.bind("value").toDataColumn("GAS02_CH1");
					if(typeof onIpbGasClick == "function") {
						inputBox_5.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_5, {
						"colIndex": 1,
						"rowIndex": 4
					});
					var inputBox_6 = new cpr.controls.InputBox("ipbGas3Ch1");
					inputBox_6.fieldLabel = "CF4";
					inputBox_6.userAttr({"ignorePolicy": "Y"});
					inputBox_6.style.setClasses(["text-right"]);
					inputBox_6.bind("value").toDataColumn("GAS03_CH1");
					if(typeof onIpbGasClick == "function") {
						inputBox_6.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_6, {
						"colIndex": 0,
						"rowIndex": 5
					});
					var inputBox_7 = new cpr.controls.InputBox("ipbGas5Ch1");
					inputBox_7.fieldLabel = "CH2F2";
					inputBox_7.userAttr({"ignorePolicy": "Y"});
					inputBox_7.style.setClasses(["text-right"]);
					inputBox_7.bind("value").toDataColumn("GAS05_CH1");
					if(typeof onIpbGasClick == "function") {
						inputBox_7.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_7, {
						"colIndex": 0,
						"rowIndex": 6
					});
					var inputBox_8 = new cpr.controls.InputBox("ipbGas6Ch1");
					inputBox_8.fieldLabel = "N2";
					inputBox_8.userAttr({"ignorePolicy": "Y"});
					inputBox_8.style.setClasses(["text-right"]);
					inputBox_8.bind("value").toDataColumn("GAS06_CH1");
					if(typeof onIpbGasClick == "function") {
						inputBox_8.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_8, {
						"colIndex": 1,
						"rowIndex": 6
					});
					var inputBox_9 = new cpr.controls.InputBox("ipbGas7Ch1");
					inputBox_9.fieldLabel = "O2";
					inputBox_9.userAttr({"ignorePolicy": "Y"});
					inputBox_9.style.setClasses(["text-right"]);
					inputBox_9.bind("value").toDataColumn("GAS07_CH1");
					if(typeof onIpbGasClick == "function") {
						inputBox_9.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_9, {
						"colIndex": 0,
						"rowIndex": 7
					});
				})(group_6);
				container.addChild(group_6, {
					"width": "148px",
					"height": "205px"
				});
				var group_7 = new cpr.controls.Container("grp28");
				// Layout
				var formLayout_7 = new cpr.controls.layouts.FormLayout();
				formLayout_7.topMargin = "5px";
				formLayout_7.rightMargin = "5px";
				formLayout_7.bottomMargin = "5px";
				formLayout_7.leftMargin = "5px";
				formLayout_7.setColumns(["1fr", "1fr"]);
				formLayout_7.setRows(["20px", "20px", "20px", "20px", "20px", "20px", "20px", "20px"]);
				group_7.setLayout(formLayout_7);
				(function(container){
					var numberEditor_10 = new cpr.controls.NumberEditor("nbe22");
					numberEditor_10.spinButton = false;
					numberEditor_10.format = "s#,##0.0";
					numberEditor_10.bind("value").toDataColumn("RF_POWER_CH2");
					container.addChild(numberEditor_10, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var numberEditor_11 = new cpr.controls.NumberEditor("nbe23");
					numberEditor_11.spinButton = false;
					numberEditor_11.format = "s#,##0.0";
					numberEditor_11.bind("value").toDataColumn("RF_SHUNT_CH2");
					container.addChild(numberEditor_11, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var numberEditor_12 = new cpr.controls.NumberEditor("nbe30");
					numberEditor_12.spinButton = false;
					numberEditor_12.format = "s#,##0.0";
					numberEditor_12.bind("value").toDataColumn("RF_POWER_TIME_CH2");
					container.addChild(numberEditor_12, {
						"colIndex": 1,
						"rowIndex": 2
					});
					var numberEditor_13 = new cpr.controls.NumberEditor("nbe31");
					numberEditor_13.spinButton = false;
					numberEditor_13.format = "s#,##0.0";
					numberEditor_13.bind("value").toDataColumn("RF_SERIES_CH2");
					container.addChild(numberEditor_13, {
						"colIndex": 1,
						"rowIndex": 3
					});
					var inputBox_10 = new cpr.controls.InputBox("ipbPresCh2");
					inputBox_10.userAttr({"ignorePolicy": "Y"});
					inputBox_10.style.setClasses(["text-center"]);
					inputBox_10.bind("value").toDataColumn("PRESSURE_CH2");
					if(typeof onIpbPresCHClick == "function") {
						inputBox_10.addEventListener("click", onIpbPresCHClick);
					}
					container.addChild(inputBox_10, {
						"colIndex": 0,
						"rowIndex": 0,
						"colSpan": 2,
						"rowSpan": 1
					});
					var inputBox_11 = new cpr.controls.InputBox("ipbHeatCh2");
					inputBox_11.userAttr({"ignorePolicy": "Y"});
					inputBox_11.style.setClasses(["text-right"]);
					inputBox_11.bind("value").toDataColumn("HEATER_SPACING_CH2");
					if(typeof onIpbHeatChClick == "function") {
						inputBox_11.addEventListener("click", onIpbHeatChClick);
					}
					container.addChild(inputBox_11, {
						"colIndex": 0,
						"rowIndex": 1,
						"colSpan": 2,
						"rowSpan": 1
					});
					var inputBox_12 = new cpr.controls.InputBox("ipbGas2Ch2");
					inputBox_12.fieldLabel = "Ar";
					inputBox_12.userAttr({"ignorePolicy": "Y"});
					inputBox_12.style.setClasses(["text-right"]);
					inputBox_12.bind("value").toDataColumn("GAS02_CH2");
					if(typeof onIpbGasClick == "function") {
						inputBox_12.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_12, {
						"colIndex": 1,
						"rowIndex": 4
					});
					var inputBox_13 = new cpr.controls.InputBox("ipbGas3Ch2");
					inputBox_13.fieldLabel = "CF4";
					inputBox_13.userAttr({"ignorePolicy": "Y"});
					inputBox_13.style.setClasses(["text-right"]);
					inputBox_13.bind("value").toDataColumn("GAS03_CH2");
					if(typeof onIpbGasClick == "function") {
						inputBox_13.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_13, {
						"colIndex": 0,
						"rowIndex": 5
					});
					var inputBox_14 = new cpr.controls.InputBox("ipbGas5Ch2");
					inputBox_14.fieldLabel = "CH2F2";
					inputBox_14.userAttr({"ignorePolicy": "Y"});
					inputBox_14.style.setClasses(["text-right"]);
					inputBox_14.bind("value").toDataColumn("GAS05_CH2");
					if(typeof onIpbGasClick == "function") {
						inputBox_14.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_14, {
						"colIndex": 0,
						"rowIndex": 6
					});
					var inputBox_15 = new cpr.controls.InputBox("ipbGas6Ch2");
					inputBox_15.fieldLabel = "N2";
					inputBox_15.userAttr({"ignorePolicy": "Y"});
					inputBox_15.style.setClasses(["text-right"]);
					inputBox_15.bind("value").toDataColumn("GAS06_CH2");
					if(typeof onIpbGasClick == "function") {
						inputBox_15.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_15, {
						"colIndex": 1,
						"rowIndex": 6
					});
					var inputBox_16 = new cpr.controls.InputBox("ipbGas7Ch2");
					inputBox_16.fieldLabel = "O2";
					inputBox_16.userAttr({"ignorePolicy": "Y"});
					inputBox_16.style.setClasses(["text-right"]);
					inputBox_16.bind("value").toDataColumn("GAS07_CH2");
					if(typeof onIpbGasClick == "function") {
						inputBox_16.addEventListener("click", onIpbGasClick);
					}
					container.addChild(inputBox_16, {
						"colIndex": 0,
						"rowIndex": 7
					});
				})(group_7);
				container.addChild(group_7, {
					"width": "148px",
					"height": "205px"
				});
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var comboBox_4 = new cpr.controls.ComboBox("cmbHost");
			comboBox_4.hideButton = true;
			comboBox_4.preventInput = true;
			comboBox_4.bind("value").toDataMap(app.lookup("dmStepInfo"), "SELECT_HOST");
			(function(comboBox_4){
				comboBox_4.setItemSet(app.lookup("dsSelectHostList"), {
					"label": "label",
					"value": "value"
				});
			})(comboBox_4);
			container.addChild(comboBox_4, {
				"colIndex": 0,
				"rowIndex": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "ProcessStepDetail2";
	cpr.core.Platform.INSTANCE.register(app);
})();

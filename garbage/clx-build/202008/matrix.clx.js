/*
 * App URI: 202008/matrix
 * Source Location: 202008/matrix.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202008/matrix", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * matrix.js
			 * Created at 2020. 8. 20. 오전 10:10:05.
			 *
			 * @author han
			 ************************************************/
			
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				app.lookup("msm1").send();
			}
			
			
			/*
			 * 서브미션에서 before-submit 이벤트 발생 시 호출.
			 * 통신을 시작하기전에 발생합니다.
			 */
			function onSms1BeforeSubmit(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms1 = e.control;
				
			//	sms1.setResponseDecoder(_responseDecode);
			}
			
			
			///**
			// * @private
			// * @param {cpr.protocols.Submission} submission
			// * @param {Object} resData
			// */
			//function _responseDecode(submission, resData) {
			//	var _app = submission.getAppInstance();
			//	var resDataObj = JSON.parse(resData);
			//	var checkIsMap = true;
			//	var voData = resDataObj["output"];
			//	var res = {};
			//	
			//	for (var keys in voData) {
			//		res[keys] = voData[keys];
			//	}
			//	
			//	for (var resKey in res) {
			//		if(res[resKey] instanceof Array) {
			//			checkIsMap = false;
			//		}
			//	}
			//	
			//	if(checkIsMap) {
			//		res = resData;
			//	}
			//		return {
			//			contentType: "application/json",
			//			content: res
			//		};
			//}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms1SubmitDone(/* cpr.events.CSubmissionEvent */ e) {
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms1 = e.control;
				
				console.log(sms1.xhr.responseText);
				
				console.log(app.lookup("dm1").getDatas());
				console.log(app.lookup("ds2").getRowDataRanged());
			}
			
			
			/*
			 * 매트릭스 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onMsm1SubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.MatrixSubmission
				 */
				var msm1 = e.control;
				console.log(app.lookup("dm1").getDatas());
				console.log(app.lookup("ds2").getRowDataRanged());
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns" : [
					{"name": "key"},
					{"name": "value"}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{"name": "a"},
					{"name": "b"},
					{"name": "c"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "data/SAMPLE_DATA.json";
			submission_1.addResponseData(dataMap_1, false, "output");
			submission_1.addResponseData(dataSet_2, false, "d");
			if(typeof onSms1BeforeSubmit == "function") {
				submission_1.addEventListener("before-submit", onSms1BeforeSubmit);
			}
			if(typeof onSms1SubmitDone == "function") {
				submission_1.addEventListener("submit-done", onSms1SubmitDone);
			}
			app.register(submission_1);
			
			var matrixSubmission_1 = new cpr.protocols.MatrixSubmission("msm1");
			matrixSubmission_1.async = true;
			matrixSubmission_1.withCredentials = false;
			matrixSubmission_1.method = "post";
			matrixSubmission_1.action = "data/SAMPLE_DATA.json";
			matrixSubmission_1.setProtocolDataModel(new cpr.protocols.matrix.MatrixDataModel({
				"request": {
					"format": "object",
					"data": {}
				},
				"response": {
					"format": "object",
					"data": {
						"output" : {
							"format": "object",
							"dataControl": dataMap_1,
							"data": {
								"a": {"format": "simple", "path": "@a"},
								"b": {"format": "simple", "path": "@b"},
								"c": {"format": "simple", "path": "@c"},
								"d": {
									"format": "array",
									"dataControl": dataSet_2,
									"data": {
										"key": {"format": "simple", "path": "@key"},
										"value": {"format": "simple", "path": "@value"}
									}
								}
							}
						}
					}
				}
			}));
			if(typeof onMsm1SubmitDone == "function") {
				matrixSubmission_1.addEventListener("submit-done", onMsm1SubmitDone);
			}
			app.register(matrixSubmission_1);
			
			var matrixSubmission_2 = new cpr.protocols.MatrixSubmission("msm2");
			matrixSubmission_2.async = true;
			matrixSubmission_2.withCredentials = false;
			matrixSubmission_2.method = "post";
			matrixSubmission_2.action = "";
			matrixSubmission_2.setProtocolDataModel(new cpr.protocols.matrix.MatrixDataModel({
				"request": {
					"format": "object",
					"data": {}
				},
				"response": {
					"format": "object",
					"data": {
						"child1" : {
							"format": "array",
							"dataControl": dataSet_2,
							"data": {}
						}
					}
				}
			}));
			app.register(matrixSubmission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "Button";
			container.addChild(button_2, {
				"top": "20px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "matrix";
	cpr.core.Platform.INSTANCE.register(app);
})();

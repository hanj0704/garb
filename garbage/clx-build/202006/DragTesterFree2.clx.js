/*
 * App URI: 202006/DragTesterFree2
 * Source Location: 202006/DragTesterFree2.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202006/DragTesterFree2", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tester.js
			 * Created at 2019. 12. 2. 오후 5:46:02.
			 *
			 * @author HANS
			 ************************************************/
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				setDragSource(app.lookup("grd1"));
				setDropTarget(app.lookup("grd1"));
			}
			
			function createDragSourceFeedback() {
				var feedback = new cpr.controls.Output();
				feedback.ellipsis = true;
				feedback.style.css({
					"opacity": "0.8",
					"width": "50px",
					"height": "25px",
					"border": "solid 1px red",
					"text-align": "center",
					"color": "black",
					"border-radius": "10px",
					"background": "white",
					"box-shadow": "0px 2px 10px #ddd",
					"cursor": "move"
				});
				return feedback;
			}
			
			
			/**
			 * 파라미터의 컨트롤을 드래그 가능하도록 드래그 소스를 지정하는 함수.
			 * @param {cpr.controls.UIControl} control
			 */
			function setDragSource(control) {
				var feedback = null;
				var actualRect = null;
				new cpr.controls.DragSource(control, {
					options: {
						dataType: "text",
						threadhold: 10
					},
					onDragStart: function(context) {//dragStart에서 사용중인 context.source.detail이라는 대상은 이후 릴리즈에서 depreacted될 대상으로,context.sourceTargetObject로 대체됩니다.
						if (context.source.detail != null && context.source.detail.relativeTargetName != "header") {
							context.cursor = "grabbing";
							feedback = createDragSourceFeedback();
							control.style.css("opacity", " 0.5");
							context.data = context.source.detail;
							feedback.value = JSON.stringify(control.getRow(context.source.detail.rowIndex).getRowData());
			
							var voDragStartLoca = context.dragStartLocation;
							actualRect = new cpr.geometry.Rectangle(voDragStartLoca.x, voDragStartLoca.y, control.getActualRect().width, 25);
							app.floatControl(feedback, actualRect);
							context.source = null;
						} else {
							context.cancel();
						}
					},
					onDragMove: function(context) {
						context.cursor = "grabbing";
						var newRect = actualRect.getTranslatedByDimension(context.dragDelta);
						app.floatControl(feedback, newRect);
					},
					onDragEnd: function(context) {
						context.cursor = "";
						feedback.dispose();
						feedback = null;
						control.style.removeStyle("opacity");
					}
				});
			}
			var voPrevRowElement = null;
			
			/**
			 * 파라미터로 받은 컨트롤을 드랍가능한 타겟으로 지정하는 함수.
			 * @param {cpr.controls.UIControl} control2
			 */
			function setDropTarget(control2) {
			
				var dropTarget = new cpr.controls.DropTarget(control2, {
					isImportant: function(source) {
						return source.dataType == "text";
					},
					onDragEnter: function(context) {
			
					},
					onDragLeave: function(context) {
			
					},
					onDragMove: function(context) {
						var vaElementsOnMouse = elementsFromPoint(context.pointerLocation.x, context.pointerLocation.y);
			
						var vaClGridRowEle = vaElementsOnMouse.filter(function( /*HTMLElement*/ each) {
							if (each.classList.contains("cl-grid-row")) {
								return each;
							}
						});
						var voGridRowElement = vaClGridRowEle[0];
			
						if (voGridRowElement && !voGridRowElement.classList.contains("row-bottom")) {
							if (voGridRowElement != voPrevRowElement && voPrevRowElement) {
			
								voPrevRowElement.classList.remove("row-bottom");
							}
							voPrevRowElement = voGridRowElement;
							voGridRowElement.classList.add("row-bottom");
						}
			
					},
					onDrop: function(context) {
			
			//			if (context.target.detail != null) {
			//				control2.insertRowData(context.target.detail.rowIndex, true, context.source.control.getRow(context.data.rowIndex).getRowData());
			//			} else {
							var vnInsertIdx = Number(voPrevRowElement.getAttribute("aria-rowindex")) - 1;
							var vbInsertAfter = vnInsertIdx == control2.getRowCount() - 1 ? true : false;
			//				control2.insertRowData(vnInsertIdx, vbInsertAfter, context.source.control.getRow(context.data.rowIndex).getRowData());
							
			//				app.lookup("dsVoucherCard").
			//				app.lookup("dsVoucherCard").changeRowIndex(context.data.rowIndex, vnInsertIdx);
							var vcGrid = app.lookup("grd1");
							var vcDataSet = app.lookup("dsVoucherCard");
							var idxs = vcGrid.getSelectedRowIndices();
							var a = idxs[0];
							var q = vnInsertIdx;
			//				console.log(idxs);
			//				console.log(a);
							for(var i = 0 ; i < idxs.length ; i++) {
								console.log(q);
								vcDataSet.moveRowIndex(idxs[i], q, true);
								
			//					q++;
							}
			//				app.lookup("dsVoucherCard").moveRowIndex(context.data.rowIndex, vnInsertIdx, false);
							app.lookup("grd1").redraw();
							app.lookup("grd1").clearSelection(false);
			//			}
						voPrevRowElement.classList.remove("row-bottom");
					}
				});
			}
			
			/**
			 * 마우스 포인터가 위치한 곳 밑에 있는 모든 요소를 가져오는 함수입니다.
			 * @param {Number} x
			 * @param {Number} y
			 * @return {HTMLElement}
			 */
			function elementsFromPoint(x, y) {
				if (document["msElementsFromPoint"]) {
					var nodeList = document["msElementsFromPoint"](x, y);
					if (!nodeList) {
						return [];
					} else {
						return Array.prototype.slice.call(nodeList);
					}
				} else {
					return (document["elementsFromPoint"](x, y) || []);
				}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsVoucher");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"}
				],
				"rows": [
					{"column1": "asdfadsfadsfadsfasfdsaf", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61"},
					{"column1": "column11", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "column63"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "column64"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55", "column6": "column65"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsVoucherCard");
			dataSet_2.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{
						"name": "column6",
						"dataType": "number"
					}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "1"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "2"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "3"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "4"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55", "column6": "5"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "column4": "column46", "column5": "column56", "column6": "6"},
					{"column1": "column17", "column2": "column27", "column3": "column37", "column4": "column47", "column5": "column57", "column6": "7"},
					{"column1": "column18", "column2": "column28", "column3": "column38", "column4": "column48", "column5": "column58", "column6": "8"},
					{"column1": "column19", "column2": "column29", "column3": "column39", "column4": "column49", "column5": "column59", "column6": "9"},
					{"column1": "column110", "column2": "column210", "column3": "column310", "column4": "column410", "column5": "column510", "column6": "10"},
					{"column1": "column111", "column2": "column211", "column3": "column311", "column4": "column411", "column5": "column511", "column6": "11"}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("dsVoucherCard"),
				"selectionMulti": "multi",
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "column6";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column6";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						}
					]
				}
			});
			if(typeof onGrd1BeforeSelectionChange == "function") {
				grid_1.addEventListener("before-selection-change", onGrd1BeforeSelectionChange);
			}
			container.addChild(grid_1, {
				"top": "39px",
				"left": "20px",
				"width": "478px",
				"height": "317px"
			});
			
			var grid_2 = new cpr.controls.Grid("grd2");
			grid_2.init({
				"dataSet": app.lookup("dsVoucher"),
				"autoRowHeight": "none",
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "column6";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column6";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						}
					]
				}
			});
			container.addChild(grid_2, {
				"top": "39px",
				"left": "526px",
				"width": "478px",
				"height": "317px"
			});
			
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "원하는 행에 인서트 하는 샘플";
			container.addChild(output_1, {
				"top": "6px",
				"left": "20px",
				"width": "984px",
				"height": "23px"
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "<style>\r\n.row-bottom {\r\n\tborder-bottom : solid 2px red;\r\n}\r\n<\/style>";
			container.addChild(hTMLSnippet_1, {
				"top": "366px",
				"left": "20px",
				"width": "328px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyContextmenu == "function"){
				app.getContainer().addEventListener("contextmenu", onBodyContextmenu);
			}
		}
	});
	app.title = "DragTesterFree2";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202002/test2
 * Source Location: 202002/test2.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202002/test2", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * test2.js
			 * Created at 2020. 1. 6. 오후 4:34:52.
			 *
			 * @author HANS
			 ************************************************/
			
			
			var momentStart;
			/**
			 * 
			 * @param {Array} voRo
			 */
			function createGridInitConfig (voRow) {
					var vcNewDataSet = new cpr.data.DataSet("dsNew1");
					var vcGrid = app.lookup("grd1");
				var voKeys = _.keys(voRow[0]);
				var cols = [];
				voKeys.forEach(function(each){
					cols.push({"name" : each});
				});
				vcNewDataSet.parseData({
					"columns" : cols
				})
			
				vcNewDataSet.build(voRow);
				
				var voConfingInfo = vcGrid.getInitConfig();
				
				voConfingInfo.dataSet = vcNewDataSet;
				
				vcGrid.init(voConfingInfo);
				vcGrid.redraw();
			
				var endTime = moment();
				var k = moment(endTime,"YYYYMMDD HH:mm:ss");
				var kk = moment(momentStart,"YYYYMMDD HH:mm:ss");
				
				console.log(moment.duration(k.diff(kk)).asSeconds());
			}
			
			function transDataStruct (column1) {
				
				var vcDs = app.lookup("ds1");
			
				var vaColDatas = vcDs.getColumnData(column1);	
				
				var vaUniqData = _.uniq(vaColDatas);
				
				var voRow  = [];
				vaUniqData.forEach(function(each){
					
					var voRows = vcDs.findAllRow(column1+" == '"+each+"'");
					
					var voTempRow = {};
					voTempRow[column1] = each;
					voRows.forEach(function(eachs){
						
						var vsGroup = eachs.getValue("GROUP");
						voTempRow[vsGroup+"_CPU"] = eachs.getValue("CPU");
						voTempRow[vsGroup+"_MEMORY"] = eachs.getValue("MEMORY");
					});
					voRow.push(voTempRow);
				});
				
				createGridInitConfig(voRow);
				
			}
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				momentStart = moment();
			//	console.log(momentStart);
				transDataStruct("R_DATE_TIME");
				
				
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				var ds1 = app.lookup("ds1");
				
				var rowDatas=  [];
				var momentDate = moment("202002131000","YYYYMMDDhhmm");
				for(var i =0; i < 1000; i++) {
					var vsDate = momentDate.add(1,"minutes").format("YYYY-MM-DD HH:mm");
					rowDatas.push({"R_DATE_TIME" : vsDate,"GROUP" : "A", "CPU" : i,"MEMORY" :i});
					rowDatas.push({"R_DATE_TIME" : vsDate,"GROUP" : "B", "CPU" : i,"MEMORY" :i});
					rowDatas.push({"R_DATE_TIME" : vsDate,"GROUP" : "C", "CPU" : i,"MEMORY" :i});
					rowDatas.push({"R_DATE_TIME" : vsDate,"GROUP" : "D", "CPU" : i,"MEMORY" :i});
					rowDatas.push({"R_DATE_TIME" : vsDate,"GROUP" : "E", "CPU" : i,"MEMORY" :i});
				}
				
				
				ds1.build(rowDatas);
				
				console.log(ds1.getRowDataRanged());
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsPlan");
			dataSet_1.parseData({
				"columns" : [
					{"name": "rowNum"},
					{"name": "totCnt"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds1");
			dataSet_2.parseData({
				"columns": [
					{"name": "R_DATE_TIME"},
					{"name": "GROUP"},
					{
						"name": "CPU",
						"dataType": "number",
						"info": "CPU 사용량"
					},
					{
						"name": "MEMORY",
						"dataType": "number",
						"info": "메모리 사용량"
					}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds2");
			dataSet_3.parseData({
				"columns" : [
					{"name": "R_DATE_TIME"},
					{"name": "A_CPU"},
					{"name": "A_MEMORY"},
					{"name": "B_CPU"},
					{"name": "B_MEMORY"},
					{"name": "C_CPU"},
					{"name": "C_MEMORY"},
					{"name": "D_CPU"},
					{"name": "D_MEMORY"},
					{"name": "E_CPU"},
					{"name": "E_MEMORY"}
				]
			});
			app.register(dataSet_3);
			var dataMap_1 = new cpr.data.DataMap("dmParam");
			dataMap_1.parseData({
				"columns" : [
					{"name": "q"},
					{"name": "oq"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.addResponseData(dataSet_2, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"autoRowHeight": "all",
				"columns": [
					{"width": "158px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [
						{"height": "24px"},
						{"height": "24px"}
					],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0, "rowSpan": 2, "colSpan": 1},
							"configurator": function(cell){
								cell.targetColumnName = "R_DATE_TIME";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "R_DATE_TIME";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "A_CPU";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "CPU 사용량";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "A_MEMORY";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "메모리 사용량";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1, "rowSpan": 1, "colSpan": 2},
							"configurator": function(cell){
								cell.text = "A";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3, "rowSpan": 1, "colSpan": 2},
							"configurator": function(cell){
								cell.text = "B";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "B_CPU";
								cell.text = "CPU 사용량";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "B_MEMORY";
								cell.text = "메모리 사용량";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5, "rowSpan": 1, "colSpan": 2},
							"configurator": function(cell){
								cell.text = "C";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7, "rowSpan": 1, "colSpan": 2},
							"configurator": function(cell){
								cell.text = "D";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "B_CPU";
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "normal";
								cell.text = "CPU 사용량";
								cell.emptyValueSort = "emptyString";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 6},
							"configurator": function(cell){
								cell.targetColumnName = "B_MEMORY";
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "normal";
								cell.text = "메모리 사용량";
								cell.emptyValueSort = "emptyString";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 7},
							"configurator": function(cell){
								cell.targetColumnName = "B_CPU";
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "normal";
								cell.text = "CPU 사용량";
								cell.emptyValueSort = "emptyString";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 8},
							"configurator": function(cell){
								cell.targetColumnName = "B_MEMORY";
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "normal";
								cell.text = "메모리 사용량";
								cell.emptyValueSort = "emptyString";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 9, "rowSpan": 1, "colSpan": 1},
							"configurator": function(cell){
								cell.targetColumnName = "B_CPU";
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "normal";
								cell.text = "CPU 사용량";
								cell.emptyValueSort = "emptyString";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9, "rowSpan": 1, "colSpan": 2},
							"configurator": function(cell){
								cell.text = "E";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 10},
							"configurator": function(cell){
								cell.targetColumnName = "B_MEMORY";
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "normal";
								cell.text = "메모리 사용량";
								cell.emptyValueSort = "emptyString";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "R_DATE_TIME";
								cell.control = (function(){
									var output_1 = new cpr.controls.Output("opt1");
									output_1.value = "Output";
									output_1.bind("value").toDataColumn("R_DATE_TIME");
									return output_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "A_CPU";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "A_MEMORY";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "B_CPU";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "B_MEMORY";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "C_CPU";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "C_MEMORY";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "D_CPU";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.columnName = "D_MEMORY";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.columnName = "E_CPU";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.columnName = "E_CPU";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "20px",
				"right": "31px",
				"bottom": "39px",
				"left": "119px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "test2";
	cpr.core.Platform.INSTANCE.register(app);
})();

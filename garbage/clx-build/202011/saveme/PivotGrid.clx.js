/*
 * App URI: 202011/saveme/PivotGrid
 * Source Location: 202011/saveme/PivotGrid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202011/saveme/PivotGrid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Pivot.js
			 * Created at 2020. 9. 9. 오후 2:56:15.
			 *
			 * @author ryu54
			 ************************************************/
			
			var util = createCommonUtil();
			
			var _data ;
			var sendData;
			var responseData;
			
			/**
			 * 
			 * @param {cpr.controls.FileInput} file
			 */
			function importExcel(file){
				sendData = moment().valueOf();	
						util.showLoadMask(app);
				var reader = new FileReader();	
				
				reader.onload = function(e){
			//		util.showLoadMask(app);
					var data = e.target.result;
					
					var workbook = XLSX.read(data , {type : 'binary'});
					
					workbook.SheetNames.forEach(function(item, index){
						ws = workbook.Sheets[item];
						var range = XLSX.utils.decode_range(workbook.Sheets[item]['!ref']); 
						
						range.s.r = 1;
						//2. 데이터셋에서 컬럼이름 가져오는거
						var _header = app.lookup("dsList").getColumnNames();
						var EXCEL_JSON ; 
							EXCEL_JSON = XLSX.utils.sheet_to_json(ws, {range : range, header: _header });
						
						_data = EXCEL_JSON;
						
					});
				};
				
				reader.onloadend = function(e){		
					app.lookup("dsList").build(_data,false);
					responseData = moment().valueOf() - sendData;
					console.log("걸린시간 :" + (moment.duration(responseData) / 1000));
					util.hideLoadMask(app);
				};
					
				reader.readAsBinaryString(file.file);		
			}
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				util.Submit.send(app, "subList2", null, function(pbSuccess) {
					if (pbSuccess){
						
			//			app.lookup("pivotGrid").setup(app.lookup("dsList"));
							
						var vaConfig = {
							"cols" : [],
							"rows" : [],
							"values":[]
						};
						
						var vcDataSet = app.lookup("dsList");
						
						vcDataSet.getHeaders().forEach(function(each){
							
							var _eachs = {
								"column" : each.getName(),
								"label" : each.getInfo()
							}
							
							vaConfig.rows.push(_eachs);
						});
						
						app.lookup("pivotGrid").setup(app.lookup("dsList"), vaConfig);
						app.lookup("optColCount").value = "총 컬럼 갯수 : " + app.lookup("pivotGrid").getColCnt() + " 개";
						app.lookup("optRowCnt").value = "총 행 갯수 : " + app.lookup("pivotGrid").getRowCnt() + " 개";
						util.Control.redraw(app, "pivotGrid");
						
					}
				});
			}
			
			
			/*
			 * 사용자 정의 컨트롤에서 execute 이벤트 발생 시 호출.
			 * 피벗을 실행했을 때 발생하는 이벤트
			 */
			function onPivotHelperHExecute(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type udc.scr.PivotHelperH
				 */
				var pivotHelperH = e.control;
				
				/** @type {{dataset : cpr.data.DataSet, cellType : "split" | "merged", config : Object}} */
				var voPvSt = e.content;
				
				var vcPvGrd = app.lookup("pivotGrid");
				
				vcPvGrd.suppressedCellType = voPvSt.cellType;
				vcPvGrd.setup(voPvSt.dataset, voPvSt.config);
				app.lookup("optColCount").value = "총 컬럼 갯수 : " + vcPvGrd.getColCnt() + " 개";
				app.lookup("optRowCnt").value = "총 행 갯수 : " + app.lookup("pivotGrid").getRowCnt() + " 개";
			}
			
			
			/*
			 * 사용자 정의 컨트롤에서 toggle 이벤트 발생 시 호출.
			 * 피벗 컨텐츠가 숨겨지거나 표시되었을 때 발생하는 이벤트
			 */
			function onPivotHelperHToggle(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type udc.scr.PivotHelperH
				 */
				var pivotHelperH = e.control;
				
				var vcPvGrid = app.lookup("pivotGrid");
				
				var vbVisible = e.content.visible;
				
				var vsTopRect = "";
				if(vbVisible) {
					
					vsTopRect = "325px";
				} else {
					vsTopRect = "120px";
				}
				
					vcPvGrid.getParent().updateConstraint(vcPvGrid, {
						"top" : vsTopRect
					});	
			}
			
			
			/*
			 * "임포트" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.lookup("fi1").openFileChooser();
			}
			
			
			/*
			 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
			 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFi1ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.FileInput
				 */
				var fi1 = e.control;
				
				importExcel(fi1);
			}
			
			
			/*
			 * "엑셀 임포트" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var conf = {
							"cols" : ["DIV_NM","CODE_NAME"],
							"rows" : ["CODE_YEAR"],
							"values" : ["CNT"]
						};
				app.lookup("pivotGrid").easyDraw(app.lookup("ds1"), conf);
			}
			
			//function autoDraw(configs){
			//	var vcGrid = app.lookup("grd1");
			//	var vcDs = app.lookup("ds1");
			//	
			//
			//			var vaConfig = {
			//				"cols" : [],
			//				"rows" : [],
			//				"values":[]
			//			};
			//		var instantConfig = configs;
			//		
			//		
			//		if(instantConfig.cols.length > 0) {
			//			instantConfig.cols.forEach(function(each){
			//				
			//				var temp = {
			//					"column" : each,
			//					"label" : vcDs.getHeader(each).getInfo()
			//				}
			//				vaConfig.cols.push(temp);
			//			});
			//		}
			//		if(instantConfig.rows.length > 0) {
			//			
			//			instantConfig.rows.forEach(function(each,idx){
			//				var rowTemp = {
			//					"column" : each,
			//					"label" : vcDs.getHeader(each).getInfo(),
			//					"suppressRef" : (idx-1),
			//					"sippressible" : true
			//				}
			//				vaConfig.rows.push(rowTemp);
			//			});
			//		}
			//		if(instantConfig.values.length > 0) {
			//			
			//			instantConfig.values.forEach(function(each){
			//				
			//				var valueTemp = {
			//					"column" : each,
			//					"label" : vcDs.getHeader(each).getInfo(),
			//					"aggregator" : vcDs.getHeader(each).getDataType() == "number" ? "sum" : "count"
			//				}
			//				
			//				vaConfig.values.push(valueTemp);
			//			});
			//		}
			//		app.lookup("pivotGrid").setup(app.lookup("piHelper").dataset, vaConfig);
			//}
			
			
			/*
			 * "피벗그리기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.lookup("pivotGrid").setRowGroup();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{
						"name": "column1",
						"info": "자재 전표"
					},
					{
						"name": "column2",
						"info": "품목"
					},
					{
						"name": "column3",
						"info": "전기일"
					},
					{
						"name": "column4",
						"info": "이동유형"
					},
					{
						"name": "column5",
						"info": "이동유형명"
					},
					{
						"name": "column6",
						"info": "자재"
					},
					{
						"name": "column7",
						"info": "자재내역"
					},
					{
						"name": "column8",
						"info": "플랜트"
					},
					{
						"name": "column9",
						"info": "저장위치"
					},
					{
						"name": "column10",
						"dataType": "string",
						"displayOnly": false,
						"info": "공사번호"
					},
					{
						"name": "column11",
						"dataType": "number",
						"info": "수량"
					},
					{
						"name": "column12",
						"info": "EUn"
					},
					{
						"name": "column13",
						"dataType": "number",
						"info": "금액(LC)"
					},
					{
						"name": "column14",
						"info": "배치"
					}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = linker.dataSet_2 = new cpr.data.DataSet("ds1");
			dataSet_2.parseData({
				"columns": [
					{"name": "CODE_YEAR"},
					{"name": "DIV_NM"},
					{"name": "CODE_NAME"},
					{
						"name": "CNT",
						"dataType": "number"
					}
				],
				"rows": [
					{"CODE_YEAR": "2020", "DIV_NM": "점검지적건수", "CODE_NAME": "개소", "CNT": "2"},
					{"CODE_YEAR": "2020", "DIV_NM": "점검지적건수", "CODE_NAME": "건", "CNT": "3"},
					{"CODE_YEAR": "2020", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "안전", "CNT": "1"},
					{"CODE_YEAR": "2020", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "시설", "CNT": "1"},
					{"CODE_YEAR": "2020", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "화재", "CNT": "1"},
					{"CODE_YEAR": "2020", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "기타", "CNT": "1"},
					{"CODE_YEAR": "2019", "DIV_NM": "점검지적건수", "CODE_NAME": "개소", "CNT": "2"},
					{"CODE_YEAR": "2019", "DIV_NM": "점검지적건수", "CODE_NAME": "개소", "CNT": "5"},
					{"CODE_YEAR": "2019", "DIV_NM": "점검지적건수", "CODE_NAME": "건", "CNT": "3"},
					{"CODE_YEAR": "2019", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "안전", "CNT": "1"},
					{"CODE_YEAR": "2019", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "시설", "CNT": "1"},
					{"CODE_YEAR": "2019", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "화재", "CNT": "1"},
					{"CODE_YEAR": "2019", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "기타", "CNT": "1"},
					{"CODE_YEAR": "2018", "DIV_NM": "점검지적건수", "CODE_NAME": "개소", "CNT": "2"},
					{"CODE_YEAR": "2018", "DIV_NM": "점검지적건수", "CODE_NAME": "건", "CNT": "3"},
					{"CODE_YEAR": "2018", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "안전", "CNT": "1"},
					{"CODE_YEAR": "2018", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "시설", "CNT": "1"},
					{"CODE_YEAR": "2018", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "화재", "CNT": "1"},
					{"CODE_YEAR": "2018", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "기타", "CNT": "1"},
					{"CODE_YEAR": "2017", "DIV_NM": "점검지적건수", "CODE_NAME": "개소", "CNT": "2"},
					{"CODE_YEAR": "2017", "DIV_NM": "점검지적건수", "CODE_NAME": "건", "CNT": "3"},
					{"CODE_YEAR": "2017", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "안전", "CNT": "1"},
					{"CODE_YEAR": "2017", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "시설", "CNT": "1"},
					{"CODE_YEAR": "2017", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "화재", "CNT": "1"},
					{"CODE_YEAR": "2017", "DIV_NM": "분야별점검지적건수", "CODE_NAME": "기타", "CNT": "1"}
				]
			});
			app.register(dataSet_2);
			var submission_1 = new cpr.protocols.Submission("subList");
			submission_1.action = "./data/scr/user/PIVOT.json";
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subList2");
			submission_2.action = "data/scr/grid/gridData1k.json";
			submission_2.addResponseData(dataSet_1, false);
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.com.AppTitle();
			container.addChild(userDefinedControl_1, {
				"top": "20px",
				"right": "20px",
				"left": "20px",
				"height": "28px"
			});
			
			var fileInput_1 = new cpr.controls.FileInput("fi1");
			fileInput_1.visible = false;
			if(typeof onFi1ValueChange == "function") {
				fileInput_1.addEventListener("value-change", onFi1ValueChange);
			}
			container.addChild(fileInput_1, {
				"top": "1px",
				"right": "1px",
				"width": "0px",
				"height": "0px"
			});
			
			var tabFolder_1 = new cpr.controls.TabFolder();
			
			var tabItem_1 = (function(tabFolder){
				var tabItem_1 = new cpr.controls.TabItem();
				tabItem_1.text = "피벗 그리드";
				var group_1 = new cpr.controls.Container();
				// Layout
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var group_2 = new cpr.controls.Container();
					group_2.style.setClasses(["card", "card-bordered"]);
					// Layout
					var xYLayout_3 = new cpr.controls.layouts.XYLayout();
					group_2.setLayout(xYLayout_3);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "피벗 그리드";
						output_1.style.setClasses(["card-title"]);
						container.addChild(output_1, {
							"top": "20px",
							"left": "20px",
							"width": "606px",
							"height": "25px"
						});
						var userDefinedControl_2 = linker.userDefinedControl_2 = new udc.scr.PivotHelperH("piHelper");
						if(typeof onPivotHelperHExecute == "function") {
							userDefinedControl_2.addEventListener("execute", onPivotHelperHExecute);
						}
						if(typeof onPivotHelperHToggle == "function") {
							userDefinedControl_2.addEventListener("toggle", onPivotHelperHToggle);
						}
						container.addChild(userDefinedControl_2, {
							"top": "95px",
							"right": "20px",
							"left": "20px",
							"height": "220px"
						});
						var userDefinedControl_3 = new udc.scr.PivotGrid("pivotGrid");
						container.addChild(userDefinedControl_3, {
							"top": "325px",
							"right": "20px",
							"bottom": "10px",
							"left": "20px"
						});
						var output_2 = new cpr.controls.Output("optColCount");
						output_2.value = "총 컬럼 개수 : 0 개";
						container.addChild(output_2, {
							"top": "55px",
							"left": "20px",
							"width": "164px",
							"height": "30px"
						});
						var output_3 = new cpr.controls.Output("optRowCnt");
						output_3.value = "총 행 개수 : 0 개";
						container.addChild(output_3, {
							"top": "55px",
							"left": "189px",
							"width": "164px",
							"height": "30px"
						});
						var button_1 = new cpr.controls.Button();
						button_1.value = "피벗그리기";
						if(typeof onButtonClick2 == "function") {
							button_1.addEventListener("click", onButtonClick2);
						}
						container.addChild(button_1, {
							"top": "20px",
							"right": "145px",
							"width": "120px",
							"height": "25px"
						});
						var button_2 = new cpr.controls.Button();
						button_2.value = "피벗그리기";
						if(typeof onButtonClick3 == "function") {
							button_2.addEventListener("click", onButtonClick3);
						}
						container.addChild(button_2, {
							"top": "55px",
							"right": "145px",
							"width": "120px",
							"height": "25px"
						});
					})(group_2);
					container.addChild(group_2, {
						"top": "10px",
						"right": "10px",
						"bottom": "10px",
						"left": "10px"
					});
				})(group_1);
				tabItem_1.content = group_1;
				return tabItem_1;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_1);
			
			var tabItem_2 = (function(tabFolder){
				var tabItem_2 = new cpr.controls.TabItem();
				tabItem_2.text = "데이터 그리드";
				var group_3 = new cpr.controls.Container();
				// Layout
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				group_3.setLayout(xYLayout_4);
				(function(container){
					var grid_1 = new cpr.controls.Grid("grd1");
					grid_1.init({
						"dataSet": app.lookup("dsList"),
						"columns": [
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"}
						],
						"header": {
							"rows": [{"height": "38px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.targetColumnName = "column1";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "자재 전표";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.targetColumnName = "column2";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "품목";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.targetColumnName = "column3";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "전기일";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.targetColumnName = "column4";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "이동유형";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.targetColumnName = "column5";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "이동유형명";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 6},
									"configurator": function(cell){
										cell.targetColumnName = "column6";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "자재";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 7},
									"configurator": function(cell){
										cell.targetColumnName = "column7";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "자재내역";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 8},
									"configurator": function(cell){
										cell.targetColumnName = "column8";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "플랜트";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 9},
									"configurator": function(cell){
										cell.targetColumnName = "column9";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "저장위치";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 10},
									"configurator": function(cell){
										cell.targetColumnName = "column10";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "공사번호";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 11},
									"configurator": function(cell){
										cell.targetColumnName = "column11";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "수량";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 12},
									"configurator": function(cell){
										cell.targetColumnName = "column12";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "EUn";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 13},
									"configurator": function(cell){
										cell.targetColumnName = "column13";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "금액(LC)";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 14},
									"configurator": function(cell){
										cell.targetColumnName = "column14";
										cell.filterable = false;
										cell.sortable = false;
										cell.text = "배치";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.text = "#";
									}
								}
							]
						},
						"detail": {
							"rows": [{"height": "36px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.columnName = "column1";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.columnName = "column2";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.columnName = "column3";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.columnName = "column4";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.columnName = "column5";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 6},
									"configurator": function(cell){
										cell.columnName = "column6";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 7},
									"configurator": function(cell){
										cell.columnName = "column7";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 8},
									"configurator": function(cell){
										cell.columnName = "column8";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 9},
									"configurator": function(cell){
										cell.columnName = "column9";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 10},
									"configurator": function(cell){
										cell.columnName = "column10";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 11},
									"configurator": function(cell){
										cell.columnName = "column11";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 12},
									"configurator": function(cell){
										cell.columnName = "column12";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 13},
									"configurator": function(cell){
										cell.columnName = "column13";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 14},
									"configurator": function(cell){
										cell.columnName = "column14";
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.columnType = "rowindex";
									}
								}
							]
						}
					});
					container.addChild(grid_1, {
						"top": "10px",
						"right": "10px",
						"bottom": "10px",
						"left": "10px"
					});
				})(group_3);
				tabItem_2.content = group_3;
				return tabItem_2;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_2);
			tabFolder_1.setSelectedTabItem(tabItem_1);
			container.addChild(tabFolder_1, {
				"top": "53px",
				"right": "20px",
				"bottom": "20px",
				"left": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "피벗그리드";
	cpr.core.Platform.INSTANCE.register(app);
})();

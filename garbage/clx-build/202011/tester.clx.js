/*
 * App URI: 202011/tester
 * Source Location: 202011/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202011/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			function createDragSourceFeedback() {
				var feedback = new cpr.controls.Output();
				feedback.ellipsis = true;
				feedback.style.css({
					"opacity": "0.8",
					"width": "50px",
					"height": "25px",
					"border": "solid 1px red",
					"text-align": "center",
					"color": "black",
					"border-radius": "10px",
					"background": "white",
					"box-shadow": "0px 2px 10px #ddd",
					"cursor": "move"
				});
				return feedback;
			}
			
			
			/**
			 * 파라미터의 컨트롤을 드래그 가능하도록 드래그 소스를 지정하는 함수.
			 * @param {cpr.controls.UIControl} control
			 */
			function setDragSource(control) {
				var feedback = null;
				var actualRect = null;
				new cpr.controls.DragSource(control, {
					options: {
						dataType: "text",
						threadhold: 10
					},
					onDragStart: function(context) {//dragStart에서 사용중인 context.source.detail이라는 대상은 이후 릴리즈에서 depreacted될 대상으로,context.sourceTargetObject로 대체됩니다.
						
						if (context.sourceTargetObject != null && context.sourceTargetObject.relativeTargetName != "header") {
							context.cursor = "grabbing";
							feedback = createDragSourceFeedback();
							control.style.css("opacity", " 0.5");
							context.data = context.sourceTargetObject;
							feedback.value = JSON.stringify(control.getRow(context.source.detail.rowIndex).getRowData());
			
							var voDragStartLoca = context.dragStartLocation;
							actualRect = new cpr.geometry.Rectangle(voDragStartLoca.x, voDragStartLoca.y, control.getActualRect().width, 25);
							app.floatControl(feedback, actualRect);
							context.source = null;
						} else {
							context.cancel();
						}
					},
					onDragMove: function(context) {
						context.cursor = "grabbing";
						var newRect = actualRect.getTranslatedByDimension(context.dragDelta);
						app.floatControl(feedback, newRect);
					},
					onDragEnd: function(context) {
						context.cursor = "";
						feedback.dispose();
						feedback = null;
						control.style.removeStyle("opacity");
					}
				});
			}
			var voPrevRowElement = null;
			
			/**
			 * 파라미터로 받은 컨트롤을 드랍가능한 타겟으로 지정하는 함수.
			 * @param {cpr.controls.Grid} control2
			 */
			function setDropTarget(control2) {
			
				var dropTarget = new cpr.controls.DropTarget(control2, {
					isImportant: function(source) {
						return source.dataType == "text";
					},
					onDragEnter: function(context) {
			
					},
					onDragLeave: function(context) {
			
					},
					onDragMove: function(context) {
						var vaElementsOnMouse = elementsFromPoint(context.pointerLocation.x, context.pointerLocation.y);
			
						var vaClGridRowEle = vaElementsOnMouse.filter(function( /*HTMLElement*/ each) {
							if (each.classList.contains("cl-grid-row")) {
								return each;
							}
						});
						var voGridRowElement = vaClGridRowEle[0];
			
						if (voGridRowElement && !voGridRowElement.classList.contains("row-bottom")) {
							if (voGridRowElement != voPrevRowElement && voPrevRowElement) {
			
								voPrevRowElement.classList.remove("row-bottom");
							}
							voPrevRowElement = voGridRowElement;
							voGridRowElement.classList.add("row-bottom");
						}
					},
					onDrop: function(context) {
							var voDragRowData = context.source.control.getRow(context.data.rowIndex).getRowData()
							var vnDragIndex = context.data.rowIndex;
						if (context.target.detail != null) {
							var vnDropIndex = context.target.detail.rowIndex;
							if (vnDropIndex > vnDragIndex) {
								
								control2.insertRowData(vnDropIndex, true, voDragRowData);
								control2.setCheckRowIndex(vnDropIndex+1, control2.getRow(vnDragIndex).checked);
								control2.deleteRow(vnDragIndex);
							} else {
								var isChecked = control2.getRow(vnDragIndex).checked;
								control2.deleteRow(vnDragIndex);
								control2.insertRowData(vnDropIndex, true, voDragRowData);
								control2.setCheckRowIndex(vnDropIndex+1, isChecked);
							}
						} else {
							var vnInsertIdx = Number(voPrevRowElement.getAttribute("aria-rowindex")) - 1;
							var vbInsertAfter = vnInsertIdx == control2.getRowCount() - 1 ? true : false;
							var isChecked = control2.getRow(vnDragIndex).checked;
							control2.deleteRow(vnDragIndex);
							control2.insertRowData(vnInsertIdx, vbInsertAfter, voDragRowData);
							control2.setCheckRowIndex(vnInsertIdx, isChecked);
						}
						voPrevRowElement.classList.remove("row-bottom");
					}
				});
			}
			
			/**
			 * 마우스 포인터가 위치한 곳 밑에 있는 모든 요소를 가져오는 함수입니다.
			 * @param {Number} x
			 * @param {Number} y
			 * @return {HTMLElement}
			 */
			function elementsFromPoint(x, y) {
				if (document["msElementsFromPoint"]) {
					var nodeList = document["msElementsFromPoint"](x, y);
					if (!nodeList) {
						return [];
					} else {
						return Array.prototype.slice.call(nodeList);
					}
				} else {
					return (document["elementsFromPoint"](x, y) || []);
				}
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var name = '_blank';
			  var specs = 'menubar=no,status=no,toolbar=no';
				window.open("http://localhost:8080/202011/tuto.jsp",name,specs);
				window.hansman = "쿟쿄쿄쿄";
			}
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			//	console.log(app.lookup("grd1").getRow(1).checked);
			//	app.lookup("grd1").getRow(1).checked = true;
				var col = app.lookup("grd1").getColumnLayout();
				
				var vcGrid = app.lookup("grd1");
				
				var hs = col.header.splice(1,1);
				col.header.push(hs[0]);
			//	
				var ds = col.detail.splice(1,1);
				col.detail.push(ds[0]);
			//	
				console.log(col);
				vcGrid.setColumnLayout(col);
				vcGrid.redraw();
			//	
			//	var vnIdx = vcGrid.getRowCount();
			//	
			//	for(var i = 0; i < vnIdx ; i++) {
			//		
			//		console.log(vcGrid.getRow(i).getRowData());
			//	}
			}
			
			function isIE(){
				return (navigator.appName ==="Netscape" && navigator.userAgent.search("Trident") !== -1 ||
				navigator.userAgent.toLowerCase().indexOf("msie") !== -1);
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			//	var a = new cpr.utils.URL("https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js");
			//	cpr.core.ResourceLoader.loadScript(uri)
				console.log(isIE());
				if(isIE()){
					
				}
				cpr.core.ResourceLoader.loadScript("https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js");
			}
			
			
			function setDragSource2(control){
				new cpr.controls.DragSource(control, {
			});
			}
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
			//	app.lookup("grd1").moveColumn(1, 2,false);
				
			//	app.lookup("grd1").redraw();
			
				app.lookup("ds4").forEachOfUnfilteredRows(function(dataRow){
					console.log(dataRow.getValue("column1"));
				});
					
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.lookup("grd2").moveColumn(0, 3,true);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.lookup("grd2").moveColumn(3, 1,true);
			}
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				console.log(app.lookup("grd2").getColumnLayout())
			//	app.lookup("grd2").moveColumn(1, 2,false);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick7(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.lookup("grd2").moveColumn(2, 3,false);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick8(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.lookup("sms2").send();
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb1SelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
				
				console.log(app.lookup("grd1").getSelectedRowIndex());
				console.log(app.lookup("grd1").getEditRowIndex());
				
				app.lookup("grd1").getRow(app.lookup("grd1").getEditRowIndex()).setValue("column3", cmb1.text);
			}
			
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick9(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.lookup("sms4").send();
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick10(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			}
			
			
			
			/*
			 * 데이터뷰에서 insert 이벤트 발생 시 호출.
			 * 로우가 추가되는 경우 발생하는 이벤트. 발생 메소드 : addRow, addRowData, insertRow, insertRowData
			 */
			function onDv1Insert(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataView
				 */
				var dv1 = e.control;
				
			}
			
			
			/*
			 * 데이터셋에서 load 이벤트 발생 시 호출.
			 * build 메소드에 의해 데이터 구조가 재구성될 때 발생하는 이벤트. 초기 생성시에도 발생합니다.
			 */
			function onDs5Load(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds5 = e.control;
				
			}
			
			
			/*
			 * 데이터뷰에서 load 이벤트 발생 시 호출.
			 * build 메소드에 의해 데이터 구조가 재구성될 때 발생하는 이벤트. 초기 생성시에도 발생합니다.
			 */
			function onDv1Load(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataView
				 */
				var dv1 = e.control;
					console.log(app.lookup("dv1").getRowCount());
				if(dv1.getRowCount() >5) {
					var row = dv1.getRow(4);
					row.setAttr("uniq", "a");
					var ds = dv1.parentDataSet;
					
					var findRow = ds.findFirstRow("getAttr('uniq') =='a'");
					var frIdx = findRow.getIndex();
					
					var filt = dv1.getFilter();
					
					dv1.setFilter(filt+"&& getIndex() <= "+frIdx);
				}
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick11(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var cl = app.lookup("grd2").getColumnLayout();
				
				cl.columnLayout[0].width = 150;
				
				app.lookup("grd2").setColumnLayout(cl);
				var grd = app.lookup("grd2");
				grd.redraw();
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick12(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "label1", "value": "1", "parent": "라벨1"},
					{"label": "label2", "value": "2", "parent": "라벨2"},
					{"label": "label3", "value": "3", "parent": "라벨3"},
					{"label": "label4", "value": "4", "parent": "라벨4"},
					{"label": "label5", "value": "5", "parent": "라벨5"},
					{"label": "label6", "value": "6", "parent": "라벨6"},
					{"label": "전체", "value": "", "parent": "즌체"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsList");
			dataSet_2.parseData({
				"filterCondition": "column1 == 1",
				"columns": [
					{
						"name": "column1",
						"dataType": "number"
					},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"},
					{"name": "column12"},
					{"name": "column13"},
					{"name": "column14"},
					{"name": "column15"},
					{"name": "column16"},
					{"name": "column17"},
					{"name": "column18"},
					{"name": "column19"},
					{"name": "column20"}
				],
				"rows": [
					{"column1": "1", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61", "column7": "column71", "column8": "column81", "column9": "column91", "column10": "column101", "column11": "column111", "column12": "column121", "column13": "column131", "column14": "column141", "column15": "column151", "column16": "column161", "column17": "column171", "column18": "column181", "column19": "column191", "column20": "column201"},
					{"column1": "2", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62", "column7": "column72", "column8": "column82", "column9": "column92", "column10": "column102", "column11": "column112", "column12": "column122", "column13": "column132", "column14": "column142", "column15": "column152", "column16": "column162", "column17": "column172", "column18": "column182", "column19": "column192", "column20": "column202"},
					{"column1": "3", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "column63", "column7": "column73", "column8": "column83", "column9": "column93", "column10": "column103", "column11": "column113", "column12": "column123", "column13": "column133", "column14": "column143", "column15": "column153", "column16": "column163", "column17": "column173", "column18": "column183", "column19": "column193", "column20": "column203"},
					{"column1": "4", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "column64", "column7": "column74", "column8": "column84", "column9": "column94", "column10": "column104", "column11": "column114", "column12": "column124", "column13": "column134", "column14": "column144", "column15": "column154", "column16": "column164", "column17": "column174", "column18": "column184", "column19": "column194", "column20": "column204"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds2");
			dataSet_3.parseData({
				"columns": [
					{"name": "label"},
					{
						"name": "value",
						"dataType": "number"
					},
					{
						"name": "parent",
						"dataType": "number"
					}
				],
				"rows": [
					{"label": "label1", "value": "1", "parent": ""},
					{"label": "label2", "value": "2", "parent": "1"},
					{"label": "label3", "value": "3", "parent": "1"},
					{"label": "label4", "value": "4", "parent": "2"},
					{"label": "label5", "value": "5", "parent": "2"},
					{"label": "label6", "value": "6", "parent": "2"},
					{"label": "label7", "value": "7", "parent": "2"},
					{"label": "label8", "value": "8", "parent": "2"},
					{"label": "label9", "value": "9", "parent": "2"},
					{"label": "label10", "value": "10", "parent": "2"},
					{"label": "label11", "value": "11", "parent": "2"},
					{"label": "label12", "value": "12", "parent": "2"},
					{"label": "label13", "value": "13", "parent": "2"},
					{"label": "label14", "value": "14", "parent": "2"},
					{"label": "label15", "value": "15", "parent": "2"},
					{"label": "label16", "value": "16", "parent": "2"},
					{"label": "label17", "value": "17", "parent": "2"},
					{"label": "label18", "value": "18", "parent": "2"},
					{"label": "label19", "value": "19", "parent": "2"},
					{"label": "label20", "value": "20", "parent": "2"},
					{"label": "label21", "value": "21", "parent": "2"},
					{"label": "label22", "value": "22", "parent": "2"},
					{"label": "label23", "value": "23", "parent": "2"},
					{"label": "label24", "value": "24", "parent": "2"},
					{"label": "label25", "value": "25", "parent": "2"},
					{"label": "label26", "value": "26", "parent": "2"},
					{"label": "label27", "value": "27", "parent": "2"},
					{"label": "label28", "value": "28", "parent": "2"},
					{"label": "label29", "value": "29", "parent": "2"},
					{"label": "label30", "value": "30", "parent": "2"},
					{"label": "label31", "value": "31", "parent": "2"},
					{"label": "label32", "value": "32", "parent": "2"},
					{"label": "label33", "value": "33", "parent": "2"},
					{"label": "label34", "value": "34", "parent": "2"},
					{"label": "label35", "value": "35", "parent": "2"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = linker.dataSet_4 = new cpr.data.DataSet("ds3");
			dataSet_4.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "label1", "value": "value1"},
					{"label": "label2", "value": "value2"},
					{"label": "label3", "value": "value3"},
					{"label": "label4", "value": "value4"},
					{"label": "label5", "value": "value5"},
					{"label": "label6", "value": "value6"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsList1");
			dataSet_5.parseData({
				"columns": [
					{"name": "LCLAS"},
					{"name": "MLSFC"},
					{"name": "SCLAS"},
					{"name": "SJ"},
					{"name": "CN"},
					{"name": "APP_ID"}
				],
				"rows": [
					{"LCLAS": "개발도구", "MLSFC": "화면디자인편집기", "SCLAS": "화면디자인편집기", "SJ": "컴포넌트 배치 구조", "CN": "화면내 UI컴포넌트의 배치 구조를 Tree/List형태로 볼 수 있는 기능", "APP_ID": "app/cmn/tool/EV-TL-01"},
					{"LCLAS": "개발도구", "MLSFC": "화면디자인편집기", "SCLAS": "화면디자인편집기", "SJ": "실행취소/재실행", "CN": "개발 작업 중에 대한 Undo & Redo 기능", "APP_ID": "app/cmn/tool/EV-TL-02"},
					{"LCLAS": "개발도구", "MLSFC": "화면디자인편집기", "SCLAS": "화면디자인편집기", "SJ": "템플릿 제공 기능", "CN": "Template 제공 기능", "APP_ID": "app/cmn/tool/EV-TL-03"},
					{"LCLAS": "개발도구", "MLSFC": "화면디자인편집기", "SCLAS": "화면디자인편집기", "SJ": "클립보드", "CN": "UI 컴포넌트 및 스크립트에 대한 클립보드 관리 기능", "APP_ID": "app/cmn/tool/EV-TL-04"},
					{"LCLAS": "개발도구", "MLSFC": "화면디자인편집기", "SCLAS": "화면디자인편집기", "SJ": "탭 오더링", "CN": "탭 오더 설정 기능", "APP_ID": "app/cmn/tool/EV-TL-05"},
					{"LCLAS": "개발도구", "MLSFC": "소스 편집기", "SCLAS": "소스 편집기", "SJ": "코드 스니펫", "CN": "코드 Snippet 기능 (개발 코드에 대한 자동 블록 생성 기능)", "APP_ID": "app/cmn/tool/EV-TL-06"},
					{"LCLAS": "개발도구", "MLSFC": "소스 편집기", "SCLAS": "소스 편집기", "SJ": "공통 함수 정의 및 관리", "CN": "공통(전역) 함수 정의 및 관리 기능", "APP_ID": "app/cmn/tool/EV-TL-07"},
					{"LCLAS": "개발도구", "MLSFC": "소스 편집기", "SCLAS": "소스 편집기", "SJ": "공통 데이터셋 정의 및 관리", "CN": "공통(전역) 데이터셋 정의 및 관리 기능", "APP_ID": "app/cmn/tool/EV-TL-08"},
					{"LCLAS": "개발도구", "MLSFC": "소스 편집기", "SCLAS": "소스 편집기", "SJ": "스크립트 코드 Assist 기능 및 도움말 기능", "CN": "스크립트 코드 Assist 기능 및 도움말 기능", "APP_ID": "app/cmn/tool/EV-TL-09"},
					{"LCLAS": "개발도구", "MLSFC": "소스 편집기", "SCLAS": "소스 편집기", "SJ": "소스코드 자동 포맷팅/검증 기능", "CN": "소스 코드 자동 포맷팅/검증 기능", "APP_ID": "app/cmn/tool/EV-TL-10"},
					{"LCLAS": "개발도구", "MLSFC": "화면 폼 자동생성", "SCLAS": "화면 폼 자동생성", "SJ": "데이터셋 자동 생성", "CN": "엑셀.DB 등으로 부터 얻어진 정보를 기준으로 데이터셋 자동 생성 기능", "APP_ID": "app/cmn/tool/EV-TL-12"},
					{"LCLAS": "개발도구", "MLSFC": "화면 폼 자동생성", "SCLAS": "화면 폼 자동생성", "SJ": "화면 폼 자동생성", "CN": "데이터셋 정보를 이용한 화면 폼을 자동 생성 및 Mapping 기능", "APP_ID": "app/cmn/tool/EV-TL-13"},
					{"LCLAS": "개발도구", "MLSFC": "화면 폼 자동생성", "SCLAS": "화면 맵 정의", "SJ": "I/O 맵 정의", "CN": "서버와 데이터 송수신 대한 I/O 맵 정의 기능", "APP_ID": "app/cmn/tool/EV-TL-14"},
					{"LCLAS": "개발도구", "MLSFC": "화면 폼 자동생성", "SCLAS": "화면 맵 정의", "SJ": "화면 컴포넌트 속성 맵 정의", "CN": "화면 컴포넌트 속성(필수/선택/잠금/숨김) 맵 정의 기능", "APP_ID": "app/cmn/tool/EV-TL-15"},
					{"LCLAS": "개발도구", "MLSFC": "화면 폼 자동생성", "SCLAS": "화면 맵 정의", "SJ": "연계 화면 데이터 연동", "CN": "화면간 연계 화면 및 연계 화면간 데이터 연동 정보 설정 기능", "APP_ID": "app/cmn/tool/EV-TL-16"},
					{"LCLAS": "개발도구", "MLSFC": "소스코드 디버깅", "SCLAS": "소스코드 디버깅", "SJ": "소스 코드 문법 검사", "CN": "스크립트 소스 코드 문법 검사 기능", "APP_ID": "app/cmn/tool/EV-TL-18"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("ds4");
			dataSet_6.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				],
				"rows": [
					{"column1": "column11", "column2": "1", "column3": "column31", "column4": "column41"},
					{"column1": "column12", "column2": "2", "column3": "column32", "column4": "column42"},
					{"column1": "column13", "column2": "3", "column3": "column33", "column4": "column43"},
					{"column1": "column14", "column2": "4", "column3": "column34", "column4": "column44"},
					{"column1": "column15", "column2": "5", "column3": "column35", "column4": "column45"}
				]
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("ds5");
			dataSet_7.parseData({
				"columns": [
					{
						"name": "column1",
						"dataType": "number"
					},
					{"name": "column2"}
				],
				"rows": [
					{"column1": "1", "column2": "column21"},
					{"column1": "2", "column2": "column22"},
					{"column1": "3", "column2": "column23"},
					{"column1": "4", "column2": "column24"},
					{"column1": "5", "column2": "column25"},
					{"column1": "6", "column2": "column26"},
					{"column1": "7", "column2": "column27"},
					{"column1": "8", "column2": "column28"},
					{"column1": "9", "column2": "column29"},
					{"column1": "10", "column2": "column210"},
					{"column1": "11", "column2": "column211"},
					{"column1": "12", "column2": "column212"},
					{"column1": "13", "column2": "column213"},
					{"column1": "14", "column2": "column214"},
					{"column1": "15", "column2": "column215"},
					{"column1": "16", "column2": "column216"},
					{"column1": "17", "column2": "column217"},
					{"column1": "18", "column2": "column218"},
					{"column1": "19", "column2": "column219"},
					{"column1": "20", "column2": "column220"},
					{"column1": "21", "column2": "column221"}
				]
			});
			(function(dataSet){
				var dataView_1 = new cpr.data.DataView("dv1", dataSet);
				dataView_1.parseData({"filterCondition": "column1 > 5 && column1 < 14"});
				if(typeof onDv1Insert == "function") {
					dataView_1.addEventListener("insert", onDv1Insert);
				}
				if(typeof onDv1Load == "function") {
					dataView_1.addEventListener("load", onDv1Load);
				}
				app.register(dataView_1);
			})(dataSet_7);
			if(typeof onDs5Load == "function") {
				dataSet_7.addEventListener("load", onDs5Load);
			}
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("ds6");
			dataSet_8.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{
						"name": "column3",
						"dataType": "number"
					}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "1"},
					{"column1": "column11", "column2": "column21", "column3": "2"},
					{"column1": "column11", "column2": "column21", "column3": "3"},
					{"column1": "column11", "column2": "column21", "column3": "4"},
					{"column1": "column11", "column2": "column25", "column3": "5"},
					{"column1": "column11", "column2": "column25", "column3": "6"},
					{"column1": "column11", "column2": "column25", "column3": "7"},
					{"column1": "column11", "column2": "column25", "column3": "8"}
				]
			});
			app.register(dataSet_8);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [{
					"name": "column1",
					"defaultValue": "asd"
				}]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "dataMan/data12.json";
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_7, false, "dsList");
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.action = "/cisweb/getList34.do";
			submission_2.mediaType = "application/json";
			submission_2.addRequestData(dataMap_1);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms3");
			submission_3.action = "asd.do";
			submission_3.addRequestData(dataSet_6, cpr.protocols.PayloadType.all);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sms4");
			submission_4.action = "dataMan/c1c2Data.json";
			submission_4.addResponseData(dataSet_7, false, "dsList");
			app.register(submission_4);
			
			var matrixSubmission_1 = new cpr.protocols.MatrixSubmission("msm1");
			matrixSubmission_1.async = true;
			matrixSubmission_1.withCredentials = false;
			matrixSubmission_1.method = "post";
			matrixSubmission_1.action = "";
			matrixSubmission_1.setProtocolDataModel(new cpr.protocols.matrix.MatrixDataModel({
				"request": {
					"format": "object",
					"data": {}
				},
				"response": {
					"format": "object",
					"data": {}
				}
			}));
			app.register(matrixSubmission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.animationDuration = 1.0;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "black",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-left-color" : "black",
				"border-top-color" : "black",
				"border-bottom-style" : "solid",
				"border-right-color" : "black",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.distribution = "leading";
			group_1.setLayout(verticalLayout_1);
			(function(container){
				var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.aaa.verticalSlider("sli");
				var dataRowContext_1 = new cpr.bind.DataRowContext(app.lookup("ds3"), 0);
				userDefinedControl_1.setBindContext(dataRowContext_1);
				container.addChild(userDefinedControl_1, {
					"autoSize": "none",
					"width": "175px",
					"height": "35px"
				});
			})(group_1);
			container.addChild(group_1, {
				"right": "0px",
				"bottom": "0px",
				"left": "0px",
				"height": "44px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "Button";
			if(typeof onButtonClick9 == "function") {
				button_1.addEventListener("click", onButtonClick9);
			}
			container.addChild(button_1, {
				"top": "368px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd2");
			grid_1.init({
				"dataSet": app.lookup("dv1"),
				"autoFit": "1",
				"columns": [
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "398px",
				"left": "20px",
				"width": "553px",
				"height": "245px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "Button";
			if(typeof onButtonClick10 == "function") {
				button_2.addEventListener("click", onButtonClick10);
			}
			container.addChild(button_2, {
				"top": "368px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "Button";
			if(typeof onButtonClick11 == "function") {
				button_3.addEventListener("click", onButtonClick11);
			}
			container.addChild(button_3, {
				"top": "368px",
				"left": "240px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.value = "Output";
			output_1.unselectable = false;
			container.addChild(output_1, {
				"top": "368px",
				"left": "519px",
				"width": "148px",
				"height": "20px"
			});
			
			var button_4 = new cpr.controls.Button();
			button_4.value = "Button";
			if(typeof onButtonClick12 == "function") {
				button_4.addEventListener("click", onButtonClick12);
			}
			container.addChild(button_4, {
				"top": "398px",
				"left": "646px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_2 = new cpr.controls.Grid("grd1");
			grid_2.init({
				"dataSet": app.lookup("ds6"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
								cell.suppressible = true;
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
								cell.suppressible = true;
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						}
					]
				},
				"rowGroup": [{
					"groupCondition": "column2",
					"gfooter": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.expr = "column1";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.expr = "\"소계\"";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.expr = "getSum(\"column3\")";
								}
							}
						]
					}
				}]
			});
			container.addChild(grid_2, {
				"top": "20px",
				"left": "20px",
				"width": "844px",
				"height": "280px"
			});
			
			var button_5 = new cpr.controls.Button("btn1");
			button_5.value = "Button";
			if(typeof onButtonClick == "function") {
				button_5.addEventListener("click", onButtonClick);
			}
			container.addChild(button_5, {
				"top": "310px",
				"left": "639px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

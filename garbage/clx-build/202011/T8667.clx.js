/*
 * App URI: 202011/T8667
 * Source Location: 202011/T8667.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202011/T8667", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * T8667.js
			 * Created at 2020. 11. 27. 오전 11:28:05.
			 *
			 * @author GEB
			 ************************************************/
			
			
			
			/*
			 * "행 추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
			
				app.lookup("dsGrid").addRow();
			//	app.lookup("grd1").insertRow(0, false); //그리드1의 0번째 행에 새 행을 추가합니다. (데이터셋에도 추가되게 됩니다.)
			}
			
			
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrd1SelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1		= e.control;
				var vcOptSelCh	= app.lookup("optSelCh");
				var vnCellIdx 	= grd1.getCellIndex("code"); // 콤보박스가 위치한 컬럼의 cellIndex
				var vnRowIdx	= e.newSelection[0];//selectionUnit이 row일 때 이벤트 객체로 선택한 rowIndex 반환
			
				vcOptSelCh.value = grd1.getCellText(vnRowIdx, vnCellIdx);
				vcOptSelCh.redraw();
			}
			
			
			/*
			 * 그리드에서 cell-click 이벤트 발생 시 호출.
			 * Grid의 Cell 클릭시 발생하는 이벤트.
			 */
			function onGrd1CellClick(/* cpr.events.CGridMouseEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 			= e.control;
				var vcOptCellClick	= app.lookup("optCellClick");
				var vnRowIdx		= e.rowIndex; // 클릭한 셀의 rowIndex
				var vnCellIdx		= e.cellIndex; //클릭한 셀의 cellIndex
				
				if(grd1.detail.getControl(vnCellIdx).type == "combobox"){
					//클릭한 셀에 콤보박스가 올려져 있을 때만 콤보박스 text 값이 보여집니다.
					vcOptCellClick.value = grd1.getCellText(vnRowIdx, vnCellIdx);
				} else {
					vcOptCellClick.value = "콤보박스가 아닙니다.";
				}
				vcOptCellClick.redraw();
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.lookup("sms1").send();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsGrid");
			dataSet_1.parseData({
				"columns": [
					{"name": "code"},
					{"name": "codeName"}
				],
				"rows": [
					{"code": "code1", "codeName": "부서1"},
					{"code": "code2", "codeName": "부서2"},
					{"code": "code3", "codeName": "부서3"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsCombo");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "부서명1", "value": "code1"},
					{"label": "부서명2", "value": "code2"},
					{"label": "부서명3", "value": "code3"},
					{"label": "부서명4", "value": "code4"},
					{"label": "부서명5", "value": "code5"}
				]
			});
			app.register(dataSet_2);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "asdasd.do";
			submission_1.mediaType = "application/json";
			submission_1.addRequestData(dataSet_1, cpr.protocols.PayloadType.all);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["30px", "40px", "1fr", "60px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var grid_1 = new cpr.controls.Grid("grd1");
				grid_1.init({
					"dataSet": app.lookup("dsGrid"),
					"columnMovable": true,
					"selectionUnit": "row",
					"pasteMode": "editable",
					"columns": [
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.targetColumnName = "code";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "code";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.targetColumnName = "codeName";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "codeName";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "code";
									cell.control = (function(){
										var comboBox_1 = new cpr.controls.ComboBox("cmb1");
										(function(comboBox_1){
											comboBox_1.setItemSet(app.lookup("dsCombo"), {
												"label": "label",
												"value": "value"
											});
										})(comboBox_1);
										comboBox_1.bind("value").toDataColumn("code");
										return comboBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "codeName";
									cell.control = (function(){
										var output_1 = new cpr.controls.Output();
										output_1.bind("value").toExpression("#cmb1.text");
										return output_1;
									})();
								}
							}
						]
					}
				});
				if(typeof onGrd1SelectionChange == "function") {
					grid_1.addEventListener("selection-change", onGrd1SelectionChange);
				}
				if(typeof onGrd1CellClick == "function") {
					grid_1.addEventListener("cell-click", onGrd1CellClick);
				}
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 2
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "행 추가";
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 2,
					"rowSpan": 1
				});
				var grid_2 = new cpr.controls.Grid("grd2");
				grid_2.init({
					"dataSet": app.lookup("dsGrid"),
					"columnMovable": true,
					"pasteMode": "editable",
					"columns": [
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.targetColumnName = "code";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "code";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.targetColumnName = "codeName";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "codeName";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "code";
									cell.control = (function(){
										var comboBox_2 = new cpr.controls.ComboBox("cmb2");
										(function(comboBox_2){
											comboBox_2.setItemSet(app.lookup("dsCombo"), {
												"label": "label",
												"value": "value"
											});
										})(comboBox_2);
										comboBox_2.bind("value").toDataColumn("code");
										return comboBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "codeName";
									cell.control = (function(){
										var output_2 = new cpr.controls.Output();
										output_2.bind("value").toExpression("code");
										return output_2;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_2, {
					"colIndex": 1,
					"rowIndex": 2
				});
				var group_2 = new cpr.controls.Container();
				group_2.style.setClasses(["cl-form-group"]);
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.topMargin = "0px";
				formLayout_2.rightMargin = "0px";
				formLayout_2.bottomMargin = "0px";
				formLayout_2.leftMargin = "0px";
				formLayout_2.horizontalSpacing = "0px";
				formLayout_2.verticalSpacing = "0px";
				formLayout_2.horizontalSeparatorWidth = 1;
				formLayout_2.verticalSeparatorWidth = 1;
				formLayout_2.setColumns(["120px", "1fr"]);
				formLayout_2.setUseColumnShade(0, true);
				formLayout_2.setRows(["1fr", "1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_3 = new cpr.controls.Output();
					output_3.value = "selection-change";
					container.addChild(output_3, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "cell-click";
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var output_5 = new cpr.controls.Output("optSelCh");
					output_5.value = "";
					container.addChild(output_5, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var output_6 = new cpr.controls.Output("optCellClick");
					output_6.value = "";
					container.addChild(output_6, {
						"colIndex": 1,
						"rowIndex": 1
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 3
				});
				var output_7 = new cpr.controls.Output();
				output_7.value = "[그리드1] codeName 아웃풋 value에 콤보박스 텍스트 값 익스프레션 바인딩";
				output_7.style.css({
					"font-weight" : "bold"
				});
				container.addChild(output_7, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_8 = new cpr.controls.Output();
				output_8.value = "[그리드2] codeName 아웃풋 value에 같은 로우의 code 컬럼 값 익스프레션 바인딩";
				output_8.style.css({
					"font-weight" : "bold"
				});
				container.addChild(output_8, {
					"colIndex": 1,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "314px",
				"left": "63px",
				"width": "858px",
				"height": "346px"
			});
			
			var group_3 = new cpr.controls.Container();
			group_3.style.setClasses(["cl-form-group"]);
			// Layout
			var formLayout_3 = new cpr.controls.layouts.FormLayout();
			formLayout_3.topMargin = "0px";
			formLayout_3.rightMargin = "0px";
			formLayout_3.bottomMargin = "0px";
			formLayout_3.leftMargin = "0px";
			formLayout_3.horizontalSpacing = "0px";
			formLayout_3.verticalSpacing = "0px";
			formLayout_3.horizontalSeparatorWidth = 1;
			formLayout_3.verticalSeparatorWidth = 1;
			formLayout_3.setColumns(["1fr"]);
			formLayout_3.setRows(["30px", "1fr"]);
			group_3.setLayout(formLayout_3);
			(function(container){
				var output_9 = new cpr.controls.Output();
				output_9.value = "익스프레션 바인딩을 이용하여 다른 컬럼의 텍스트를 value로 지정하는 예제";
				output_9.style.css({
					"color" : "#2e3284",
					"font-weight" : "bold",
					"font-size" : "13pt"
				});
				container.addChild(output_9, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_10 = new cpr.controls.Output();
				output_10.value = "- 그리드1 의 행을 클릭하여 선택된 행이 변경되면 selection-change 이벤트가 발생하고, 그리드1 하단의 selection-change 아웃풋 우측에 콤보박스의 text가 반환됩니다.\r\n- 그리드1 의 행의 콤보박스를 클릭하면 cell-click 이벤트가 발생되면 그리드1 하단의 cell-click 아웃풋 우측에 콤보박스 text가 반환됩니다.\r\n\r\n- 행 추가 버튼을 누르면 dsGrid에 새 행이 추가됩니다. 이 때, 그리드1과 그리드2는 같은 데이터셋에 바인딩 되어있으므로 데이터 변경, 행추가 등의 동작이 동시에 발생합니다.\r\n\r\n- 각 그리드는 pasteMode = editable로 지정되어있기 때문에 codeName 컬럼에 배치된 아웃풋은 붙여넣기로 값이 변경되지 않습니다.\r\n";
				container.addChild(output_10, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "20px",
				"left": "57px",
				"width": "857px",
				"height": "261px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "Button";
			if(typeof onButtonClick2 == "function") {
				button_2.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_2, {
				"top": "680px",
				"left": "113px",
				"width": "100px",
				"height": "20px"
			});
		}
	});
	app.title = "T8667";
	cpr.core.Platform.INSTANCE.register(app);
})();

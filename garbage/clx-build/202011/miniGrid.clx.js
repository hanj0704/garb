/*
 * App URI: 202011/miniGrid
 * Source Location: 202011/miniGrid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202011/miniGrid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * miniGrid.js
			 * Created at 2020. 11. 24. 오전 11:04:51.
			 *
			 * @author HANS
			 ************************************************/
			
			
			function createDragSourceFeedback() {
				var feedback = new cpr.controls.Output();
				feedback.ellipsis = true;
				feedback.style.css({
					"opacity": "0.8",
					"width": "50px",
					"height": "25px",
					"border": "solid 1px red",
					"text-align": "center",
					"color": "black",
					"border-radius": "10px",
					"background": "white",
					"box-shadow": "0px 2px 10px #ddd",
					"cursor": "move"
				});
				return feedback;
			}
			
			
			/**
			 * 파라미터의 컨트롤을 드래그 가능하도록 드래그 소스를 지정하는 함수.
			 * @param {cpr.controls.UIControl} control
			 */
			function setDragSource(control) {
				var feedback = null;
				var actualRect = null;
				new cpr.controls.DragSource(control, {
					options: {
						dataType: "text",
						threadhold: 10
					},
					onDragStart: function(context) {//dragStart에서 사용중인 context.source.detail이라는 대상은 이후 릴리즈에서 depreacted될 대상으로,context.sourceTargetObject로 대체됩니다.
						
						if (context.sourceTargetObject != null && context.sourceTargetObject.relativeTargetName != "header") {
							context.cursor = "grabbing";
							feedback = createDragSourceFeedback();
							control.style.css("opacity", " 0.5");
							context.data = context.sourceTargetObject;
							feedback.value = JSON.stringify(control.getRow(context.source.detail.rowIndex).getRowData());
			
							var voDragStartLoca = context.dragStartLocation;
							actualRect = new cpr.geometry.Rectangle(voDragStartLoca.x, voDragStartLoca.y, control.getActualRect().width, 25);
							app.floatControl(feedback, actualRect);
							context.source = null;
						} else {
							context.cancel();
						}
					},
					onDragMove: function(context) {
						context.cursor = "grabbing";
						var newRect = actualRect.getTranslatedByDimension(context.dragDelta);
						app.floatControl(feedback, newRect);
					},
					onDragEnd: function(context) {
						context.cursor = "";
						feedback.dispose();
						feedback = null;
						control.style.removeStyle("opacity");
					}
				});
			}
			var voPrevRowElement = null;
			
			/**
			 * 파라미터로 받은 컨트롤을 드랍가능한 타겟으로 지정하는 함수.
			 * @param {cpr.controls.Grid} control2
			 */
			function setDropTarget(control2) {
			
				var dropTarget = new cpr.controls.DropTarget(control2, {
					isImportant: function(source) {
						return source.dataType == "text";
					},
					onDragEnter: function(context) {
			
					},
					onDragLeave: function(context) {
			
					},
					onDragMove: function(context) {
						var vaElementsOnMouse = elementsFromPoint(context.pointerLocation.x, context.pointerLocation.y);
			
						var vaClGridRowEle = vaElementsOnMouse.filter(function( /*HTMLElement*/ each) {
							if (each.classList.contains("cl-grid-row")) {
								return each;
							}
						});
						var voGridRowElement = vaClGridRowEle[0];
			
						if (voGridRowElement && !voGridRowElement.classList.contains("row-bottom")) {
							if (voGridRowElement != voPrevRowElement && voPrevRowElement) {
			
								voPrevRowElement.classList.remove("row-bottom");
							}
							voPrevRowElement = voGridRowElement;
							voGridRowElement.classList.add("row-bottom");
						}
					},
					onDrop: function(context) {
							var voDragRowData = context.source.control.getRow(context.data.rowIndex).getRowData()
							var vnDragIndex = context.data.rowIndex;
						if (context.target.detail != null) {
							var vnDropIndex = context.target.detail.rowIndex;
							if (vnDropIndex > vnDragIndex) {
								
								control2.insertRowData(vnDropIndex, true, voDragRowData);
								control2.deleteRow(vnDragIndex);
							} else {
								control2.deleteRow(vnDragIndex);
								control2.insertRowData(vnDropIndex, true, voDragRowData);
							}
						} else {
							var vnInsertIdx = Number(voPrevRowElement.getAttribute("aria-rowindex")) - 1;
							var vbInsertAfter = vnInsertIdx == control2.getRowCount() - 1 ? true : false;
							control2.deleteRow(vnDragIndex);
							control2.insertRowData(vnInsertIdx, vbInsertAfter, voDragRowData);
						}
						voPrevRowElement.classList.remove("row-bottom");
					}
				});
			}
			
			/**
			 * 마우스 포인터가 위치한 곳 밑에 있는 모든 요소를 가져오는 함수입니다.
			 * @param {Number} x
			 * @param {Number} y
			 * @return {HTMLElement}
			 */
			function elementsFromPoint(x, y) {
				if (document["msElementsFromPoint"]) {
					var nodeList = document["msElementsFromPoint"](x, y);
					if (!nodeList) {
						return [];
					} else {
						return Array.prototype.slice.call(nodeList);
					}
				} else {
					return (document["elementsFromPoint"](x, y) || []);
				}
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				setDragSource(app.lookup("grd1"));
				setDropTarget(app.lookup("grd1"));
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "column4": "column46"},
					{"column1": "column17", "column2": "column27", "column3": "column37", "column4": "column47"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "miniGrid";
	cpr.core.Platform.INSTANCE.register(app);
})();

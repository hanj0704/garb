/*
 * App URI: savepoint/save2/draftMan
 * Source Location: savepoint/save2/draftMan.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("savepoint/save2/draftMan", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * draftMan.js
			 * Created at 2020. 7. 30. 오후 5:45:52.
			 *
			 * @author han
			 ************************************************/
			///************************************************
			// * copyNinzaKaKashi.module.js
			// * Created at 2020. 7. 21. 오후 5:59:52.
			// * 해당 모듈은 웹소켓을 사용하여 화면에 대한 데이터를 저장하여 
			// * @author han
			// ************************************************/
			//
			//var moCopyData = {"control" :[]
			//				 ,"dataComponent":[]
			//				 ,"embedded":[]};
			//
			//var controlKind = ["combobox","inputbox","numbereditor","dateinput","radiobutton","listbox","maskeditor","checkbox"];
			//
			//
			//function copyKit(){
			//	
			//}
			//
			///**
			// * 
			// * @param {cpr.core.AppInstance} _app
			// */
			//function copyData(_app) {
			//	var smallCopyData ={"control":[]
			//				,"dataComponent":[]};
			//	var _app = _app;
			//	
			//	var vcContainer = _app.getContainer();
			//	
			//	vcContainer.getAllRecursiveChildren().forEach(function(each){
			//		
			//		if(controlKind.indexOf(each.type) >= 0){
			//
			//				var isBinded = false;
			//				if(each.getBindInfo("value") != undefined && each.getBindInfo("value").type == "datacolumn") {
			//						
			//						isBinded = true;
			//					}
			//				smallCopyData.control.push({"id" 	 	: each.id
			//										   ,"value" 	: each.value
			//										   ,"isBinded"  : isBinded
			//									 });
			//		}
			//	});
			//	
			//	_app.getAllDataControls().forEach(function(each){
			//
			//		if(each.type == "dataset") {
			//			smallCopyData.dataComponent.push({"id" : each.id
			//										,"value": each.getRowDataRanged()
			//			});
			//		}
			//		else if(each.type == "datamap") {
			//			smallCopyData.dataComponent.push({"id" : each.id
			//										,"value": each.getDatas()
			//			});
			//		}
			//	});
			//	return smallCopyData;
			//}
			///**
			// * 
			// * @param {cpr.core.AppInstance} _app
			// */
			//copyKit.prototype.copyPage = function(_app){
			//	moCopyData ={"control":[]
			//				,"dataComponent":[]
			//				,"embedded":[]};
			//	var _app = _app;
			//	
			//	var vcContainer = _app.getContainer();
			//	
			//	vcContainer.getAllRecursiveChildren().forEach(function(each){
			////		console.log(each.type);
			//		
			////		if(each.id != undefined) {
			//		if(controlKind.indexOf(each.type) >= 0){
			//			//복사하고자 하는 컨트롤이 그리드, 콤보박스 등등 데이터셋과 연결해서 사용하는 컨트롤 이라면, 그들을 체크해서 그 컨트롤이 가지고 있는 하위 아이템들도 복사를 해야하는가? 
			//									//데이터컴포넌토도 같이 복사해버리면 되는거였음.
			////			if("value" in each){
			//				var isBinded = false;
			//					if(each.getBindInfo("value") != undefined && each.getBindInfo("value").type == "datacolumn") {
			//						
			//						isBinded = true;
			//					}
			//				moCopyData.control.push({"id" 	 	: each.id
			//										,"value" 	: each.value
			//									 	,"isBinded" : isBinded
			//									 });
			////			}
			//		}
			//		 else if (each instanceof cpr.controls.EmbeddedApp) {
			////		 	console.log(each);
			////		 	console.log(each.getEmbeddedAppInstance());
			//		 	
			//		 var a=copyData(each.getEmbeddedAppInstance());
			////		 	console.log(a);
			//		 	
			//		 	moCopyData.embedded.push({"id" : each.id
			//		 							 ,"value" :a});
			//		 }
			//	});
			//	
			//	_app.getAllDataControls().forEach(function(each){
			//
			//		if(each.type == "dataset") {
			//			moCopyData.dataComponent.push({"id" : each.id
			//										,"value": each.getRowDataRanged()
			//			});
			//		}
			//		else if(each.type == "datamap") {
			//			moCopyData.dataComponent.push({"id" : each.id
			//										,"value": each.getDatas()
			//			});
			//		}
			//	});
			//	
			//	_app.getRootAppInstance().dialogManager.openDialog("202008/draftMan", "202008/draftMan", {width:400,height:300}, function(dialog) {
			//		dialog.ready(function(dialogApp){
			//			
			//		});
			//		dialog.initValue = {
			//			"pageParam" : _app.app.id,
			//			"copyData" : moCopyData
			//		}
			//		
			//	});
			//}
			//
			///**
			// * 복사붙여넣기를 할 때 상대컬럼바인딩 되어있는 기능을 없애버릴지, readOnly 혹은 disabled 처리해야할지 결정 필
			// * @param {cpr.core.AppInstance} _app
			// * @param {{control:Object[],dataComponent:Object[]}} poCopyData
			// */
			//copyKit.prototype.copyCat = function(_app,poCopyData) {
			//	
			//	var _app = _app;
			//	var vsAppId = _app.app.id;
			//	
			//	cpr.core.App.load(vsAppId, function(loadedApp){
			//		
			//		var newIns = loadedApp.createNewInstance();
			//		_app.close();
			//		newIns.addEventListenerOnce("load", function(e){
			//			moCopyData.dataComponent.forEach(function(each){
			//				
			//				var dataComponent = newIns.lookup(each.id);
			//				dataComponent.build(each.value);
			//			});
			//
			//			moCopyData.control.forEach(function(each){
			//				
			//				var control = newIns.lookup(each.id);
			//				control.putValue(each.value);
			//			});
			//			newIns.getContainer().readOnly = true;
			//			e.stopImmediatePropagation();
			////			e.stopPropagation();
			//		});
			//		setTimeout(function(){
			//			
			//			newIns.run();
			//		}, 2000)
			//	});
			//}
			//
			///**
			// * 복사붙여넣기를 할 때 상대컬럼바인딩 되어있는 기능을 없애버릴지, readOnly 혹은 disabled 처리해야할지 결정 필
			// * @param {cpr.core.AppInstance} _app
			// * @param {#app} appId
			// * @param {{control:Object[],dataComponent:Object[]}} poCopyData
			// */
			//copyKit.prototype.copyCat2 = function(_app,appId,poCopyData) {
			//	
			//	var vsAppId = appId;
			//	
			//	cpr.core.App.load(vsAppId, function(loadedApp){
			//		
			//		var newIns = loadedApp.createNewInstance();
			//		_app.close();
			//		newIns.addEventListenerOnce("load", function(e){
			//			moCopyData.dataComponent.forEach(function(each){
			//				
			//				var dataComponent = newIns.lookup(each.id);
			//				dataComponent.build(each.value);
			//			});
			//
			//			moCopyData.control.forEach(function(each){
			//				
			//				var control = newIns.lookup(each.id);
			//				control.putValue(each.value);
			//			});
			//			newIns.getContainer().readOnly = true;
			//			e.stopImmediatePropagation();
			////			e.stopPropagation();
			//		});
			//		setTimeout(function(){
			//			
			//			newIns.run();
			//		}, 2000)
			//	});
			//}
			//
			///**
			// * 
			// * @param {cpr.core.AppInstance} _app
			// * @param {Object} pasteData
			// */
			//copyKit.prototype.copyCat3 = function(_app,pasteData) {
			//	var voNewAppIns = _app;
			//	var voPasteData = pasteData;
			//	console.log(voPasteData);
			//	voNewAppIns.removeAllEventListeners();
			//			voNewAppIns.getContainer().getAllRecursiveChildren().forEach(function(each) {
			//				each.removeAllEventListeners();
			//			});
			//				voPasteData.dataComponent.forEach(function(each) {
			//					
			//					var dataComponent = voNewAppIns.lookup(each.id);
			//					dataComponent.build(each.value);
			//				});
			//				
			//				voPasteData.control.forEach(function(each) {
			//					
			//					var iterCtrls = voNewAppIns.lookup(each.id);
			//					if(each.isBinded) {
			//						iterCtrls.unbind("value");
			//					}
			//					iterCtrls.putValue(each.value);
			//				});
			////	});
			//}
			//
			//
			//globals.createCopyKit = function(){
			//	
			//	return new copyKit();
			//}
			var util = createCommonUtil();
			
			var copyKit = createCopyKit();
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				var a = util.Dialog.isOpenedPop(app);
				var voHostProp = app.getHostProperty("initValue");
				var voPasteData = voHostProp["copyData"];
				
				var vcEmbApp = app.lookup("ea1");
				
				cpr.core.App.load(voHostProp["pageParam"], function(loadedApp) {
					
					vcEmbApp.app = loadedApp;
					
					vcEmbApp.addEventListener("app-ready", function(e) {
						
						var voNewAppIns = vcEmbApp.getEmbeddedAppInstance();
						voNewAppIns.removeAllEventListeners();
			
						voNewAppIns.getContainer().getAllRecursiveChildren().forEach(function(each) {
							each.removeAllEventListeners();
						});
						
						voNewAppIns.addEventListenerOnce("load", function(ev) {
							
							voPasteData.dataComponent.forEach(function(each) {
								
								var dataComponent = voNewAppIns.lookup(each.id);
								dataComponent.build(each.value);
							});
							
							voPasteData.control.forEach(function(each) {
								
								var iterCtrls = voNewAppIns.lookup(each.id);
								if(each.isBinded) {
									iterCtrls.unbind("value");
								}
								iterCtrls.putValue(each.value);
							});
							
							voPasteData.embedded.forEach(function(each){
								
								if(voNewAppIns.lookup(each.id).getEmbeddedAppInstance()) {
									
								copyKit.copyCat3(voNewAppIns.lookup(each.id).getEmbeddedAppInstance(), each.value);
								} else {
									/** @type cpr.controls.EmbeddedApp */
									var embq = voNewAppIns.lookup(each.id);
									embq.addEventListener("app-ready", function(e){
									var embqAns = embq.getEmbeddedAppInstance();
									
									embqAns.addEventListener("load", function(eqe){
										copyKit.copyCat3(eqe.control, each.value);
									});
										
									});
								}
							});
							
							voNewAppIns.getContainer().readOnly = true;
							var voDialogManager = app.getRootAppInstance().dialogManager;
							var voDialogRect = voDialogManager.getConstraintByName(app.app.id);
							var voContentRect = app.lookup("ea1").getEmbeddedAppInstance().getContainer().getContentPaneRect();
							//dialogRect에 calc가 적용되지 않아 임시적으로 작성된 변수입니다.
			//				console.log(voContentRect);
							var dia = voDialogManager.getDialogByName(app.app.id);
							
							dia.style.css({
								top : "calc(10%)",
			//					right:"calc(10%)",
			//					bottom:"calc(10%)",
								left: "calc(10%)",
								width:"calc(80%)",
								height : "calc(80%)",
								backgroundColor : "white"
							});
							
							voNewAppIns.getContainer().getAllRecursiveChildren().forEach(function(each){
								if(each instanceof cpr.controls.TabFolder || each instanceof cpr.controls.MDIFolder) {
								 /** @type cpr.controls.TabFolder */
									var fold = each;
									
			//						fold.getAllRecursiveChildren().forEach(function(eachs){
			//							
			////							console.log(eachs);
			//							if(eachs instanceof cpr.controls.Container) {
			////								console.log(eachs);
			//								voNewAppIns.getContainer().addChild(eachs, {
			//									"width" : "400px",
			//									"height" : "300px",
			//									"autoSize":"none"
			//								});
			//							}
			//						});
									
			//						var Cont = new cpr.controls.Container();
			//						var flowL = new cpr.controls.layouts.FlowLayout();
			//						flowL.lineWrap = false;
			//						Cont.setLayout(flowL);
			//						Cont.style.css({
			//							"background-color" : "white"
			//						})
			////						console.log(fold.getActualRect());
			//						var tem = fold.getOffsetRect();
			////						console.log(tem);
			////						console.log(voNewAppIns);
			//						voNewAppIns.getContainer().addChild(Cont, {
			//							"width" : tem.width+"px",
			//							"height": tem.height+40+"px",
			//							"left" : tem.left+"px",
			//							"top" : tem.top+"px"
			//						});
			//						
			//						fold.getTabItems().forEach(function(each){
			//							var formCont = new cpr.controls.Container();
			//							var formL = new cpr.controls.layouts.FormLayout();
			//							formL.setColumns(["1fr"]);
			//							formL.setRows(["30px","1fr"]);
			//							formL.setCustomRowShade(0, "#f0f8ff");
			//							formCont.setLayout(formL);
			//							
			//							var outp = new cpr.controls.Output();
			//							outp.value = each.text;
			//							
			//							formCont.addChild(outp, {
			//								"colIndex" : 0,
			//								"rowIndex" : 0
			//							});
			//							formCont.addChild(each.content, {
			//								"colIndex" : 0,
			//								"rowIndex" : 1
			//							});
			//							
			//							Cont.addChild(formCont, {
			//								"width" : tem.width+"px",
			//								"height": tem.height+"px",
			//								"autoSize" : "none"
			//							});
			//						});
			//						voNewAppIns.getContainer().removeChild(fold);
			
			//						fold.getTabItems().forEach(function(eachs){
			//							console.log(eachs);
			//							console.log(eachs.text);
			//							var opts = new cpr.controls.Output();
			//							
			//							opts.value = eachs.text;
			//							voNewAppIns.getContainer().addChild(opts, {
			//								"width" :"400px",
			//								"height":"30px",
			//								"autoSize":"none"
			//							});
			//							voNewAppIns.getContainer().addChild(eachs.content, {
			//								"width":"400px",
			//								"height":"300px",
			//								"autoSize":"none"
			//							});
			//						});
									
									
			//						voNewAppIns.getContainer().removeChild(fold);
								
								
								}
							});
			//				dia.style.css({
			//					top : "calc(50% - "+voContentRect.height/2+"px)",
			//					left : "calc(50% - "+voContentRect.width/2+"px)",
			//					width :voContentRect.width+10+"px",
			//					height : voContentRect.height+100+"px",
			//					backgroundColor : "white"
			//				});
							
							
			//				cpr.core.DeferredUpdateManager.INSTANCE.update();
			//				console.log("돌려돌려돌림판");
			//				var vnCenterTop = voDialogRect.top - (voContentRect.height - voDialogRect.height) / 2;
			//				var vnCenterLeft = voDialogRect.left - (voContentRect.width - voDialogRect.width) / 2;
			//				
			//				app.getHostAppInstance().dialogManager.replaceConstraintByName(app.app.id, {
			//					"width": voContentRect.width + 10,
			//					"height": voContentRect.height + 100,
			//					"left": vnCenterLeft,
			//					"top": vnCenterTop
			//				})
						});
						
						
					});
				});
				
			}
			
			/*
			 * "취소" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				app.close();
			}
			
			/*
			 * "결재" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
				app.close();
			}
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			container.addChild(embeddedApp_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "50px",
				"left": "0px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "취소";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"right": "10px",
				"bottom": "10px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "결재";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_2, {
				"right": "120px",
				"bottom": "10px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "draftMan";
	cpr.core.Platform.INSTANCE.register(app);
})();

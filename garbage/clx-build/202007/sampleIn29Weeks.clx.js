/*
 * App URI: 202007/sampleIn29Weeks
 * Source Location: 202007/sampleIn29Weeks.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202007/sampleIn29Weeks", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hanaTest.js
			 * Created at 2020. 7. 13. 오후 2:13:03.
			 *
			 * @author han
			 ************************************************/
			
			
			/*
			 * 1번
			 * "console" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				var vcGrid = app.lookup("grd1");
				
				var vcDataSet = app.lookup("ds1");
				
				vcDataSet.forEachOfUnfilteredRows(function(/*cpr.data.DataRow*/dataRow){
					
					console.log(dataRow.getIndex()+"번 째 row의 상태 값 :"+dataRow.getStateString());
				});
			}
			
			
			
			
			
			
			/*
			 * 3번
			 * "clear" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
				app.lookup("cmb1").clearSelection();
			}
			
			
			/*
			 * 7번
			 * "clear" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
				var kits=  createKit(app);
				
				kits.clearAllChildren(app,"grp1");
			
			}
			
			
			/*
			 * 18번
			 * "Button" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn4Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn4 = e.control;
				
				var mdi = app.lookup("mdi1");
				
				mdi.addItemWithApp("appid", true, function(item, _app){
				//여기서 item.content는 임베디드 앱 이라는 컨트롤로, 임베디드 앱은 자신이 호출하는 서브화면에 대해서 초기값을 전달할 수 있습니다.		
					item.content.initValue = {
						"name" : "HAN",
						"property1" : "HELLOWORLD"
					}
					
					//이렇게 호출하고, 받는 쪽에서 파라미터를 받는 방법
					/**
					 * function onBodyLoad(e){
					 *   
					 *   var initParam = app.getHostProperty("initValue");
					 *   
					 *   console.log(initParam["name"]);
					 * }
					 */
					
				})
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "2px",
				"border-bottom-width" : "2px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "2px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["25px", "1fr", "28px", "28px"]);
			formLayout_1.setCustomRowShade(0, "#f8c3c3");
			group_1.setLayout(formLayout_1);
			(function(container){
				var grid_1 = new cpr.controls.Grid("grd1");
				grid_1.init({
					"dataSet": app.lookup("ds1"),
					"columns": [
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.targetColumnName = "column1";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column1";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.targetColumnName = "column2";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column2";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.targetColumnName = "column3";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column3";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.targetColumnName = "column4";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "column4";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "column1";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("ipb1");
										inputBox_1.bind("value").toDataColumn("column1");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "column2";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("ipb2");
										inputBox_2.bind("value").toDataColumn("column2");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "column3";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("ipb3");
										inputBox_3.bind("value").toDataColumn("column3");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "column4";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("ipb4");
										inputBox_4.bind("value").toDataColumn("column4");
										return inputBox_4;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_1 = new cpr.controls.Output();
				output_1.value = "1.데이터 change 여부 판단하는 방법";
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button("btn1");
				button_1.value = "console";
				if(typeof onBtn1Click2 == "function") {
					button_1.addEventListener("click", onBtn1Click2);
				}
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 2,
					"horizontalAlign": "right"
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "데이터셋의 행에서 getState(), getStateString()과 같은 api를 사용하면 각 행의 상태값을 가져와서 사용할 수 있습니다.";
				container.addChild(output_2, {
					"colIndex": 0,
					"rowIndex": 3
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "282px"
			});
			
			var group_2 = new cpr.controls.Container();
			group_2.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "2px",
				"border-bottom-width" : "2px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "2px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_2 = new cpr.controls.layouts.FormLayout();
			formLayout_2.topMargin = "5px";
			formLayout_2.rightMargin = "5px";
			formLayout_2.bottomMargin = "5px";
			formLayout_2.leftMargin = "5px";
			formLayout_2.horizontalSpacing = "10px";
			formLayout_2.verticalSpacing = "10px";
			formLayout_2.setColumns(["1fr"]);
			formLayout_2.setRows(["25px", "50px", "1fr"]);
			formLayout_2.setCustomRowShade(0, "#f8c3c3");
			group_2.setLayout(formLayout_2);
			(function(container){
				var output_3 = new cpr.controls.Output();
				output_3.value = "2.페이지인덱서 사용하는 방법";
				container.addChild(output_3, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var pageIndexer_1 = new cpr.controls.PageIndexer();
				pageIndexer_1.init(1, 1, 1);
				container.addChild(pageIndexer_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_4 = new cpr.controls.Output();
				output_4.value = "많은 속성들이 있으나 기본적을 totalRowCount, currentPageIndex, pageRowCount를 활용합니다. \r\ntotalRowCount / pageRowCount로 전체 페이지인덱서의 페이지 갯수를 계산할 수 있으며\r\ntotalRowCount는 서버에서 구하고, pageRowCount는 클라이언트나 서버, 원하는곳에서 지정합니다.\r\n기본적으로 사용하는 방법은 페이지인덱서에서 selection-change가 발생했을 때, currentPageIndex와 pageRowCount를 파라미터로 가져가는 서브미션을 send하여, \r\n각 페이지에서 보여주어야 하는 행들을 pageIndexCount* (currentPageIndex-1) ~ pageIndexCount * currentPageIndex 사이의 인덱스의 데이터를 요청하는 형태로 사용합니다.";
				container.addChild(output_4, {
					"colIndex": 0,
					"rowIndex": 2
				});
			})(group_2);
			container.addChild(group_2, {
				"autoSize": "none",
				"width": "1024px",
				"height": "280px"
			});
			
			var group_3 = new cpr.controls.Container();
			group_3.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "2px",
				"border-bottom-width" : "2px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "2px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_3 = new cpr.controls.layouts.FormLayout();
			formLayout_3.topMargin = "5px";
			formLayout_3.rightMargin = "5px";
			formLayout_3.bottomMargin = "5px";
			formLayout_3.leftMargin = "5px";
			formLayout_3.horizontalSpacing = "10px";
			formLayout_3.verticalSpacing = "10px";
			formLayout_3.setColumns(["1fr"]);
			formLayout_3.setRows(["25px", "28px", "28px", "28px"]);
			formLayout_3.setCustomRowShade(0, "#f8c3c3");
			group_3.setLayout(formLayout_3);
			(function(container){
				var output_5 = new cpr.controls.Output();
				output_5.value = "3.콤보박스의 값을 deselect하는 방법";
				container.addChild(output_5, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button("btn2");
				button_2.value = "clear";
				if(typeof onBtn2Click == "function") {
					button_2.addEventListener("click", onBtn2Click);
				}
				container.addChild(button_2, {
					"colIndex": 0,
					"rowIndex": 2,
					"horizontalAlign": "right"
				});
				var comboBox_1 = new cpr.controls.ComboBox("cmb1");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("label1", "value1"));
					comboBox_1.addItem(new cpr.controls.Item("label2", "value2"));
					comboBox_1.addItem(new cpr.controls.Item("label3", "value3"));
					comboBox_1.addItem(new cpr.controls.Item("label4", "value4"));
					comboBox_1.addItem(new cpr.controls.Item("label5", "value5"));
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"colIndex": 0,
					"rowIndex": 1,
					"horizontalAlign": "left"
				});
				var output_6 = new cpr.controls.Output();
				output_6.value = "콤보박스의 clearSelection() api를 사용할 수 있습니다";
				container.addChild(output_6, {
					"colIndex": 0,
					"rowIndex": 3
				});
			})(group_3);
			container.addChild(group_3, {
				"autoSize": "none",
				"width": "1024px",
				"height": "153px"
			});
			
			var group_4 = new cpr.controls.Container();
			group_4.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "2px",
				"border-bottom-width" : "2px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "2px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_4 = new cpr.controls.layouts.FormLayout();
			formLayout_4.topMargin = "5px";
			formLayout_4.rightMargin = "5px";
			formLayout_4.bottomMargin = "5px";
			formLayout_4.leftMargin = "5px";
			formLayout_4.horizontalSpacing = "10px";
			formLayout_4.verticalSpacing = "10px";
			formLayout_4.setColumns(["1fr"]);
			formLayout_4.setRows(["25px", "28px", "1fr"]);
			formLayout_4.setCustomRowShade(0, "#f8c3c3");
			group_4.setLayout(formLayout_4);
			(function(container){
				var output_7 = new cpr.controls.Output();
				output_7.value = "4. 필드에 대문자만 허용하는 방법, 인풋박스 길이제한";
				container.addChild(output_7, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var inputBox_5 = new cpr.controls.InputBox("ipb5");
				inputBox_5.inputFilter = "[A-Z]";
				container.addChild(inputBox_5, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_8 = new cpr.controls.Output();
				output_8.value = "입력값에 대한 체한은 인풋박스 컨트롤의 inputFilter속성을 사용하십시오. 다만 서치인풋 컨트롤에서는 사용할 수 없습니다.(사용자가 검색하는 값에 대해서 제한을 두지 않기 때문에)\r\n\r\n인풋박스의 길이제한은 maxLength와 lengthUnit 속성을 사용하십시오.";
				container.addChild(output_8, {
					"colIndex": 0,
					"rowIndex": 2
				});
			})(group_4);
			container.addChild(group_4, {
				"autoSize": "none",
				"width": "1024px",
				"height": "179px"
			});
			
			var group_5 = new cpr.controls.Container();
			group_5.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "2px",
				"border-bottom-width" : "2px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "2px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_5 = new cpr.controls.layouts.FormLayout();
			formLayout_5.topMargin = "5px";
			formLayout_5.rightMargin = "5px";
			formLayout_5.bottomMargin = "5px";
			formLayout_5.leftMargin = "5px";
			formLayout_5.horizontalSpacing = "10px";
			formLayout_5.verticalSpacing = "10px";
			formLayout_5.setColumns(["1fr"]);
			formLayout_5.setRows(["25px", "28px", "28px"]);
			formLayout_5.setCustomRowShade(0, "#f8c3c3");
			group_5.setLayout(formLayout_5);
			(function(container){
				var output_9 = new cpr.controls.Output();
				output_9.value = "6.데이트인풋 9999/12/31입력 가능하게 하는 방법";
				container.addChild(output_9, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_10 = new cpr.controls.Output();
				output_10.value = "maxDate속성을 사용하십시오.";
				container.addChild(output_10, {
					"colIndex": 0,
					"rowIndex": 2
				});
				var dateInput_1 = new cpr.controls.DateInput("dti1");
				dateInput_1.value = "99991230";
				dateInput_1.maxDate = new Date(9999, 11, 31);
				container.addChild(dateInput_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_5);
			container.addChild(group_5, {
				"autoSize": "none",
				"width": "1024px",
				"height": "115px"
			});
			
			var group_6 = new cpr.controls.Container();
			group_6.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "2px",
				"border-bottom-width" : "2px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "2px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_6 = new cpr.controls.layouts.FormLayout();
			formLayout_6.topMargin = "5px";
			formLayout_6.rightMargin = "5px";
			formLayout_6.bottomMargin = "5px";
			formLayout_6.leftMargin = "5px";
			formLayout_6.horizontalSpacing = "10px";
			formLayout_6.verticalSpacing = "10px";
			formLayout_6.setColumns(["1fr"]);
			formLayout_6.setRows(["25px", "1fr", "28px", "28px"]);
			formLayout_6.setCustomRowShade(0, "#f8c3c3");
			group_6.setLayout(formLayout_6);
			(function(container){
				var output_11 = new cpr.controls.Output();
				output_11.value = "7.그룹 안에 있는 모든 컨트롤의 value를 clear하는 방법";
				container.addChild(output_11, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var group_7 = new cpr.controls.Container("grp1");
				group_7.style.setClasses(["cl-form-group"]);
				// Layout
				var formLayout_7 = new cpr.controls.layouts.FormLayout();
				formLayout_7.topMargin = "5px";
				formLayout_7.rightMargin = "5px";
				formLayout_7.bottomMargin = "5px";
				formLayout_7.leftMargin = "5px";
				formLayout_7.horizontalSpacing = "10px";
				formLayout_7.verticalSpacing = "10px";
				formLayout_7.horizontalSeparatorWidth = 1;
				formLayout_7.verticalSeparatorWidth = 1;
				formLayout_7.setColumns(["100px", "1fr", "100px", "1fr"]);
				formLayout_7.setUseColumnShade(0, true);
				formLayout_7.setUseColumnShade(2, true);
				formLayout_7.setRows(["25px", "25px", "25px", "25px", "25px"]);
				group_7.setLayout(formLayout_7);
				(function(container){
					var output_12 = new cpr.controls.Output();
					output_12.value = "Output";
					container.addChild(output_12, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_13 = new cpr.controls.Output();
					output_13.value = "Output";
					container.addChild(output_13, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var output_14 = new cpr.controls.Output();
					output_14.value = "Output";
					container.addChild(output_14, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var output_15 = new cpr.controls.Output();
					output_15.value = "Output";
					container.addChild(output_15, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var output_16 = new cpr.controls.Output();
					output_16.value = "Output";
					container.addChild(output_16, {
						"colIndex": 0,
						"rowIndex": 4
					});
					var output_17 = new cpr.controls.Output();
					output_17.value = "Output";
					container.addChild(output_17, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var output_18 = new cpr.controls.Output();
					output_18.value = "Output";
					container.addChild(output_18, {
						"colIndex": 2,
						"rowIndex": 1
					});
					var output_19 = new cpr.controls.Output();
					output_19.value = "Output";
					container.addChild(output_19, {
						"colIndex": 2,
						"rowIndex": 2
					});
					var output_20 = new cpr.controls.Output();
					output_20.value = "Output";
					container.addChild(output_20, {
						"colIndex": 2,
						"rowIndex": 3
					});
					var output_21 = new cpr.controls.Output();
					output_21.value = "Output";
					container.addChild(output_21, {
						"colIndex": 2,
						"rowIndex": 4
					});
					var inputBox_6 = new cpr.controls.InputBox("ipb6");
					inputBox_6.value = "a";
					container.addChild(inputBox_6, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var inputBox_7 = new cpr.controls.InputBox("ipb7");
					inputBox_7.value = "b";
					container.addChild(inputBox_7, {
						"colIndex": 1,
						"rowIndex": 1
					});
					var inputBox_8 = new cpr.controls.InputBox("ipb8");
					inputBox_8.value = "c";
					container.addChild(inputBox_8, {
						"colIndex": 1,
						"rowIndex": 2
					});
					var inputBox_9 = new cpr.controls.InputBox("ipb9");
					inputBox_9.value = "d";
					container.addChild(inputBox_9, {
						"colIndex": 1,
						"rowIndex": 3
					});
					var inputBox_10 = new cpr.controls.InputBox("ipb10");
					inputBox_10.value = "e";
					container.addChild(inputBox_10, {
						"colIndex": 1,
						"rowIndex": 4
					});
					var inputBox_11 = new cpr.controls.InputBox("ipb11");
					inputBox_11.value = "f";
					container.addChild(inputBox_11, {
						"colIndex": 3,
						"rowIndex": 0
					});
					var inputBox_12 = new cpr.controls.InputBox("ipb12");
					inputBox_12.value = "g";
					container.addChild(inputBox_12, {
						"colIndex": 3,
						"rowIndex": 1
					});
					var inputBox_13 = new cpr.controls.InputBox("ipb13");
					inputBox_13.value = "h";
					container.addChild(inputBox_13, {
						"colIndex": 3,
						"rowIndex": 2
					});
					var inputBox_14 = new cpr.controls.InputBox("ipb14");
					inputBox_14.value = "i";
					container.addChild(inputBox_14, {
						"colIndex": 3,
						"rowIndex": 3
					});
					var inputBox_15 = new cpr.controls.InputBox("ipb15");
					inputBox_15.value = "j";
					container.addChild(inputBox_15, {
						"colIndex": 3,
						"rowIndex": 4
					});
				})(group_7);
				container.addChild(group_7, {
					"colIndex": 0,
					"rowIndex": 1,
					"colSpan": 1,
					"rowSpan": 1,
					"height": 177
				});
				var button_3 = new cpr.controls.Button("btn3");
				button_3.value = "clear";
				if(typeof onBtn3Click == "function") {
					button_3.addEventListener("click", onBtn3Click);
				}
				container.addChild(button_3, {
					"colIndex": 0,
					"rowIndex": 2,
					"horizontalAlign": "right"
				});
				var output_22 = new cpr.controls.Output();
				output_22.value = "공통모듈에 clearAllChildren 함수가 추가되었습니다.";
				container.addChild(output_22, {
					"colIndex": 0,
					"rowIndex": 3
				});
			})(group_6);
			container.addChild(group_6, {
				"autoSize": "none",
				"width": "1024px",
				"height": "315px"
			});
			
			var group_8 = new cpr.controls.Container();
			group_8.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "2px",
				"border-bottom-width" : "2px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "2px",
				"border-top-style" : "solid"
			});
			// Layout
			var formLayout_8 = new cpr.controls.layouts.FormLayout();
			formLayout_8.topMargin = "5px";
			formLayout_8.rightMargin = "5px";
			formLayout_8.bottomMargin = "5px";
			formLayout_8.leftMargin = "5px";
			formLayout_8.horizontalSpacing = "10px";
			formLayout_8.verticalSpacing = "10px";
			formLayout_8.setColumns(["1fr"]);
			formLayout_8.setRows(["25px", "1fr", "120px"]);
			formLayout_8.setCustomRowShade(0, "#f8c3c3");
			group_8.setLayout(formLayout_8);
			(function(container){
				var output_23 = new cpr.controls.Output();
				output_23.value = "18.1번 화면에서 다른화면으로 이동할 때 파라미터를 넘기는 방법.";
				container.addChild(output_23, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_24 = new cpr.controls.Output();
				output_24.value = "mdi폴더에서 addItemWithApp api를 사용하면 앱id를 통해서 아이템을 자동으로 추가할 수 있되, 세번 째 전달인자로 콜백함수를 작성할 수 있는것을 확인할 수 있습니다.\r\n해당 함수에서는appLoadCompleteCallback 으로 App이 로드된 후 호출되는 TabItem을 인자로 받는 콜백함수를 작성할 수 있는데,\r\n이곳에서 item.content.initValue ={}를 통해서 호출된 화면에 파라미터를 전달할 수 있습니다.\r\n파라미터를 보내는 쪽이 있으면 받는 쪽이 존재해야 하는듯이, 호출된 화면의 load이벤트 혹은 init 이벤트에서 app.getHostProperty(\"initValue\")를 통해서 해당 파라미터를 받아야 합니다.";
				container.addChild(output_24, {
					"colIndex": 0,
					"rowIndex": 2,
					"colSpan": 1,
					"rowSpan": 1
				});
				var group_9 = new cpr.controls.Container();
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				group_9.setLayout(xYLayout_1);
				(function(container){
					var button_4 = new cpr.controls.Button("btn4");
					button_4.value = "Button";
					if(typeof onBtn4Click == "function") {
						button_4.addEventListener("click", onBtn4Click);
					}
					container.addChild(button_4, {
						"top": "20px",
						"left": "20px",
						"width": "100px",
						"height": "20px"
					});
					var mDIFolder_1 = new cpr.controls.MDIFolder("mdi1");
					container.addChild(mDIFolder_1, {
						"top": "20px",
						"left": "130px",
						"width": "421px",
						"height": "75px"
					});
				})(group_9);
				container.addChild(group_9, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_8);
			container.addChild(group_8, {
				"autoSize": "none",
				"width": "1024px",
				"height": "294px"
			});
		}
	});
	app.title = "sampleIn29Weeks";
	cpr.core.Platform.INSTANCE.register(app);
})();

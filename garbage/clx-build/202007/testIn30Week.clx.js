/*
 * App URI: 202007/testIn30Week
 * Source Location: 202007/testIn30Week.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202007/testIn30Week", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * testIn30Week.js
			 * Created at 2020. 7. 20. 오후 4:27:58.
			 *
			 * @author han
			 ************************************************/
			
			cpr.core.Platform.INSTANCE.onerror = function(error) {
				console.log(error);
				//클라이언트 사이드에서 주체가 되는 에러가 발생했을 때에만 에러를 캐치할 수 있음	
			}
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				app.lookup("sms1").send();
			//	app.lookup("msm1").send();
			}
			
			/*
			 * "insert" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn4Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn4 = e.control;
				
				app.lookup("grd1").insertRow(app.lookup("grd1").getSelectedRowIndex(), true);
			}
			
			
			/*
			 * "delete" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
				
				app.lookup("grd1").deleteRow(app.lookup("grd1").getSelectedRowIndex());
			}
			
			
			/*
			 * 매트릭스 서브미션에서 before-submit 이벤트 발생 시 호출.
			 * 통신을 시작하기전에 발생합니다.
			 */
			function onMsm1BeforeSubmit(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.MatrixSubmission
				 */
				var msm1 = e.control;
			//	msm1.setRequestEncoder(_requestEncoder);
				msm1.setDataRowHandler(function(/*cpr.data.Row*/rowData) {
						var vsState = rowData.getState();
					
					switch(vsState){
						case "INSERTED" :
							vsState = "I";
							break;
						case "UPDATED" :
							vsState = "U";
							break;
						case "DELETED" :
							vsState = "D";
							break;
						case "UNCHANGED" :
							vsState = "UC";
							break;
						default :
							break;
					}
					return {"rsltTyp" : vsState};
				});
				
			}
			
			
			function _requestEncoder(submission, reqData){
				
				console.log(reqData);
				return {"content" :reqData};
			}
			
			/*
			 * "Button" 버튼(btn5)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn5Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn5 = e.control;
				
				var vcTree = app.lookup("tre1");
				var item = vcTree.getItemByValue("8");
				vcTree.redraw();
				
				var ds2 = app.lookup("ds2");
				
				ds2.setFilter("column2 *='column'");
				
			}
			
			
			///*
			// * 서브미션에서 before-submit 이벤트 발생 시 호출.
			// * 통신을 시작하기전에 발생합니다.
			// */
			//function onSms1BeforeSubmit(/* cpr.events.CSubmissionEvent */ e){
			//	/** 
			//	 * @type cpr.protocols.Submission
			//	 */
			//	var sms1 = e.control;
			//	
			//	console.log(sms1.getRequestDataCount());
			//	console.log(sms1.getRequestData(0));
			//	console.log(sms1.getRequestData(1));
			//}
			
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				
				configDataMap2();
			}
			
			
			/*
			 * "Button" 버튼(btn5)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn5Click2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn5 = e.control;
				
			//	var dm = getDm();
			//	console.log(dm.alterColumnLayout);
			//	console.log(dm.info);
			//	console.log(dm.getDatas());
				app.lookup("msm1").send();
			//	app.lookup("sms2").send();
			}
			
			
			///*
			// * 서브미션에서 submit-done 이벤트 발생 시 호출.
			// * 응답처리가 모두 종료되면 발생합니다.
			// */
			//function onSms1SubmitDone(/* cpr.events.CSubmissionEvent */ e){
			//	/** 
			//	 * @type cpr.protocols.Submission
			//	 */
			//	var sms1 = e.control;
			//	
			//	console.log(getDm().getDatas());
			//}
			
			
			/*
			 * 서브미션에서 receive 이벤트 발생 시 호출.
			 * 서버로 부터 데이터를 모두 전송받았을 때 발생합니다.
			 */
			function onSms1Receive(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms1 = e.control;
			//	debugger;
				console.log("뭔데");
				console.log(sms1.xhr.responseText);
				console.log(sms1.getParameterNames());
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms2SubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms2 = e.control;
				console.log(sms2.getParameterNames());
				console.log(sms2.getParameters("SPECIALTHANKS"));
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms1SubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms1 = e.control;
				
				console.log(sms1.getParameters("HELLO"));
			}
			
			
			/*
			 * "Button" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column2"},
					{"name": "column1"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "child1"},
					{"name": "child2"},
					{"name": "child3"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "1", "column4": "1", "column5": "1"},
					{"column1": "column12", "column2": "column22", "column3": "2", "column4": "2", "column5": "2"},
					{"column1": "column13", "column2": "column23", "column3": "3", "column4": "3", "column5": "3"},
					{"column1": "column14", "column2": "column24", "column3": "4", "column4": "4", "column5": "4"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{
						"name": "sts",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "getStateString()"
					},
					{"name": "child1"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31"},
					{"column1": "column12", "column2": "column22", "column3": "column32"},
					{"column1": "column13", "column2": "a", "column3": "column33"},
					{"column1": "column14", "column2": "b", "column3": "column34"},
					{"column1": "column15", "column2": "c", "column3": "column35"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds3");
			dataSet_3.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"},
					{"name": "child1"},
					{"name": "child2"},
					{"name": "child3"},
					{"name": "rowNum"}
				],
				"rows": [
					{"label": "label1", "value": "1", "parent": ""},
					{"label": "label2", "value": "2", "parent": ""},
					{"label": "label3", "value": "3", "parent": ""},
					{"label": "label4", "value": "4", "parent": "1"},
					{"label": "label5", "value": "5", "parent": "1"},
					{"label": "label6", "value": "6", "parent": "2"},
					{"label": "label7", "value": "7", "parent": "4"},
					{"label": "label8", "value": "8", "parent": "7"},
					{"label": "label9", "value": "9", "parent": "8"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsPlan");
			dataSet_4.parseData({});
			app.register(dataSet_4);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "child1",
						"defaultValue": "a"
					},
					{
						"name": "child2",
						"defaultValue": "b"
					},
					{
						"name": "child3",
						"defaultValue": "c"
					},
					{
						"name": "child4",
						"defaultValue": "d"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dm2");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "child1",
						"defaultValue": "e"
					},
					{
						"name": "child2",
						"defaultValue": "f"
					},
					{
						"name": "child3",
						"defaultValue": "g"
					},
					{
						"name": "child4",
						"defaultValue": "h"
					},
					{
						"name": "child5",
						"defaultValue": "i"
					},
					{
						"name": "child6",
						"defaultValue": "j"
					},
					{
						"name": "child7",
						"defaultValue": "k"
					},
					{
						"name": "child8",
						"defaultValue": "l"
					}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.method = "get";
			submission_1.action = "cisweb/getList.do";
			submission_1.mediaType = "application/json";
			submission_1.addParameter("HELLO", null);
			submission_1.addRequestData(dataSet_2, cpr.protocols.PayloadType.all);
			if(typeof onSms1BeforeSubmit == "function") {
				submission_1.addEventListener("before-submit", onSms1BeforeSubmit);
			}
			if(typeof onSms1Receive == "function") {
				submission_1.addEventListener("receive", onSms1Receive);
			}
			if(typeof onSms1SubmitDone == "function") {
				submission_1.addEventListener("submit-done", onSms1SubmitDone);
			}
			app.register(submission_1);
			
			var matrixSubmission_1 = new cpr.protocols.MatrixSubmission("msm1");
			matrixSubmission_1.async = true;
			matrixSubmission_1.withCredentials = false;
			matrixSubmission_1.method = "post";
			matrixSubmission_1.action = "cisweb/getList.do";
			matrixSubmission_1.setProtocolDataModel(new cpr.protocols.matrix.MatrixDataModel({
				"request": {
					"format": "object",
					"data": {
						"input": {
							"format": "object",
							"data": {
								"grid01": {
									"format": "array",
									"dataControl": dataSet_2,
									"payload": "modified",
									"data": {
										"column1": {"format": "simple", "path": "@column1"},
										"column2": {"format": "simple", "path": "@column2"},
										"column3": {"format": "simple", "path": "@column3"}
									}
								},
								"child1": {"format": "simple", "dataControl": dataMap_1, "path": "@child1"},
								"child2": {"format": "simple", "dataControl": dataMap_1, "path": "@child2"},
								"child3": {"format": "simple", "dataControl": dataMap_1, "path": "@child3"},
								"child4": {"format": "simple", "dataControl": dataMap_1, "path": "@child4"}
							}
						},
						"FxFig": {
							"format": "object",
							"data": {
								"child1": {"format": "simple", "dataControl": dataMap_2, "path": "@child1"},
								"child2": {"format": "simple", "dataControl": dataMap_2, "path": "@child2"},
								"child3": {"format": "simple", "dataControl": dataMap_2, "path": "@child3"},
								"child4": {"format": "simple", "dataControl": dataMap_2, "path": "@child4"},
								"child5": {"format": "simple", "dataControl": dataMap_2, "path": "@child5"},
								"child6": {"format": "simple", "dataControl": dataMap_2, "path": "@child6"},
								"child7": {"format": "simple", "dataControl": dataMap_2, "path": "@child7"},
								"child8": {"format": "simple", "dataControl": dataMap_2, "path": "@child8"}
							}
						}
					}
				},
				"response": {
					"format": "object",
					"data": {
						"output" : {
							"format": "object",
							"data": {
								"dsPlan" : {
									"format": "array",
									"isAdd": false,
									"dataControl": dataSet_3,
									"data": {
										"child1" : {"format": "simple", "path": "@rowNum"}
									}
								}
							}
						}
					}
				}
			}));
			if(typeof onMsm1BeforeSubmit == "function") {
				matrixSubmission_1.addEventListener("before-submit", onMsm1BeforeSubmit);
			}
			app.register(matrixSubmission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.action = "cisweb/interval.do";
			submission_2.addParameter("limits", "0");
			if(typeof onSms2SubmitDone == "function") {
				submission_2.addEventListener("submit-done", onSms2SubmitDone);
			}
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			(function(comboBox_1){
				comboBox_1.setItemSet(app.lookup("ds1"), {
					"label": "column1",
					"value": "column2"
				});
			})(comboBox_1);
			container.addChild(comboBox_1, {
				"top": "63px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds2"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "sts";
								cell.text = "sts";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "sts";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "102px",
				"right": "20px",
				"left": "20px",
				"height": "200px"
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "Button";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_2, {
				"top": "82px",
				"left": "904px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_3 = new cpr.controls.Button("btn3");
			button_3.value = "delete";
			if(typeof onBtn3Click == "function") {
				button_3.addEventListener("click", onBtn3Click);
			}
			container.addChild(button_3, {
				"top": "83px",
				"left": "794px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_4 = new cpr.controls.Button("btn4");
			button_4.value = "insert";
			if(typeof onBtn4Click == "function") {
				button_4.addEventListener("click", onBtn4Click);
			}
			container.addChild(button_4, {
				"top": "83px",
				"left": "684px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_5 = new cpr.controls.Button("btn5");
			button_5.value = "Button";
			if(typeof onBtn5Click2 == "function") {
				button_5.addEventListener("click", onBtn5Click2);
			}
			container.addChild(button_5, {
				"top": "20px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "testIn30Week";
	cpr.core.Platform.INSTANCE.register(app);
})();

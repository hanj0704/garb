/*
 * App URI: metro/Untitled
 * Source Location: metro/Untitled.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("metro/Untitled", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			 /************************************************
			 * Untitled.js
			 * Created at 2021. 5. 3. 오후 5:09:22.
			 *
			 * @author JH
			 ************************************************/
			
			
			/*
			 * 트리에서 drop 이벤트 발생 시 호출.
			 * 마우스로 소스 컨트롤을 드래그 중 타겟 컨트롤에 소스 컨트롤을 드롭할 때 발생하는 이벤트.
			 */
			function onTre1Drop(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var tre1 = e.control;
				treeDrop(e);
			}
			
			
			/*
			 * 트리에서 drop 이벤트 발생 시 호출.
			 * 마우스로 소스 컨트롤을 드래그 중 타겟 컨트롤에 소스 컨트롤을 드롭할 때 발생하는 이벤트.
			 */
			function onTre2Drop(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var tre2 = e.control;
				treeDrop(e);
			}
			
			
			
			function treeDrop(/* cpr.events.CMouseEvent */  e){
				
				var data = JSON.parse(e.dataTransfer.getData("text"));
			
				/** 
				 * @type cpr.controls.Tree
				 */
				if (e.control.id != data.from.id) {
					
					var itemData = data.content[0] ;
				
					var rowData = {}  ;
					if ( app.lookup(data.from.id).getIndexByValue(itemData.value) > -1){
						var rowIndex = app.lookup(data.from.id).getDataSetIndexByValue(itemData.value);
						rowData =  app.lookup(data.from.id).dataSet.getRowData(rowIndex);
						
						var srcItem = app.lookup(data.from.id).getItemByValue(itemData.value);
						var srcPItem = srcItem.parentItem;
						var srcPVal = srcItem.parentValue;
						var srcChildren = srcItem.children;
						
						srcChildren.forEach(function(each){
							each.parentItem = srcPItem;
							each.parentValue = srcPVal; 
						});
						
						app.lookup(data.from.id).dataSet.deleteRow(rowIndex);
						//app.lookup(data.from.id).deleteItem(item);
					}
					
					var parentColumn = e.control.itemSetConfig.parentValue ; 
					
					if (e.targetObject.item && itemData.parentValue != e.targetObject.item.value){
						rowData[parentColumn] = e.targetObject.item.value; 
					} else {
						rowData[parentColumn] = ""; 
					}
						
					var test = _isRecursive(e.targetObject.item ,  itemData.value);
					if (test){
						rowData[parentColumn] = ""; 
					}
					
					e.control.dataSet.addRowData(rowData);
			
					/** 별개의 두 트리간 drag over 시 초기화 안되는것 같음 
					 * e.dataTransfer.clearData(); 없음
					 * e.dataTransfer = null ; 안됨.
					 */
			//		if (app.lookup(data.from.id)._dataTransfer)
			//			app.lookup(data.from.id)._dataTransfer = null ;
			//		if (app.lookup(data.from.id).µQP)
			//			app.lookup(data.from.id).µQP = null ;
						
					app.lookup(data.from.id).redraw();
					e.control.redraw();
					
					e.preventDefault();
				} 
				
				
				
				function _isRecursive(item, value){
					
					if (item) {
						if (item.parentValue == value)
							return true ;
						if (item.parentValue == "")
							return false ; 
						var pItem = item.parentItem;
						if (pItem) {
							return _isRecursive(pItem, value);     
						}
					}
					return false ;
					
				}
			}
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"},
					{"name": "column1"}
				],
				"rows": [
					{"label": "1", "value": "1", "parent": "", "column1": "1"},
					{"label": "11", "value": "11", "parent": "1", "column1": "1"},
					{"label": "12", "value": "12", "parent": "1", "column1": "1"},
					{"label": "13", "value": "13", "parent": "1", "column1": "1"},
					{"label": "14", "value": "14", "parent": "1", "column1": "1"},
					{"label": "2", "value": "2", "parent": "", "column1": "1"},
					{"label": "21", "value": "21", "parent": "2", "column1": "1"},
					{"label": "22", "value": "22", "parent": "2", "column1": "1"},
					{"label": "23", "value": "23", "parent": "2", "column1": "1"},
					{"label": "3", "value": "3", "parent": "", "column1": "1"},
					{"label": "31", "value": "31", "parent": "3", "column1": "1"},
					{"label": "32", "value": "32", "parent": "3", "column1": "1"},
					{"label": "33", "value": "33", "parent": "3", "column1": "1"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"},
					{"name": "column1"}
				],
				"rows": [
					{"label": "4", "value": "4", "parent": "", "column1": "2"},
					{"label": "41", "value": "41", "parent": "4", "column1": "2"},
					{"label": "42", "value": "42", "parent": "4", "column1": "2"},
					{"label": "43", "value": "43", "parent": "4", "column1": "2"},
					{"label": "44", "value": "44", "parent": "4", "column1": "2"},
					{"label": "5", "value": "5", "parent": "", "column1": "2"},
					{"label": "51", "value": "51", "parent": "5", "column1": "2"},
					{"label": "52", "value": "52", "parent": "5", "column1": "2"},
					{"label": "53", "value": "53", "parent": "5", "column1": "2"},
					{"label": "6", "value": "6", "parent": "", "column1": "2"},
					{"label": "61", "value": "61", "parent": "6", "column1": "2"},
					{"label": "62", "value": "62", "parent": "6", "column1": "2"},
					{"label": "63", "value": "63", "parent": "6", "column1": "2"}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var tree_1 = new cpr.controls.Tree("tre1");
			tree_1.draggableItem = true;
			tree_1.allowDrop = true;
			tree_1.autoOpen = -1;
			(function(tree_1){
				tree_1.setItemSet(app.lookup("ds1"), {
					"label": "label",
					"value": "value",
					"parentValue": "parent"
				});
			})(tree_1);
			if(typeof treeDrop == "function") {
				tree_1.addEventListener("drop", treeDrop);
			}
			container.addChild(tree_1, {
				"top": "48px",
				"left": "10px",
				"width": "150px",
				"height": "652px"
			});
			
			var tree_2 = new cpr.controls.Tree("tre2");
			tree_2.draggableItem = true;
			tree_2.allowDrop = true;
			tree_2.autoOpen = -1;
			(function(tree_2){
				tree_2.setItemSet(app.lookup("ds2"), {
					"label": "label",
					"value": "value",
					"parentValue": "parent"
				});
			})(tree_2);
			if(typeof treeDrop == "function") {
				tree_2.addEventListener("drop", treeDrop);
			}
			container.addChild(tree_2, {
				"top": "48px",
				"left": "170px",
				"width": "150px",
				"height": "652px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "Button";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "10px",
				"left": "10px",
				"width": "310px",
				"height": "28px"
			});
		}
	});
	app.title = "Untitled";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202112/FocusTester
 * Source Location: 202112/FocusTester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202112/FocusTester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * FocusTester.js
			 * Created at 2021. 12. 3. 오후 5:17:47.
			 *
			 * @author HANS
			 ************************************************/
			
			//window.addEventListener("focus", function(ev){
			//	console.log("WINDOW FOCUS OCCURED");
			//	console.log(ev);
			//});
			//
			window.addEventListener("keydown", function(e){
			console.log("KEYDOWN");
			console.log(e.keyCode);	
			});
			window.addEventListener("focusin", function(ev){
				console.log("WINDOW FOCUSIN OCCURED");
				console.log(ev);
				window.addEventListener("keyup", function(ev){
				console.log(ev.keyCode);
				console.log(ev.keyCode == cpr.events.KeyCode.TAB);	
				});
			});
			//window.addEventListener("focusout", function(ev){
			//	console.log("WINDOW FOCUSOUT OCCURED");
			//	console.log(ev);
			//});
			//window.addEventListener("keydown", function(e){
			//	console.log(e.key);
			//	console.log(e.keyCode);	
			//});
			function focusin(e){
				
			}
			function focusout(e){
				
			}
			
			function keydown(/* cpr.events.CKeyboardEvent */e){
				
				if(e.keyCode == cpr.events.KeyCode.TAB){
					
					
				}
			}
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				
				
			}
			
			
			/*
			 * 루트 컨테이너에서 focusin 이벤트 발생 시 호출.
			 * 컨트롤 및 컨트롤의 하위 요소가 포커스를 획득하기 직전 발생하는 이벤트.
			 */
			function onBodyFocusin(/* cpr.events.CFocusEvent */ e){
				
			//	console.log("FOCUS IN");
			//	console.log(e);
				console.log(e.nativeEvent.relatedTarget);
				app.getContainer().addEventListenerOnce("keyup", function(ev){
					console.log(ev.keyCode);
				});
			}
			
			
			/*
			 * 루트 컨테이너에서 focusout 이벤트 발생 시 호출.
			 * 컨트롤 밑 컨트롤의 하위 요소가 포커스를 잃기 직전 발생하는 이벤트.
			 */
			function onBodyFocusout(/* cpr.events.CFocusEvent */ e){
				
			//	console.log("FOCUS OUT");
			//	console.log(e);
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			container.addChild(inputBox_1, {
				"top": "50px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
			container.addChild(numberEditor_1, {
				"top": "80px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyFocusin == "function"){
				app.getContainer().addEventListener("focusin", onBodyFocusin);
			}
			if(typeof onBodyFocusout == "function"){
				app.getContainer().addEventListener("focusout", onBodyFocusout);
			}
		}
	});
	app.title = "FocusTester";
	cpr.core.Platform.INSTANCE.register(app);
})();

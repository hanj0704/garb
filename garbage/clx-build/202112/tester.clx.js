/*
 * App URI: 202112/tester
 * Source Location: 202112/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202112/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tester.js
			 * Created at 2021. 11. 29. 오후 1:05:43.
			 *
			 * @author HANS
			 ************************************************/
			
			
			
			/*
			 * "Button" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
				var a = "2021-11-29 15,11,21,098";
				
				var b = new Date(a);
				console.log(b);
				console.log(b.toDateString());
				
				var ex = /[^0-9\s\-]/g;
				var c = a.match(ex);
				c = _.uniq(c);
				
				console.log(c);
				
				console.log(a.replace(ex, ":"))
			}
			
			/**
			 * 
			 * @param {String} a
			 * @param {String} b
			 */
			function check1(a,b){
				
				var reg = new RegExp(a);
				reg.global = true;
				console.log(reg);
				console.log(b.match(reg));
				app.lookup("opt2").value = b.match(reg);
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb1ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb1 = e.control;
				check1(ipb1.value,app.lookup("ipb2").value);
			}
			
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb2ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb2 = e.control;
				check1(app.lookup("ipb1").value,ipb2.value);
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				app.lookup("ipb3").value = "가하하하";
			}
			
			
			/*
			 * "Button" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
				
				var a = false && true;
				
				console.log(a);
			}
			
			
			/*
			 * "Button" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn4Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn4 = e.control;
				
				console.log(app.getContainer().getAllRecursiveChildren());
				console.log(app.isEmbeddedAppInstance());
				app.getContainer().isFloated();
				
				app.lookup("grp1").getAllRecursiveChildren()
			}
			
			
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				
				app.getContainer().floatControl(app.lookup("btn5"),{
					left : "0px",
					top : "0px",
					width : "100px",
					height : "20px"
				});
				
				app.floatControl(app.lookup("btn8"),{
					left : "100px",
					top : "0px",
					width : "100px",
					height : "20px"
				});
			}
			
			
			/*
			 * "Button" 버튼(btn6)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn6Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn6 = e.control;
				
			//	console.log(app.getContainer().getAllRecursiveChildren());
			//	console.log(app.getFloatingControls());
				var child = app.getContainer().getAllRecursiveChildren();
				
				var rect = app.getContainer().getViewPortRect();
				console.log(rect.top);
				var a = child.reduce(function(a, b){
					var aRect = a.getActualRect();
					var bRect = b.getActualRect();
					return Math.abs(aRect.top) < Math.abs(bRect.top) ? a : b;
				});
				console.log(a);
				
			}
			
			function findClosest(){
				
				var floatingControls = app.getFloatingControls();
				
				if(floatingControls.length > 0) {
					
					var first = floatingControls.shift();
					if(first instanceof cpr.controls.Container) {
						return first.getChildren()[0];
					}
				}
			}
			
			
			function getSuperRecursive(){
			
				var vaFinalChild = [];
				var vaChilds = app.getContainer().getAllRecursiveChildren();
				
				vaChilds.forEach(function(each){
					
					if(each instanceof cpr.controls.EmbeddedApp) {
						
						var voTempAps = each.getEmbeddedAppInstance();
						var vaTempChild = voTempAps.getContainer().getAllRecursiveChildren();
						vaTempChild.forEach(function(eachT){
							vaFinalChild.push(eachT);
						});
					} else {
						
						vaFinalChild.push(each);
					}
				});
			
				return vaFinalChild;
			}
			
			
			
			
			/*
			 * "Button" 버튼(btn8)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn8Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn8 = e.control;
				
				console.log(btn8.getActualRect());
				console.log(btn8.getOffsetRect());
			}
			
			
			/*
			 * "DATE" 버튼(btn9)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn9Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn9 = e.control;
				/** @type String */
				var vsDateStr = "2021-11-12 11-11-33";
				var vsDateRegExp = /[^0-9\s\-]/g;
				var vaResult = vsDateStr.match(vsDateRegExp);
				if(vaResult != null && vaResult.length > 0) {
					vaResult.forEach(function(each){
						vsDateStr =vsDateStr.replace(each, ":");
					});
				}
				var dater = new Date(vsDateStr);
				console.log(dater);
			}
			
			
			/*
			 * "rect" 버튼(btn10)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn10Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn10 = e.control;
				
			//	console.log(btn10.getActualRect());
			//	console.log(cpr.core.Platform.INSTANCE.getAllLoadedApps());
			//	console.log(cpr.core.Platform.INSTANCE.getAllRunningAppInstances());
			}
			
			
			/*
			 * "Button" 버튼(btn11)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn11Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn11 = e.control;
				
				console.log(app.lookup("aa").value);
			}
			
			
			/*
			 * "Button" 버튼(btn12)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn12Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn12 = e.control;
				
				
				app.lookup("cal1").values  = ["zz",null];
				console.log(app.lookup("cal1").values);
			}
			
			
			/*
			 * "Button" 버튼(btn13)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn13Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn13 = e.control;
				
				console.log(app.lookup("cal1").values);
			}
			
			/*
			 * "join" 버튼(btn14)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn14Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn14 = e.control;
				var a = ["",""];
				console.log(a.join(","));
			
			}
			
			
			/*
			 * "moment hour" 버튼(btn15)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn15Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn15 = e.control;
				var a = "YYYY-MM-DD HH:mm:ss";
				
				var mo = moment().format(a);
				var mo2 = moment(mo,a);
				console.log(mo2);
				console.log(mo2.hour());
			}
			
			
			/*
			 * "Button" 버튼(btn17)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn17Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn17 = e.control;
				console.log(app.lookup("dti1").displayText);
				console.log(app.lookup("dti1").value);
				console.log(app.lookup("dti1").dateValue);
			}
			
			
			/*
			 * "Button" 버튼(btn16)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn16Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn16 = e.control;
				
				app.lookup("dti1").visible = !app.lookup("dti1").visible;
			}
			
			
			/*
			 * 인풋 박스에서 clear 이벤트 발생 시 호출.
			 * 인풋박스에서 esc키 또는 클리어버튼을 클릭하여 인풋의 값이 Clear될때 발생하는 이벤트
			 */
			function onIpb4Clear(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb4 = e.control;
				
			}
			
			
			/*
			 * "Button" 버튼(btn18)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn18Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn18 = e.control;
				
				var a = [1,2,3,4];
				
				console.log(a[6]);
				var b = a[6];
				
				console.log(b== null);
				console.log(b == "");
			}
			
			
			/*
			 * "Button" 버튼(btn19)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn19Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn19 = e.control;
				
				var a = "adsd";
				var tim = new Date(a);
			//	console.log(tim);
			//	console.log(typeof tim);
			//	console.log(tim == "Invalid Date");
				console.log(isNaN(tim.valueOf()))
			}
			
			
			/*
			 * "Button" 버튼(btn20)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn20Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn20 = e.control;
				var ds = app.lookup("ds1");
				
				var a = ds.findAllRow("true");
				
				console.log(a);
				a.forEach(function(each){
					console.log(typeof each);
					console.log(each);
				});
				ds.getRowDataRanged().forEach(function(each){
					console.log(typeof each);
					console.log(each);
				});
			//	a.forEach(function(each){
			//		each.
			//	});
			}
			
			
			
			
			/*
			 * 인풋 박스에서 keyup 이벤트 발생 시 호출.
			 * 사용자가 키에서 손을 뗄 때 발생하는 이벤트.
			 */
			function onIpb5Keyup(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb5 = e.control;
				
				
				
			}
			
			
			/*
			 * "Button" 버튼(btn21)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn21Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn21 = e.control;
				var CK  = new cpr.events.CKeyboardEvent("keyup",{
					key : "e",
				});
				
				app.lookup("ipb5").dispatchEvent(CK);
			}
			
			
			/*
			 * "Button" 버튼(btn22)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn22Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn22 = e.control;
				
				var a= encodeURI("한진");
				var b = unescape("%ED%95%9C%EC%A7%84");
				console.log(a);
				console.log(b);
			}
			var chartNeededProp = {
				
				"bar" : {
					property : ["grid","xAxis","yAxis","tooltip","series"]
				},
				"line" : {
					property : ["grid","xAxis","yAxis","tooltip","series","dataZoom"]
				},
				"scatter" : {
					property : ["xAxis","yAxis","series"]
				},
				"pie" : {
					property : ["title","tooltip","legend","series"]
				}
			}
			function abc(){
				return chartNeededProp["bar"].property;
			}
			
			var avc = {
				"A" : []
			}
			
			function ges(){
				
				return JSON.parse(JSON.stringify(avc["A"]))
			}
			/*
			 * "Button" 버튼(btn11)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn11Click2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn11 = e.control;
				var b = abc();
				
				b.push("ASDASD");
				console.log(b);
				console.log(chartNeededProp);
				console.log(ges());
				var c = [];
				
				console.log(JSON.stringify(c))
			}
			
			
			/*
			 * "func to str" 버튼(btn23)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn23Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn23 = e.control;
				
				console.log(JSON.stringify(ges));
			}
			
			
			/*
			 * "Button" 버튼(btn24)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn24Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn24 = e.control;
				
				var file = app.lookup("fi1").files;
				
				var sms = app.lookup("sms1");
				
				file.forEach(function(each,idx){
					
					sms.addFileParameter("file_"+idx, each);
				});
				
				sms.send();
			}
			
			
			/*
			 * 서브미션에서 submit-upload-progress 이벤트 발생 시 호출.
			 * multipart/form-data 일 때 서버로 일정 크기의 데이터를 전송했을 때 발생합니다. 하나의 요청에 대해 여러 번 발생할 수 있습니다.
			 */
			function onSms1SubmitUploadProgress(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms1 = e.control;
				console.log("UPLOAD PROGRESS");
				console.log(e.loaded);
				console.log(e.total);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "column63"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "column64"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55", "column6": "column65"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "column4": "column46", "column5": "column56", "column6": "column66"}
				]
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "cisweb/upload.do";
			submission_1.mediaType = "multipart/form-data";
			if(typeof onSms1SubmitLoadProgress == "function") {
				submission_1.addEventListener("submit-load-progress", onSms1SubmitLoadProgress);
			}
			if(typeof onSms1SubmitUploadProgress == "function") {
				submission_1.addEventListener("submit-upload-progress", onSms1SubmitUploadProgress);
			}
			if(typeof onSms1SubmitProgress == "function") {
				submission_1.addEventListener("submit-progress", onSms1SubmitProgress);
			}
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn2");
			button_1.value = "Button";
			if(typeof onBtn2Click == "function") {
				button_1.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "182px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button("btn4");
			button_2.value = "Button";
			if(typeof onBtn4Click == "function") {
				button_2.addEventListener("click", onBtn4Click);
			}
			container.addChild(button_2, {
				"top": "20px",
				"left": "292px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "202010/EK6rb7qWoAEyBCq.jpg";
			container.addChild(output_1, {
				"top": "50px",
				"left": "537px",
				"width": "245px",
				"height": "28px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			if(typeof onIpb1ValueChange == "function") {
				inputBox_1.addEventListener("value-change", onIpb1ValueChange);
			}
			container.addChild(inputBox_1, {
				"top": "73px",
				"left": "20px",
				"width": "362px",
				"height": "30px"
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"top": "88px",
				"left": "547px",
				"width": "196px",
				"height": "175px"
			});
			
			var inputBox_2 = new cpr.controls.InputBox("ipb2");
			if(typeof onIpb2ValueChange == "function") {
				inputBox_2.addEventListener("value-change", onIpb2ValueChange);
			}
			container.addChild(inputBox_2, {
				"top": "113px",
				"left": "20px",
				"width": "362px",
				"height": "34px"
			});
			
			var output_2 = new cpr.controls.Output("opt2");
			output_2.value = "Output";
			container.addChild(output_2, {
				"top": "157px",
				"left": "20px",
				"width": "362px",
				"height": "33px"
			});
			
			var button_3 = new cpr.controls.Button("btn3");
			button_3.value = "Button";
			if(typeof onBtn3Click == "function") {
				button_3.addEventListener("click", onBtn3Click);
			}
			container.addChild(button_3, {
				"top": "170px",
				"left": "392px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_3 = new cpr.controls.InputBox("ipb3");
			inputBox_3.inputFilter = "[^ㄱ-ㅎ가-힣ㅏ-ㅣ]*";
			container.addChild(inputBox_3, {
				"top": "200px",
				"left": "20px",
				"width": "362px",
				"height": "34px"
			});
			
			var button_4 = new cpr.controls.Button("btn1");
			button_4.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_4.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_4, {
				"top": "200px",
				"left": "392px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_5 = new cpr.controls.Button("btn5");
			button_5.value = "Button";
			container.addChild(button_5, {
				"top": "254px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_6 = new cpr.controls.Button("btn6");
			button_6.value = "Button";
			if(typeof onBtn6Click == "function") {
				button_6.addEventListener("click", onBtn6Click);
			}
			container.addChild(button_6, {
				"top": "273px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_7 = new cpr.controls.Button("btn7");
			button_7.value = "Button";
			container.addChild(button_7, {
				"top": "1149px",
				"left": "292px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_8 = new cpr.controls.Button("btn8");
			button_8.value = "Button";
			if(typeof onBtn8Click == "function") {
				button_8.addEventListener("click", onBtn8Click);
			}
			container.addChild(button_8, {
				"top": "254px",
				"left": "119px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_9 = new cpr.controls.Button("btn9");
			button_9.value = "DATE";
			if(typeof onBtn9Click == "function") {
				button_9.addEventListener("click", onBtn9Click);
			}
			container.addChild(button_9, {
				"top": "273px",
				"left": "119px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_10 = new cpr.controls.Button("btn10");
			button_10.value = "rect";
			if(typeof onBtn10Click == "function") {
				button_10.addEventListener("click", onBtn10Click);
			}
			container.addChild(button_10, {
				"top": "303px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var calendar_1 = new cpr.controls.Calendar("cal1");
			calendar_1.format = "YYYY-MM-DD hh:mm:ss";
			calendar_1.selectionType = "range";
			(function(calendar_1){
			})(calendar_1);
			container.addChild(calendar_1, {
				"top": "333px",
				"left": "20px",
				"width": "240px",
				"height": "270px"
			});
			
			var button_11 = new cpr.controls.Button("btn12");
			button_11.value = "Button";
			if(typeof onBtn12Click == "function") {
				button_11.addEventListener("click", onBtn12Click);
			}
			container.addChild(button_11, {
				"top": "583px",
				"left": "270px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_12 = new cpr.controls.Button("btn13");
			button_12.value = "Button";
			if(typeof onBtn13Click == "function") {
				button_12.addEventListener("click", onBtn13Click);
			}
			container.addChild(button_12, {
				"top": "564px",
				"left": "270px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_13 = new cpr.controls.Button("btn14");
			button_13.value = "join";
			if(typeof onBtn14Click == "function") {
				button_13.addEventListener("click", onBtn14Click);
			}
			container.addChild(button_13, {
				"top": "292px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_14 = new cpr.controls.Button("btn15");
			button_14.value = "moment hour";
			if(typeof onBtn15Click == "function") {
				button_14.addEventListener("click", onBtn15Click);
			}
			container.addChild(button_14, {
				"top": "292px",
				"left": "229px",
				"width": "100px",
				"height": "20px"
			});
			
			var dateInput_1 = new cpr.controls.DateInput("dti1");
			dateInput_1.hideButton = true;
			dateInput_1.mask = "HH:mm:ss";
			dateInput_1.format = "YYYY-MM-DD HH:mm:ss";
			container.addChild(dateInput_1, {
				"top": "20px",
				"left": "417px",
				"width": "162px",
				"height": "20px"
			});
			
			var button_15 = new cpr.controls.Button("btn16");
			button_15.value = "Button";
			if(typeof onBtn16Click == "function") {
				button_15.addEventListener("click", onBtn16Click);
			}
			container.addChild(button_15, {
				"top": "20px",
				"left": "589px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_16 = new cpr.controls.Button("btn17");
			button_16.value = "Button";
			if(typeof onBtn17Click == "function") {
				button_16.addEventListener("click", onBtn17Click);
			}
			container.addChild(button_16, {
				"top": "1px",
				"left": "589px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_4 = new cpr.controls.InputBox("ipb4");
			if(typeof onIpb4Clear == "function") {
				inputBox_4.addEventListener("clear", onIpb4Clear);
			}
			container.addChild(inputBox_4, {
				"top": "113px",
				"left": "438px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_17 = new cpr.controls.Button("btn18");
			button_17.value = "Button";
			if(typeof onBtn18Click == "function") {
				button_17.addEventListener("click", onBtn18Click);
			}
			container.addChild(button_17, {
				"top": "1px",
				"left": "781px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_18 = new cpr.controls.Button("btn19");
			button_18.value = "Button";
			if(typeof onBtn19Click == "function") {
				button_18.addEventListener("click", onBtn19Click);
			}
			container.addChild(button_18, {
				"top": "20px",
				"left": "781px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_19 = new cpr.controls.Button("btn20");
			button_19.value = "Button";
			if(typeof onBtn20Click == "function") {
				button_19.addEventListener("click", onBtn20Click);
			}
			container.addChild(button_19, {
				"top": "1px",
				"left": "880px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_5 = new cpr.controls.InputBox("ipb5");
			if(typeof onIpb5Keydown == "function") {
				inputBox_5.addEventListener("keydown", onIpb5Keydown);
			}
			if(typeof onIpb5Keyup == "function") {
				inputBox_5.addEventListener("keyup", onIpb5Keyup);
			}
			container.addChild(inputBox_5, {
				"top": "132px",
				"left": "781px",
				"width": "152px",
				"height": "39px"
			});
			
			var button_20 = new cpr.controls.Button("btn21");
			button_20.value = "Button";
			if(typeof onBtn21Click == "function") {
				button_20.addEventListener("click", onBtn21Click);
			}
			container.addChild(button_20, {
				"top": "170px",
				"left": "781px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_21 = new cpr.controls.Button("btn22");
			button_21.value = "Button";
			if(typeof onBtn22Click == "function") {
				button_21.addEventListener("click", onBtn22Click);
			}
			container.addChild(button_21, {
				"top": "20px",
				"left": "880px",
				"width": "100px",
				"height": "20px"
			});
			
			var group_2 = new cpr.controls.Container("grp2");
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			group_2.setLayout(flowLayout_1);
			(function(container){
				var button_22 = new cpr.controls.Button("btn11");
				button_22.value = "obj test";
				if(typeof onBtn11Click2 == "function") {
					button_22.addEventListener("click", onBtn11Click2);
				}
				container.addChild(button_22, {
					"width": "100px",
					"height": "20px"
				});
				var button_23 = new cpr.controls.Button("btn23");
				button_23.value = "func to str";
				if(typeof onBtn23Click == "function") {
					button_23.addEventListener("click", onBtn23Click);
				}
				container.addChild(button_23, {
					"width": "100px",
					"height": "20px"
				});
				var button_24 = new cpr.controls.Button("btn24");
				button_24.value = "Button";
				if(typeof onBtn24Click == "function") {
					button_24.addEventListener("click", onBtn24Click);
				}
				container.addChild(button_24, {
					"width": "100px",
					"height": "20px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "322px",
				"left": "369px",
				"width": "446px",
				"height": "330px"
			});
			
			var fileInput_1 = new cpr.controls.FileInput("fi1");
			fileInput_1.multiple = true;
			container.addChild(fileInput_1, {
				"top": "292px",
				"left": "578px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "뭉치";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202112/voTest
 * Source Location: 202112/voTest.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202112/voTest", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * voTest.js
			 * Created at 2021. 12. 10. 오후 4:59:39.
			 *
			 * @author HANS
			 ************************************************/
			
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				app.lookup("sms1").send();
			}
			
			
			/*
			 * "Button" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
				var sms2 = app.lookup("sms2");
				sms2.action = app.lookup("ipb6").value;
				sms2.send();
			}
			
			
			/*
			 * "Button" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
				
				var sms = app.lookup("sms3");
				
			//	sms.addParameter("code", "BLOD");
			//	sms.addParameter("codeNM", "하늘색");
			//	var a = {
			//		"code" : "BLUE",
			//		"codeNM" : "하늘색",
			//		"codeDiv": "COLOR"
			//	}
			//	sms.request
			//	sms.addParameter("data", JSON.stringify(a));
				sms.action = "http://localhost:8080/test/tes.do";
			//	sms.setRequestObject({
			//		"code" : "BLUE",
			//		"codeNM" : "하늘색",
			//		"codeDiv": "COLOR"
			//	});
				
				sms.setRequestEncoder(_requestEncoder);
				sms.send();
			}
			
			function _requestEncoder(sms,reqData){
				console.log(reqData);
				
				return {"content" :reqData["data"]["dsList"]};
			}
			
			/*
			 * 서브미션에서 before-submit 이벤트 발생 시 호출.
			 * 통신을 시작하기전에 발생합니다.
			 */
			function onSms3BeforeSubmit(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms3 = e.control;
				sms3.setDataRowHandler(function(/*cpr.protocols.DataSetRow*/rowData) {
					console.log(rowData);
					console.log(rowData.getColumnInfo());
					console.log(rowData.getDataSetInfo());
					return {};
				});
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21"},
					{"column1": "column12", "column2": "column22"},
					{"column1": "column13", "column2": "column23"},
					{"column1": "column14", "column2": "column24"},
					{"column1": "column15", "column2": "column25"},
					{"column1": "column16", "column2": "column26"},
					{"column1": "column17", "column2": "column27"},
					{"column1": "column18", "column2": "column28"},
					{"column1": "column19", "column2": "column29"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "/test/testVo.do";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.action = "/test/testHan.do";
			submission_2.addRequestData(dataMap_1);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms3");
			submission_3.action = "/test/tes.do";
			submission_3.mediaType = "application/json";
			submission_3.addRequestData(dataSet_1, cpr.protocols.PayloadType.all);
			if(typeof onSms3BeforeSubmit == "function") {
				submission_3.addEventListener("before-submit", onSms3BeforeSubmit);
			}
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("dsList"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "20px",
				"left": "20px",
				"width": "400px",
				"height": "200px"
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_1);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				inputBox_1.bind("value").toDataMap(app.lookup("dm1"), "column1");
				container.addChild(inputBox_1, {
					"width": "100px",
					"height": "20px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipb2");
				inputBox_2.bind("value").toDataMap(app.lookup("dm1"), "column2");
				container.addChild(inputBox_2, {
					"width": "100px",
					"height": "20px"
				});
				var inputBox_3 = new cpr.controls.InputBox("ipb3");
				inputBox_3.bind("value").toDataMap(app.lookup("dm1"), "column3");
				container.addChild(inputBox_3, {
					"width": "100px",
					"height": "20px"
				});
				var inputBox_4 = new cpr.controls.InputBox("ipb4");
				inputBox_4.bind("value").toDataMap(app.lookup("dm1"), "column4");
				container.addChild(inputBox_4, {
					"width": "100px",
					"height": "20px"
				});
				var inputBox_5 = new cpr.controls.InputBox("ipb5");
				inputBox_5.bind("value").toDataMap(app.lookup("dm1"), "column5");
				container.addChild(inputBox_5, {
					"width": "100px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "230px",
				"left": "20px",
				"width": "166px",
				"height": "198px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "430px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "Button";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_2, {
				"top": "483px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_6 = new cpr.controls.InputBox("ipb6");
			container.addChild(inputBox_6, {
				"top": "448px",
				"left": "20px",
				"width": "166px",
				"height": "25px"
			});
			
			var button_3 = new cpr.controls.Button("btn3");
			button_3.value = "Button";
			if(typeof onBtn3Click == "function") {
				button_3.addEventListener("click", onBtn3Click);
			}
			container.addChild(button_3, {
				"top": "50px",
				"left": "430px",
				"width": "100px",
				"height": "20px"
			});
		}
	});
	app.title = "voTest";
	cpr.core.Platform.INSTANCE.register(app);
})();

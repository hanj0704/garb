/*
 * App URI: 202103/tester
 * Source Location: 202103/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202103/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tester.js
			 * Created at 2021. 3. 3. 오후 3:57:58.
			 *
			 * @author HANS
			 ************************************************/
			
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				var dti = app.lookup("dti1");
				
				var a = moment(dti.value,"YYYYMMDD");
				
				var week = a.week() -a.startOf("month").week()+1;
				console.log(week);
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				console.log(String.fromCharCode(97,98,99));
			}
			
			
			
			
			
			/*
			 * 캘린더에서 before-navigate 이벤트 발생 시 호출.
			 * navigate 전에 발생하는 이벤트.
			 */
			function onCalendarBeforeNavigate(/* cpr.events.CDateEvent */ e){
				/** 
				 * @type cpr.controls.Calendar
				 */
				var calendar = e.control;
				console.log(moment(e.date).format("YYYYMMDD"));
				console.log(moment(calendar.current).format("YYYYMMDD"));
				if(moment(e.date).format("YYYYMMDD") == moment(calendar.current).format("YYYYMMDD")) {
					e.preventDefault();
				}
			}
			var aq=  0;
			
			function mouseMover(/* cpr.events.CMouseEvent */e){
				
				var mover = e.clientX;
				var delta = aq - mover;
				aq = mover;
				app.getContainer().updateConstraint(app.lookup("btn2"), {
					left : app.lookup("btn2").getActualRect().left - delta+"px"
				});
				
				if(app.lookup("btn2").getActualRect().left < 300) {
					console.log("ㅋㅋ 저에요");
					app.lookup("btn2").removeEventListener("mousemove", mouseMover);
					
					app.lookup("btn2").style.animateFrom({
					"transform" : "translate3d(300px,0px,0px)"
					});
					app.getContainer().updateConstraint(app.lookup("btn2"), {
						left : "0px"
					});
			//		e.stopPropagation();
			//		e.preventDefault();
				}
				 
			}
			
			/*
			 * "Button" 버튼(btn2)에서 mousedown 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 위에 포인터를 위치한 상태로 마우스 버튼을 누를 때 발생하는 이벤트.
			 */
			function onBtn2Mousedown(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				console.log(e.clientX);
				aq = e.clientX;
				btn2.addEventListener("mousemove", mouseMover);
					
				btn2.addEventListener("mouseup", function(e){
					
					btn2.removeEventListener("mousemove", mouseMover);
				});
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				var mdi = app.lookup("mdi1");
				
				var item = mdi.getTabItems()[2];
				/** @type cpr.controls.EmbeddedApp */
				var cont = item.content;
				app.getContainer().floatControl(cont,{
					"left" : "0px",
					"top" : "300px",
					"width" : "500px",
					"height" : "500px"
				});
				
			//	cpr.core.App.load("202102/gridTest", function(loadedApp){
			//		cont.app = loadedApp;
			//	});
			}
			
			
			/*
			 * "Button" 버튼(btn13)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn13Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn13 = e.control;
				
				app.lookup("mdi1").visible = false;
			}
			
			
			/*
			 * "Button" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
				var btn = new cpr.controls.Button("zz");
				btn.value = "zz";
				app.lookup("grp1").addChild(btn, {
					"width" : "98%",
					"height":"99%",
					"autoSize":"none"
				});
				var index = 0;
				app.lookup("grp1").reorderChild(btn, index);
				
				
				cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(){
			//		btn.style.animateTo({
			//			"transform": "translateX(-400px)",
			//			"box-shadow": "none"
			//		}, 0.35);
			//		app.lookup("btn2").style.animateTo({
			//			"transform" : "translateX(0)"
			//		});
			//		var children = app.lookup("grp1").getChildren();
			//		children.splice(index,1)
			//		
			//		children.forEach(function(each){
			//			each.dispose();
			//		});
				});
			}
			
			/*
			 * "Button" 버튼(btn5)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn5Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn5 = e.control;
				
				var bt = app.lookup("btn6");
				var cont = app.getContainer();
				
				bt.style.animateFrom({
					"transform" : "translate3d(-230px,0px,0px)"
				},0.5,cpr.animation.TimingFunction.EASE_IN);
				
				cont.floatControl(bt,{
					"left" : "-330px",
					"top" : "62px",
					"width" : "330px",
					"height" : "91px"
				});
				app.getContainer().updateConstraint(bt, {
					"left" : "150px"
				});
			}
			
			
			/*
			 * "Button" 버튼(btn7)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn7Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn7 = e.control;
				var grp = app.lookup("grp1");
				
				var ctrl = grp.getChildren()[0];
				console.log(ctrl.value);
				
				grp.updateConstraint(ctrl, {
					"width":"95%"
				});
			}
			
			var han = 0;
			function mm (e){
				
				var mov = e.clientX;
				var delta = han - mov;
			//	han = mov;
				console.log(delta);
			//	app.lookup("grp1").adjustScroll(delta, 0);
				var left = app.lookup("zz");
				var right = app.lookup("btn2");
				left.style.css("transform", "translateX("+(-1*delta)+ "px)");
				right.style.css("transform", "translateX(" + (-1*delta) + "px)");
			}
			/*
			 * "Button" 버튼(btn1)에서 mousedown 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 위에 포인터를 위치한 상태로 마우스 버튼을 누를 때 발생하는 이벤트.
			 */
			function onBtn1Mousedown(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				han = e.clientX;
				btn1.addEventListener("mousemove", mm);
				btn1.addEventListenerOnce("mouseup", function(ev){
					
					btn1.removeEventListener('mousemove', mm);
				})
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				
			//	var a = app.lookup("tre1").getItem(0).children;
			//	console.log(a);
				var ipb = app.lookup("ipb1");
				
				ipb.setSelection({start:4,end:4});
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var ipb = app.lookup("ipb2");
				
				console.log(encodeURI(ipb.value));
				
			}
			function abcc(){
				this.aq = 5;
			}
			
			abcc.prototype.hey = function(a){
				if(a < 5) {
					console.log("zz");
					console.log(this);
					this.aq = 4;
					this.hey.call(this, 4);
				}
			}
				var a = new abcc();
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
			//	function example() {
			//  console.log(Array.prototype.join.call(arguments));
			//}
			//example(1, 'string', true); 
				
				
				a.hey(3);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"},
					{"name": "column12"},
					{"name": "column13"},
					{"name": "column14"},
					{"name": "column15"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31"},
					{"column1": "column12", "column2": "ppt에서 작성된 컬럼과 행의 수는 20column * 200,000 row 였으나, excel에 작성된 기준으로는 테이블로 100 column에 최대 100,000개의 row를 가지고 있기 때문에, 20*200000 =400만 셀의 갯수를 맞추기 위해, 그리드당 컬럼 100개에 행 4만건을 조회하는 것을 기준으로 작성됨zzzzzzzzzzzzzzzzㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ", "column3": "column32"},
					{"column1": "column13", "column2": "column23", "column3": "column33"},
					{"column1": "column14", "column2": "column24", "column3": "column34"},
					{"column1": "column15", "column2": "column25", "column3": "column35"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsLIst");
			dataSet_3.parseData({
				"columns": [
					{"name": "MAIN_CATEGORY"},
					{"name": "TITLE"},
					{"name": "TOOLTIP"},
					{"name": "FUNC_PROVIDE"}
				],
				"rows": [
					{"MAIN_CATEGORY": "설문결과추세화면", "TITLE": "기능 검증", "TOOLTIP": "그리드 내에 높은 비율로 소팅시 높은순으로 3개의 설문항목 앞에 이미지로 1~3 표시가 가능한지", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "설문결과추세화면", "TITLE": "기능 검증", "TOOLTIP": "그리드 내의 값에 상단은 %로, 하단은 건수 값을 나타낼 수 있는지", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "영업사원데모계획", "TITLE": "기능 검증", "TOOLTIP": "순번이 5개가 초과할 경우, 해당 데모명에 스크롤 표시가 가능한지", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "영업사원데모계획", "TITLE": "기능 검증", "TOOLTIP": "월의 좌우 구역에 화살표를 두어, 전월과 다음월을 이동할 수 있는지", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "영업사원데모계획", "TITLE": "기능 검증", "TOOLTIP": "화면처럼 행에 바 형태의 이미지 표시가 가능한지", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "영업사원데모계획", "TITLE": "추가 기능", "TOOLTIP": "각 월별 주차당 일 수에 따라 주차별 크기 별도 지정 기능", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "수금관리", "TITLE": "기능 검증", "TOOLTIP": "N개의 탭 구현이 가능한지", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "수금관리", "TITLE": "기능 검증", "TOOLTIP": "하단 우측 그리드에서 총3개의 그리드가 나오는데, 그림처럼 화면에 뿌려지는 순서가 제일 좌측 그리드 부터 순서적으로 화면에 뿌려지는게 가능한지, N업 그리드", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "수금관리", "TITLE": "기능 검증", "TOOLTIP": "하단 좌측 그리드에서 값중 서울동부를 더블클릭시 서울동부 밑에 있는 지점별 SUM이 해당 그리드에 나오게 할 수 있는지", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "수금관리", "TITLE": "추가 기능", "TOOLTIP": "차트를 선택하여 서울 동부 밑에 있는 지점별 SUM이 해당 그리드에 나오게 하는 기능", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "개발생산성화면", "TITLE": "기능 검증", "TOOLTIP": "100개의 컬럼을 가진 테이블 5개를 생성하기", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "개발생산성화면", "TITLE": "기능 검증", "TOOLTIP": "화면에 1번째 열은 사업자 번호 포맷, 2~4번째 열은 전화번호 포맷, 5~9번은 천원 단위 포맷, 10~14번은 날짜 포맷, 15번은 콤보 형식, 16번은 라디오버튼, 17번은 툴팁을 사용하여 그리드로 데이터 표현하기", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "개발생산성화면", "TITLE": "기능 검증", "TOOLTIP": "합계와 소계의 행 색상은 초록, font는 굵게, 붉은색으로 통일", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "개발생산성화면", "TITLE": "기능 검증", "TOOLTIP": "그리드의 헤더 1번행, 5~6번행에 소팅 걸기", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "개발생산성화면", "TITLE": "기능 검증", "TOOLTIP": "각각의 그리드의 맨 앞에 ROW 수를 보여주는 보여주는 임시 컬럼 생성", "FUNC_PROVIDE": "솔루션 기능"},
					{"MAIN_CATEGORY": "개발생산성화면", "TITLE": "확인", "TOOLTIP": "ppt에서 작성된 컬럼과 행의 수는 20column * 200,000 row 였으나, excel에 작성된 기준으로는 테이블로 100 column에 최대 100,000개의 row를 가지고 있기 때문에, 20*200000 =400만 셀의 갯수를 맞추기 위해, 그리드당 컬럼 100개에 행 4만건을 조회하는 것을 기준으로 작성됨", "FUNC_PROVIDE": ""}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsTree");
			dataSet_4.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "label1", "value": "1", "parent": ""},
					{"label": "label2", "value": "2", "parent": "1"},
					{"label": "label3", "value": "3", "parent": "1"},
					{"label": "label4", "value": "4", "parent": "1"},
					{"label": "label5", "value": "5", "parent": "1"}
				]
			});
			app.register(dataSet_4);
			var submission_1 = new cpr.protocols.Submission("sms1");
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.addResponseData(dataSet_1, false);
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.animationDuration = 0.35;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.animationDuration = 0.35;
			flowLayout_1.horizontalSpacing = 0;
			flowLayout_1.verticalSpacing = 0;
			flowLayout_1.lineWrap = false;
			group_1.setLayout(flowLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btn2");
				button_1.value = "1";
				container.addChild(button_1, {
					"width": "98%",
					"height": "99%"
				});
				var button_2 = new cpr.controls.Button("btn4");
				button_2.value = "2";
				container.addChild(button_2, {
					"autoSize": "none",
					"width": "333px",
					"height": "400px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "325px",
				"left": "240px",
				"width": "340px",
				"height": "404px"
			});
			
			var button_3 = new cpr.controls.Button("btn3");
			button_3.value = "Button";
			if(typeof onBtn3Click == "function") {
				button_3.addEventListener("click", onBtn3Click);
			}
			container.addChild(button_3, {
				"top": "306px",
				"left": "141px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_4 = new cpr.controls.Button("btn5");
			button_4.value = "Button";
			if(typeof onBtn5Click == "function") {
				button_4.addEventListener("click", onBtn5Click);
			}
			container.addChild(button_4, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_5 = new cpr.controls.Button("btn6");
			button_5.value = "Button";
			container.addChild(button_5, {
				"top": "62px",
				"left": "20px",
				"width": "110px",
				"height": "91px"
			});
			
			var button_6 = new cpr.controls.Button("btn7");
			button_6.value = "Button";
			if(typeof onBtn7Click == "function") {
				button_6.addEventListener("click", onBtn7Click);
			}
			container.addChild(button_6, {
				"top": "306px",
				"left": "240px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_7 = new cpr.controls.Button("btn1");
			button_7.value = "Button";
			if(typeof onBtn1Mousedown == "function") {
				button_7.addEventListener("mousedown", onBtn1Mousedown);
			}
			if(typeof onBtn1Click4 == "function") {
				button_7.addEventListener("click", onBtn1Click4);
			}
			container.addChild(button_7, {
				"top": "181px",
				"left": "140px",
				"width": "579px",
				"height": "99px"
			});
			
			var tree_1 = new cpr.controls.Tree("tre1");
			(function(tree_1){
				tree_1.setItemSet(app.lookup("dsTree"), {
					"label": "label",
					"value": "value",
					"parentValue": "parent"
				});
			})(tree_1);
			container.addChild(tree_1, {
				"top": "5px",
				"left": "141px",
				"width": "267px",
				"height": "148px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.value = "asdasd";
			container.addChild(inputBox_1, {
				"top": "86px",
				"left": "590px",
				"width": "352px",
				"height": "74px"
			});
			
			var listBox_1 = new cpr.controls.ListBox("lbx1");
			(function(listBox_1){
			})(listBox_1);
			container.addChild(listBox_1, {
				"top": "306px",
				"left": "679px",
				"width": "100px",
				"height": "150px"
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			comboBox_1.maxVisibleItems = 4;
			(function(comboBox_1){
				comboBox_1.addItem(new cpr.controls.Item("label1", "value1"));
				comboBox_1.addItem(new cpr.controls.Item("label2", "value2"));
				comboBox_1.addItem(new cpr.controls.Item("label3", "value3"));
				comboBox_1.addItem(new cpr.controls.Item("label4", "value4"));
				comboBox_1.addItem(new cpr.controls.Item("label5", "value5"));
				comboBox_1.addItem(new cpr.controls.Item("label6", "value6"));
				comboBox_1.addItem(new cpr.controls.Item("label7", "value7"));
			})(comboBox_1);
			container.addChild(comboBox_1, {
				"top": "290px",
				"left": "803px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_2 = new cpr.controls.InputBox("ipb2");
			container.addChild(inputBox_2, {
				"top": "181px",
				"left": "803px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_8 = new cpr.controls.Button();
			button_8.value = "Button";
			if(typeof onButtonClick == "function") {
				button_8.addEventListener("click", onButtonClick);
			}
			container.addChild(button_8, {
				"top": "251px",
				"left": "789px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_9 = new cpr.controls.Button();
			button_9.value = "Button";
			if(typeof onButtonClick2 == "function") {
				button_9.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_9, {
				"top": "181px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

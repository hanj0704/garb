/*
 * App URI: 202003/treechartSample
 * Source Location: 202003/treechartSample.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202003/treechartSample", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * treechartSample.js
			 * Created at 2020. 2. 21. 오전 10:18:48.
			 *
			 * @author HANS
			 ************************************************/
			var treeChart = null;
			/**
			 * 전달받은 데이터로 echart의 option을 생성하여 차트를 그리는 함수입니다.
			 * @param {Object} poData 데이터객체
			 */
			function drawChart(poData){
				var option = {
			    tooltip: {
			        trigger: 'item',
			        triggerOn: 'mousemove'
			    },
			    series:[
			        {
			            type: 'tree',
			
			            name: 'tree1',
			
			            data: [poData],
			
			            top: '5%',
			            left: '7%',
			            bottom: '2%',
			            right: '60%',
			
			            symbolSize: 7,
			
			            label: {
			                position: 'left',
			                verticalAlign: 'middle',
			                align: 'right'
			            },
			
			            leaves: {
			                label: {
			                    position: 'right',
			                    verticalAlign: 'middle',
			                    align: 'left'
			                }
			            },
			
			            expandAndCollapse: true,
			
			            animationDuration: 550,
			            animationDurationUpdate: 750
			
			        }
			    ]
			};
			
			
				treeChart.setOption(option);
			};
			
			
			function resizeChart(){
				if(treeChart){
					treeChart.resize();
				}
			}
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				
				var shellDiv = e.content;
				if(shellDiv){
					var instance = echarts.getInstanceByDom(shellDiv);
					if(instance){
						instance.dispose();
					}
				}
				if(!e.content){
					window.addEventListener("resize",function(){resizeChart()});
				}
			}
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shl1 = e.control;
				treeChart = echarts.init(e.content);
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				app.lookup("matrixsubmission1").send();
			}
			
			
			/*
			 * 매트릭스 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onMatrixsubmission1SubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.MatrixSubmission
				 */
				var matrixsubmission1 = e.control;
				
				var vsResponseText = matrixsubmission1.xhr.responseText;
				var voResponseJSON = JSON.parse(vsResponseText);
			
				drawChart(voResponseJSON);	
			};
			// End - User Script
			
			// Header
			var matrixSubmission_1 = new cpr.protocols.MatrixSubmission("matrixsubmission1");
			matrixSubmission_1.async = true;
			matrixSubmission_1.withCredentials = false;
			matrixSubmission_1.method = "post";
			matrixSubmission_1.action = "datas/ndepthJson.json";
			matrixSubmission_1.setProtocolDataModel(new cpr.protocols.matrix.MatrixDataModel({
				"request": {
					"format": "object",
					"data": {}
				},
				"response": {
					"format": "object",
					"data": {}
				}
			}));
			if(typeof onMatrixsubmission1SubmitSuccess == "function") {
				matrixSubmission_1.addEventListener("submit-success", onMatrixsubmission1SubmitSuccess);
			}
			app.register(matrixSubmission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			container.addChild(uIControlShell_1, {
				"top": "20px",
				"left": "20px",
				"width": "984px",
				"height": "531px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "트리차트예제";
	cpr.core.Platform.INSTANCE.register(app);
})();

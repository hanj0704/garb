/*
 * App URI: UnfiedArchive/ButtonCollection
 * Source Location: UnfiedArchive/ButtonCollection.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("UnfiedArchive/ButtonCollection", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * ButtonCollection.js
			 * Created at 2021. 12. 14. 오후 1:25:08.
			 *
			 * @author HANS
			 ************************************************/
			function setCookie(cName, cValue, cDay){
			var expire = new Date();
			expire.setDate(expire.getDate() + cDay);
			cookies = cName + '=' + escape(cValue) + '; path=/ '; // 한글 깨짐을 막기위해 escape(cValue)를 합니다.
			if(typeof cDay != 'undefined') cookies += ';expires=' + expire.toGMTString() + ';';
			document.cookie = cookies;
			}
			
			
			/*
			 * "시간 문자열인지 체크하는로직" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				var vsDateRegExp = /[^0-9\s\-]/g;
				var vsTimeStr = "2021-12-14 13:26/22";
				
				console.log(vsTimeStr.match(vsDateRegExp));
			}
			
			
			/*
			 * "withCredential send" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				/**
				 * CORS와 인증정보를 넘기는 withCredentials를 같이 사용할 경우가 발생할때는
				 * Access-Control-Allow-Origin에 wildcard *를 사용하면 preflight에서 실패가 내려오게된다.
				 * Access-Control-Allow-Origin에 특정 오리진에 대한 정보를 작성하는거보단, servletrequest에 인증정보와 관련된 쿠키 헤더가 있으면 그부분에서
				 * 분기를 나눠주는게 좋아보임
				 * 
				 * CORS에 대한 preflight는 http method가 options으로 넘어간다.
				 * 이를 메서드타입을 분리하여 필터를 작성할 수도 있는것같아보이며 서버가 허용할 response header정보를 내려서 사용할 수 있을듯함.
				 * 
				 * withCredentials는 인증정보등을 담은 cookie 헤더를 request에 함께 보내야할때 사용하는 옵션으로
				 * 자신 도메인으로 선언되어있는 쿠키 정보를 다 넘기는것으로 보임,아마 로그인했을때, 서버에서 유저세션을 만들면서 내리는 세션 혹은 쿠기를 브라우저에 담아뒀다가,
				 * 다른 도메인의 화면을 열 때, withCredentials를 보내서 그 도메인상에서도 로그인정보를 활용해야할 경우에 대해서 사용할 수 있음.
				 * response헤더에서도Access-Control-Allow-Credentials 에 true값을 집어넣어줘야 쿠키헤더를 담을 수 있다.
				 * 
				 * 
				 */
				var sub = new cpr.protocols.Submission();
				
				sub.action  = "http://localhost:8090/test/testVo.do";
				sub.withCredentials = true;
				
				sub.send();
			}
			
			
			/*
			 * "voDataSend" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
				/**
				 * vo로 데이터를 관리하기 위해서는, jackson을 messageConverter로 설정해야하며,
				 * ResponseBody에서 vo로 파라미터를 받게 설정할 수 있다.
				 * vo로 받는 값들은 동일한 key를 가지고있는 json 혹은 jsonArray이어야 하기 때문에, 클라이언트 쪽에서
				 * requestEncoder를 사용하여, data 혹은 데이터셋맵 아이디의 alias를 필요에 따라 벗겨내서 사용해야 한다.
				 * response도 마찬가지로 설정해야 할듯하며, mediaType이 application/json인 경우에 대해서만 jackson이 인식할 수 있기 떄문에
				 * 이를 잘 확인해야함
				 * List로 데이터를 받기 위해서는 ResposneBody에 List<VO>를 사용하면 되며
				 * garbage-webs에서 vo를 설정할때는 lombok의 getter,setter annotation을 사용하여 함수를 따로 선언해서 사용하지 않아도 된다.
				 * jackson버전을 맞추는것에 대해서 에러가 발생할 수 있으며, 동일한 라이브러리가 충돌할때도 에러가 발생할 수 있음.
				 * 서브미션에서 addParameter로 파라미터를 추가시키는 경우는 json데이터가 array로 한번 감싸져서 데이터가 보내짐
				 */
				app.lookup("sms1").send();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21"},
					{"column1": "column12", "column2": "column22"},
					{"column1": "column13", "column2": "column23"},
					{"column1": "column14", "column2": "column24"},
					{"column1": "column15", "column2": "column25"},
					{"column1": "column16", "column2": "column26"},
					{"column1": "column17", "column2": "column27"},
					{"column1": "column18", "column2": "column28"},
					{"column1": "column19", "column2": "column29"}
				]
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "test/tes.do";
			submission_1.addRequestData(dataSet_1, cpr.protocols.PayloadType.all);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.horizontalSpacing = 20;
			flowLayout_1.verticalSpacing = 20;
			flowLayout_1.leftMargin = 20;
			flowLayout_1.rightMargin = 20;
			flowLayout_1.topMargin = 20;
			flowLayout_1.bottomMargin = 20;
			container.setLayout(flowLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "시간 문자열인지\r\n체크하는로직";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"width": "200px",
				"height": "40px"
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "withCredential send";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_2, {
				"autoSize": "none",
				"width": "200px",
				"height": "40px"
			});
			
			var button_3 = new cpr.controls.Button("btn3");
			button_3.value = "voDataSend";
			if(typeof onBtn3Click == "function") {
				button_3.addEventListener("click", onBtn3Click);
			}
			container.addChild(button_3, {
				"autoSize": "none",
				"width": "200px",
				"height": "40px"
			});
		}
	});
	app.title = "ButtonCollection";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202009/ExcelExport
 * Source Location: 202009/ExcelExport.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202009/ExcelExport", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * ExcelExport.js
			 * Created at 2020. 7. 17. 오후 5:02:07.
			 *
			 * @author csj
			 ************************************************/
			
			
			/////////////////////////////////////////////////////////////////////
			
			var mnStartNm = 1;
			var mnAddScrollCount = 30;
			var mnScrollCount = 0;
			var _data ;
			var sendData;
			var responseData;
			
			/*
			 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
			 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFi1ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.FileInput
				 */
				var fi1 = e.control;
				
				importExcel(fi1);
			
			}
			
			
			/**
			 * 
			 * @param {cpr.controls.FileInput} file
			 */
			function importExcel(file){
				sendData = moment().valueOf();	
				
				var reader = new FileReader();	
				
				reader.onload = function(e){
					var data = e.target.result;
					
					var workbook = XLSX.read(data , {type : 'binary'});
					
					workbook.SheetNames.forEach(function(item, index){
						ws = workbook.Sheets[item];
						var range = XLSX.utils.decode_range(workbook.Sheets[item]['!ref']); 
						
						//스크롤을 사용하기 위한 범위 설정 s.r = start row , e.r = end row
						//range.s.r = mnStartNm + mnAddScrollCount * mnScrollCount;
						//range.e.r = mnAddScrollCount + parseInt(range.s.r) - 1;
						
						range.s.r = 1;
						
						//1. 엑셀시트에서 첫번째 헤더값 가져오는거
			//			var header = []
			//			var columnCount = XLSX.utils.decode_range(ws['!ref']).e.c + 1
			//			for (var i = 0; i < columnCount; ++i) {
			//				header[i] = ws[`${XLSX.utils.encode_col(i)}1`].v
			//			}
						//2. 데이터셋에서 컬럼이름 가져오는거
						var _header = app.lookup("dsList").getColumnNames();
						var EXCEL_JSON ; 
						if(mnScrollCount == 0){
							EXCEL_JSON = XLSX.utils.sheet_to_json(ws, {range : range, header: _header });
						}else{
							EXCEL_JSON = XLSX.utils.sheet_to_json(ws, {range : range, header: _header , skipHeader: 1 });
						}
						
						_data = EXCEL_JSON;
						
						
						
					});
				};
				
				reader.onloadend = function(e){		
					app.lookup("grd1").dataSet.build(_data,true);
					app.lookup("grd1").redraw();
					responseData = moment().valueOf() - sendData;
					console.log("걸린시간 :" + (moment.duration(responseData) / 1000));
				};
					
				reader.readAsBinaryString(file.file);		
			}
			
			
			
			
			/*
			 * 그리드에서 scroll 이벤트 발생 시 호출.
			 * 그리드 디테일 컨텐츠가 스크롤될 때 발생하는 이벤트.
			 */
			function onGrd1Scroll(/* cpr.events.CScrollEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
			
			//	if(e.scrollTop == e.maxScrollTop){
			//		mnScrollCount+= 1;
			//		importExcel(app.lookup("fi1"));
			//	}
				
				
				
			
				
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsList");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"},
					{"name": "column12"},
					{"name": "column13"},
					{"name": "column14"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("dsList"),
				"columns": [
					{"width": "50px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.targetColumnName = "column6";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.targetColumnName = "column7";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.targetColumnName = "column8";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.targetColumnName = "column9";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column9";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.targetColumnName = "column10";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column10";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 11},
							"configurator": function(cell){
								cell.targetColumnName = "column11";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column11";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 12},
							"configurator": function(cell){
								cell.targetColumnName = "column12";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column12";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 13},
							"configurator": function(cell){
								cell.targetColumnName = "column13";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column13";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 14},
							"configurator": function(cell){
								cell.targetColumnName = "column14";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column14";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "rowindex";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.columnName = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.columnName = "column9";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.columnName = "column10";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 11},
							"configurator": function(cell){
								cell.columnName = "column11";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 12},
							"configurator": function(cell){
								cell.columnName = "column12";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 13},
							"configurator": function(cell){
								cell.columnName = "column13";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 14},
							"configurator": function(cell){
								cell.columnName = "column14";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "46px",
				"right": "20px",
				"bottom": "22px",
				"left": "20px"
			});
			
			var fileInput_1 = new cpr.controls.FileInput("fi1");
			if(typeof onFi1ValueChange == "function") {
				fileInput_1.addEventListener("value-change", onFi1ValueChange);
			}
			container.addChild(fileInput_1, {
				"top": "17px",
				"right": "21px",
				"width": "306px",
				"height": "20px"
			});
		}
	});
	app.title = "ExcelExport";
	cpr.core.Platform.INSTANCE.register(app);
})();

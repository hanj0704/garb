/*
 * App URI: 202009/tester
 * Source Location: 202009/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202009/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			
			/**
			 * 
			 * @param {cpr.controls.Grid} grd
			 * @param {"cell" | "row" | "column"} selUnit
			 */
			function copyHtml(grd, selUnit) {
				var tagArr = null;
				switch(selUnit) {
					case "cell" : {
						tagArr = copyCellHtml(grd);
						break;
					}
					case "row" : {
						// TODO implements
					}
					case "column" : {
						// TODO implements
					}
				}
			
				var clipTag = getClipboardNode();
				var tblTag = clipTag.firstElementChild;
				tblTag.innerHTML = tagArr.join("");
				tagArr = null;
				
				var selection = window.getSelection();
				selection.removeAllRanges();
				
				var isIE = (cpr.core.Platform.INSTANCE.browserInfo.name == "ie");
				if(isIE) {
					var range = document.createRange();
			    	range.selectNode(tblTag);
			    	selection.addRange(range);
				} else {
					selection.selectAllChildren(tblTag);
				}
				
				document.execCommand("copy");
				
				selection.removeAllRanges();
				
				/* 클립보드 태그 삭제 (스크롤 방지) */
				var clipTag = document.getElementById("gridClipboard");
				document.body.removeChild(clipTag);
			}
			
			function getClipboardNode() {
				var clipTag = document.getElementById("gridClipboard");
				if(!clipTag) {
					clipTag = document.createElement("div");
					clipTag.id = "gridClipboard";
					clipTag.style.width = "1px";
					clipTag.style.height = "1px";
					clipTag.style.overflow = "hidden";
					
					var tblTag = document.createElement("table");
					clipTag.appendChild(tblTag);
					
					clipTag = document.body.appendChild(clipTag);
				}
				
				return clipTag;
			}
			
			var encoder = $ESAPI.encoder();
			
			function copyCellHtml(/* cpr.controls.Grid */ grd) {
				var htmlText = ["<tr>"];
				var pos = grd.getSelectedCellIndices();
				var oldRowIdx = -1;
				for(var idx = 0; idx < pos.length; idx++) {
					/** 
				     * @type cpr.controls.gridpart.selection.CellPosition
				    */
					var p = pos[idx];
					var cellIdx = p.cellIndex;
					var rowIdx = p.rowIndex;
					
					if(oldRowIdx == -1) {
						oldRowIdx = rowIdx;
					} else if(oldRowIdx !== rowIdx) {
						oldRowIdx = rowIdx;
						htmlText[htmlText.length] = "</tr><tr>";
					}
					
					var data = grd.getCellText(rowIdx, cellIdx);
					data = data ? encoder.encodeForHTML(data) : "";
					
					htmlText[htmlText.length] = "<td>";
					htmlText[htmlText.length] = data;
					htmlText[htmlText.length] = "</td>";
				}
				
				htmlText[htmlText.length] = "</tr>";
				
				return htmlText;
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
			}
			
			
			/*
			 * "Button" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
			//	app.lookup("grd1").addColumn({
			//		columnLayout: [{
			//			width: "100px"
			//		}],
			//		header : [{
			//			constraint: {
			//				rowIndex : 0,
			//				colIndex : 3
			//			},
			//			configurator: function(cell){
			//				cell.text = "headerText";
			//			}
			//		}],
			//		detail: [{
			//			constraint: {
			//				rowIndex : 0,
			//				colIndex : 3
			//			},
			//			configurator: function(cell){
			//				cell.columnName = "column4";
			//			}
			//		}]
			//	});
			
			ExcelUtil.exportExcelToJSON("EXCEL_TEST.xls", "hey", app.lookup("grd1"));
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				for(var i = 0 ; i < 100 ; i++)
				app.lookup("mdi1").addItemWithApp("202002/tester");
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			//	app.lookup("sms4").send();
			
			}
			
			
			var copyOption;
			/*
			 * 그리드에서 copy 이벤트 발생 시 호출.
			 * Grid의 선택된 요소를 ctrl + c 로 복사했을 때 발생하는 이벤트.
			 */
			function onGrd1Copy(/* cpr.events.CGridEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				if (copyOption == "office"){
					console.log("ㅋㅋ");
					var selUnit = grd1.selectionUnit;
					
					e.preventDefault();
					
					copyHtml(grd1, selUnit);
				}
			}
			
			
			/*
			 * 그리드에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrd1Keydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				if(e.ctrlKey && e.altKey &&e.keyCode == "67"){
				
					copyOption = "office";		
				}
				if(e.ctrlKey && e.keyCode =="67" && !e.altKey) {
					
					copyOption = "common";
				}
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				console.log(app.lookup("asd").type);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
					
					
			//	var a = [1,2,3,4,5,76];
			//	
			//	console.log(a.shift());
			//	console.log(a);
				
				var fi1 = new cpr.controls.FileInput("aa");
				
				app.getContainer().addChild(fi1, {
					
					"left":"0px",
					"top":"0px",
					"width":"1px",
					"height":"1px"
				});
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("helloWorld", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41"},
					{"column1": "column11", "column2": "column21", "column3": "column32", "column4": "column42"},
					{"column1": "column11", "column2": "column21", "column3": "column33", "column4": "column43"},
					{"column1": "column11", "column2": "column21", "column3": "column34", "column4": "column44"},
					{"column1": "column15", "column2": "column21", "column3": "column35", "column4": "column45"},
					{"column1": "column15", "column2": "column21", "column3": "column36", "column4": "column46"},
					{"column1": "column17", "column2": "column21", "column3": "column37", "column4": "column47"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds3");
			dataSet_3.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "label1", "value": "column21", "parent": "0"},
					{"label": "label2", "value": "column22", "parent": "1"},
					{"label": "label3", "value": "column23", "parent": "1"},
					{"label": "label4", "value": "column24", "parent": "1"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("ds4");
			dataSet_4.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{
						"name": "column9",
						"dataType": "string"
					},
					{
						"name": "column10",
						"dataType": "number"
					},
					{
						"name": "column11",
						"dataType": "number"
					},
					{"name": "column12"},
					{
						"name": "column13",
						"dataType": "number"
					},
					{"name": "column14"},
					{
						"name": "column15",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "getSum(\"column10\")"
					}
				],
				"rows": [
					{"column1": "column11", "column": "column1", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61", "column7": "column71", "column8": "column81", "column9": "column91", "column10": "1", "column11": "1", "column12": "column121", "column13": "1", "column14": "column141"},
					{"column1": "column12", "column": "column2", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62", "column7": "column72", "column8": "column82", "column9": "column92", "column10": "2", "column11": "2", "column12": "column122", "column13": "2", "column14": "column142"},
					{"column1": "column13", "column": "column3", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "column63", "column7": "column73", "column8": "column83", "column9": "column93", "column10": "3", "column11": "3", "column12": "column123", "column13": "3", "column14": "column143"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsList");
			dataSet_5.parseData({
				"columns" : [
					{
						"name": "column1",
						"info": "플랜트"
					},
					{
						"name": "column2",
						"info": "플랜트명"
					},
					{
						"name": "column3",
						"info": "자재번호"
					},
					{
						"name": "column4",
						"info": "자재내역"
					},
					{
						"name": "column5",
						"info": "단위"
					},
					{
						"name": "column6",
						"info": "자재유형"
					},
					{
						"name": "column7",
						"info": "자재유형"
					},
					{
						"name": "column8",
						"dataType": "string",
						"info": "자재분야"
					},
					{
						"name": "column9",
						"info": "저장위치"
					},
					{
						"name": "column10",
						"dataType": "string",
						"info": "저장위치명"
					},
					{
						"name": "column11",
						"info": "평가유형"
					},
					{
						"name": "column12",
						"info": "배치번호"
					},
					{
						"name": "column13",
						"dataType": "number",
						"info": "가용재고"
					},
					{
						"name": "column14",
						"dataType": "number",
						"info": "순가용재고"
					},
					{
						"name": "column15",
						"dataType": "number",
						"info": "입고예약"
					},
					{
						"name": "column16",
						"dataType": "number",
						"info": "출고예약"
					},
					{
						"name": "column17",
						"dataType": "number",
						"info": "출고지시"
					},
					{
						"name": "column18",
						"dataType": "number",
						"info": "미결오더수량"
					},
					{
						"name": "column19",
						"dataType": "number",
						"info": "이전중재고"
					},
					{
						"name": "column20",
						"dataType": "number",
						"info": "보류재고"
					},
					{
						"name": "column21",
						"dataType": "number",
						"info": "구매요청재고"
					},
					{
						"name": "column22",
						"dataType": "number",
						"info": "운송중재고"
					},
					{
						"name": "column23",
						"dataType": "number",
						"info": "외주재고"
					},
					{
						"name": "column24",
						"dataType": "number",
						"info": "위탁재고"
					},
					{
						"name": "column25",
						"dataType": "number",
						"info": "평균단가"
					},
					{
						"name": "column26",
						"dataType": "number",
						"info": "재고금액"
					}
				]
			});
			app.register(dataSet_5);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "data/dm.json";
			submission_1.addResponseData(dataMap_1, false);
			if(typeof onSms1ErrorStatus == "function") {
				submission_1.addEventListener("error-status", onSms1ErrorStatus);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.action = "/cisweb/upload.do";
			submission_2.mediaType = "multipart/form-data";
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms3");
			submission_3.action = "/cisweb/change.do";
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sms4");
			submission_4.action = "data/gridData5000k.xlsx";
			submission_4.addResponseData(dataSet_4, false);
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.fieldLabel = "가가가가가가";
			button_1.value = "Button";
			if(typeof onButtonClick2 == "function") {
				button_1.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var dateInput_1 = new cpr.controls.DateInput("dti1");
			container.addChild(dateInput_1, {
				"top": "20px",
				"left": "378px",
				"width": "100px",
				"height": "20px"
			});
			
			var searchInput_1 = new cpr.controls.SearchInput();
			container.addChild(searchInput_1, {
				"top": "21px",
				"left": "244px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "Button";
			button_2.bind("value").toLanguage("Transaction Branch");
			container.addChild(button_2, {
				"top": "21px",
				"left": "727px",
				"width": "100px",
				"height": "20px"
			});
			
			var tabFolder_1 = new cpr.controls.TabFolder("tab1");
			
			var tabItem_1 = (function(tabFolder){
				var tabItem_1 = new cpr.controls.TabItem();
				tabItem_1.text = "tab1";
				var group_1 = new cpr.controls.Container();
				// Layout
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
				})(group_1);
				tabItem_1.content = group_1;
				return tabItem_1;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_1);
			
			var tabItem_2 = (function(tabFolder){
				var tabItem_2 = new cpr.controls.TabItem();
				tabItem_2.text = "tab 2";
				var group_2 = new cpr.controls.Container();
				// Layout
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.dataType = "number";
					output_1.format = "s#,##0";
					output_1.displayExp = "\"총 : \"+ self.text +\"개\"";
					output_1.bind("value").toExpression("#grd1.getRowCount()");
					container.addChild(output_1, {
						"top": "9px",
						"left": "6px",
						"width": "294px",
						"height": "71px"
					});
					var grid_1 = new cpr.controls.Grid("grd1");
					grid_1.init({
						"columns": [
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"},
							{"width": "100px"}
						],
						"header": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
									}
								}
							]
						},
						"detail": {
							"rows": [{"height": "24px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
									}
								}
							]
						}
					});
					container.addChild(grid_1, {
						"top": "65px",
						"left": "338px",
						"width": "155px",
						"height": "85px"
					});
				})(group_2);
				tabItem_2.content = group_2;
				return tabItem_2;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_2);
			tabFolder_1.setSelectedTabItem(tabItem_1);
			container.addChild(tabFolder_1, {
				"top": "50px",
				"left": "20px",
				"width": "807px",
				"height": "222px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "Button";
			if(typeof onButtonClick3 == "function") {
				button_3.addEventListener("click", onButtonClick3);
			}
			container.addChild(button_3, {
				"top": "72px",
				"left": "877px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_4 = new cpr.controls.Button();
			button_4.value = "Button";
			if(typeof onButtonClick4 == "function") {
				button_4.addEventListener("click", onButtonClick4);
			}
			container.addChild(button_4, {
				"top": "102px",
				"left": "877px",
				"width": "100px",
				"height": "20px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			container.addChild(embeddedApp_1, {
				"top": "314px",
				"left": "378px",
				"width": "320px",
				"height": "240px"
			});
			
			var userDefinedControl_1 = new udc.Vertical("asd");
			container.addChild(userDefinedControl_1, {
				"top": "343px",
				"left": "63px",
				"width": "100px",
				"height": "30px"
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			(function(comboBox_1){
			})(comboBox_1);
			container.addChild(comboBox_1, {
				"top": "295px",
				"left": "279px",
				"width": "100px",
				"height": "20px"
			});
			
			var maskEditor_1 = new cpr.controls.MaskEditor("mse1");
			maskEditor_1.mask = "000-000-0000";
			container.addChild(maskEditor_1, {
				"top": "282px",
				"left": "734px",
				"width": "270px",
				"height": "20px"
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "<i class=\"fas fa-ad\"><\/i>";
			container.addChild(hTMLSnippet_1, {
				"top": "459px",
				"left": "42px",
				"width": "293px",
				"height": "139px"
			});
			
			var button_5 = new cpr.controls.Button();
			button_5.value = "Button";
			if(typeof onButtonClick5 == "function") {
				button_5.addEventListener("click", onButtonClick5);
			}
			container.addChild(button_5, {
				"top": "132px",
				"left": "877px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_2 = new cpr.controls.Grid("grd2");
			grid_2.init({
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
							}
						}
					]
				}
			});
			container.addChild(grid_2, {
				"top": "564px",
				"left": "427px",
				"width": "325px",
				"height": "103px"
			});
			
			var button_6 = new cpr.controls.Button();
			button_6.value = "Button";
			if(typeof onButtonClick6 == "function") {
				button_6.addEventListener("click", onButtonClick6);
			}
			container.addChild(button_6, {
				"top": "252px",
				"left": "848px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

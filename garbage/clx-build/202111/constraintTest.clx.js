/*
 * App URI: 202111/constraintTest
 * Source Location: 202111/constraintTest.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202111/constraintTest", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * constraint.js
			 * Created at 2021. 11. 3. 오전 9:09:45.
			 *
			 * @author HANS
			 ************************************************/
			
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				var a = app.lookup("btn2");
				
				var b = a.getActualRect();
				
				a.getParent().updateConstraint(a, {
					width : b.width+30+"px"
				});
			}
			
			
			/*
			 * "Button" 버튼(btn2)에서 measure-size 이벤트 발생 시 호출.
			 * 컨트롤의 크기를 계산할 때 발생하는 이벤트
			 */
			function onBtn2MeasureSize(/* cpr.events.CMeasureSizeEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
				console.log("MEASURE_SIZE~");
				
			}
			
			
			/*
			 * 라디오 버튼에서 measure-size 이벤트 발생 시 호출.
			 * 컨트롤의 크기를 계산할 때 발생하는 이벤트
			 */
			function onRdb1MeasureSize(/* cpr.events.CMeasureSizeEvent */ e){
				/** 
				 * @type cpr.controls.RadioButton
				 */
				var rdb1 = e.control;
				e.height = rdb1.getItemCount() * 30;
				console.log("MEASURE");
			}
			
			
			/*
			 * 그룹에서 measure-size 이벤트 발생 시 호출.
			 * 컨트롤의 크기를 계산할 때 발생하는 이벤트
			 */
			function onGrp3MeasureSize(/* cpr.events.CMeasureSizeEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grp3 = e.control;
				console.log("MEA");
			}
			
			
			/*
			 * 루트 컨테이너에서 measure-size 이벤트 발생 시 호출.
			 * 컨트롤의 크기를 계산할 때 발생하는 이벤트
			 */
			function onBodyMeasureSize(/* cpr.events.CMeasureSizeEvent */ e){
				console.log("..")
			}
			
			
			/*
			 * 라디오 버튼에서 measure-size 이벤트 발생 시 호출.
			 * 컨트롤의 크기를 계산할 때 발생하는 이벤트
			 */
			function onRdb3MeasureSize(/* cpr.events.CMeasureSizeEvent */ e){
				/** 
				 * @type cpr.controls.RadioButton
				 */
				var rdb3 = e.control;
				
				console.log("MEASURE");
			}
			
			
			/*
			 * 라디오 버튼에서 measure-size 이벤트 발생 시 호출.
			 * 컨트롤의 크기를 계산할 때 발생하는 이벤트
			 */
			function onRdb2MeasureSize(/* cpr.events.CMeasureSizeEvent */ e){
				/** 
				 * @type cpr.controls.RadioButton
				 */
				var rdb2 = e.control;
				console.log("AAAA");
			//	e.preventDefault();
			//	e.stopPropagation();
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"width": "1024px",
				"height": "20px"
			});
			
			var tabFolder_1 = new cpr.controls.TabFolder();
			
			var tabItem_1 = (function(tabFolder){
				var tabItem_1 = new cpr.controls.TabItem();
				tabItem_1.text = "tab1";
				var group_1 = new cpr.controls.Container("grp1");
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_1);
				(function(container){
					var button_2 = new cpr.controls.Button("btn2");
					button_2.value = "Button";
					if(typeof onBtn2MeasureSize == "function") {
						button_2.addEventListener("measure-size", onBtn2MeasureSize);
					}
					container.addChild(button_2, {
						"top": "76px",
						"left": "36px",
						"width": "100px",
						"height": "20px"
					});
				})(group_1);
				tabItem_1.content = group_1;
				return tabItem_1;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_1);
			
			var tabItem_2 = (function(tabFolder){
				var tabItem_2 = new cpr.controls.TabItem();
				tabItem_2.text = "tab 2";
				var group_2 = new cpr.controls.Container("grp2");
				// Layout
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_2);
				(function(container){
				})(group_2);
				tabItem_2.content = group_2;
				return tabItem_2;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_2);
			tabFolder_1.setSelectedTabItem(tabItem_1);
			container.addChild(tabFolder_1, {
				"width": "1024px",
				"height": "437px"
			});
			
			var group_3 = new cpr.controls.Container("grp3");
			group_3.style.setClasses(["cl-form-group"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "10px";
			formLayout_1.rightMargin = "10px";
			formLayout_1.bottomMargin = "10px";
			formLayout_1.leftMargin = "10px";
			formLayout_1.horizontalSpacing = "5px";
			formLayout_1.verticalSpacing = "5px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["25px", "25px", "25px", "1fr"]);
			formLayout_1.setRowAutoSizing(0, true);
			formLayout_1.setRowMinHeight(3, 40);
			group_3.setLayout(formLayout_1);
			(function(container){
				var radioButton_1 = new cpr.controls.RadioButton("rdb3");
				radioButton_1.colCount = 1;
				(function(radioButton_1){
					radioButton_1.addItem(new cpr.controls.Item("label1", "value1"));
					radioButton_1.addItem(new cpr.controls.Item("label2", "value2"));
					radioButton_1.addItem(new cpr.controls.Item("label3", "value3"));
					radioButton_1.addItem(new cpr.controls.Item("label4", "value4"));
				})(radioButton_1);
				if(typeof onRdb3MeasureSize == "function") {
					radioButton_1.addEventListener("measure-size", onRdb3MeasureSize);
				}
				container.addChild(radioButton_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
			})(group_3);
			if(typeof onGrp3MeasureSize == "function") {
				group_3.addEventListener("measure-size", onGrp3MeasureSize);
			}
			container.addChild(group_3, {
				"width": "1024px",
				"height": "136px"
			});
			
			var radioButton_2 = new cpr.controls.RadioButton("rdb2");
			radioButton_2.colCount = 1;
			(function(radioButton_2){
				radioButton_2.addItem(new cpr.controls.Item("label1", "value1"));
				radioButton_2.addItem(new cpr.controls.Item("label2", "value2"));
				radioButton_2.addItem(new cpr.controls.Item("label3", "value3"));
				radioButton_2.addItem(new cpr.controls.Item("label4", "value4"));
			})(radioButton_2);
			if(typeof onRdb2MeasureSize == "function") {
				radioButton_2.addEventListener("measure-size", onRdb2MeasureSize);
			}
			container.addChild(radioButton_2, {
				"autoSize": "height",
				"width": "1024px",
				"height": "25px"
			});
			if(typeof onBodyMeasureSize == "function"){
				app.getContainer().addEventListener("measure-size", onBodyMeasureSize);
			}
		}
	});
	app.title = "constraintTest";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202111/Untitled
 * Source Location: 202111/Untitled.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202111/Untitled", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Untitled.js
			 * Created at 2021. 11. 19. 오전 8:52:13.
			 *
			 * @author HANS
			 ************************************************/
			
			/*
			 * 루트 컨테이너에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onBodyKeydown(/* cpr.events.CKeyboardEvent */ e){
				
				if(e.keyCode == cpr.events.KeyCode.TAB){
					
					app.getContainer().addEventListenerOnce("focusin", function(ev){
						console.log(ev);
						console.log("ㅋㅋ");
						
					})
				}
			}
			
			function ab(a,b,c){
				
				setTimeout(function(){
					
					var res = 0;
					try{
						res =a/b;
						c(null,res); 
					} catch(error) {
						c(error,null);
					}
				}, 1000)
				
			}
			
			
			//ab(1,2,function(str){
			//	alert(str);
			//})
			function abc(){
				console.log("zz");
			}
			
			function bb (){
				abc()
			//	_.throttle(abc, 300);
			}
			var b = _.throttle(function(){
				console.log("ㅋㅋㅋ");
			}, 2000);
			/*
			 * "Button" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				
				
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
			//	b();
			//	bb();
			
				var abc = app.lookup("cbg1");
				debugger;
				if(abc.focusable && abc.tabIndex != -1) {
					console.log("zz");
				} else if(abc instanceof cpr.controls.EmbeddedApp || abc instanceof cpr.controls.EmbeddedPage) {
					console.log("ㅎㅎ");
				} else if(abc instanceof cpr.controls.CheckBoxGroup || abc instanceof cpr.controls.RadioButton) {
					console.log("ztz");
				} else {
					console.log(",,");
				}
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var a = _.debounce(bb, 300);
				
				app.lookup("grp1").addEventListenerOnce("scroll", a);
			}
			
			
			
			/*
			 * 체크 박스 그룹에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onCbg1ItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.CheckBoxGroup
				 */
				var cbg1 = e.control;
				console.log("ITEM CLICK");
			}
			
			
			/*
			 * 체크 박스 그룹에서 focus 이벤트 발생 시 호출.
			 * 컨트롤이 포커스를 획득한 후 발생하는 이벤트.
			 */
			function onCbg1Focus(/* cpr.events.CFocusEvent */ e){
				/** 
				 * @type cpr.controls.CheckBoxGroup
				 */
				var cbg1 = e.control;
				console.log("FOCUS");
			}
			/**
			 * 
			 * @param {cpr.controls.UIControl} pcCtrl
			 */
			function checkIsFocusable (pcCtrl){
				debugger;
				
				if(pcCtrl instanceof cpr.controls.EmbeddedApp || pcCtrl instanceof cpr.controls.EmbeddedPage||
				pcCtrl instanceof cpr.controls.CheckBoxGroup || pcCtrl instanceof cpr.controls.RadioButton){
					console.log("zz");
					return true;
				} else if(pcCtrl.focusable && pcCtrl.tabIndex != -1) {
					return true;
				} 
				else {
					return false;
				}
			}
			/*
			 * "Button" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn4Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn4 = e.control;
				
				var ep = app.lookup("ep1");
				
				var a = document.getElementsByName(ep.frameName).item(0).contentWindow;
				
				var bc = a.app.getInstances()[0].getContainer();
				console.log(bc);
			/** @type cpr.controls.UIControl[]*/
				var va = bc.getAllRecursiveChildren()
				console.log(va);
				va.forEach(function(each){
					
					checkIsFocusable(each)
				});
			
				var a = [app.lookup("cbg1"),app.lookup("btn1"),app.lookup("rdb1")];
				
				
				a.forEach(function(each){
					checkIsFocusable(each);
				});
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "_Directory", "value": "_Directory", "parent": ""},
					{"label": "1.mdb", "value": "1.mdb", "parent": "_Directory"},
					{"label": "2.mdb", "value": "2.mdb", "parent": "_Directory"},
					{"label": "3.mdb", "value": "3.mdb", "parent": "_Directory"},
					{"label": "htc_300", "value": "htc_300", "parent": ""},
					{"label": "4.mdb", "value": "4.mdb", "parent": "htc_300"},
					{"label": "5.mdb", "value": "5.mdb", "parent": "htc_300"},
					{"label": "6.mdb", "value": "6.mdb", "parent": "htc_300"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds3");
			dataSet_2.parseData({
				"columns": [
					{
						"name": "F_NAME",
						"dataType": "string"
					},
					{"name": "DIR_NAME"},
					{"name": "DIR_PARENT"}
				],
				"rows": [
					{"F_NAME": "__Directory__", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__r"},
					{"F_NAME": "ProcessDirectory.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__\\ProcessDirectory.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__"},
					{"F_NAME": "111.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\111.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__r"},
					{"F_NAME": "111_CLN.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\111_CLN.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__r"},
					{"F_NAME": "222.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\222.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__r"},
					{"F_NAME": "TEMP_FOLDER", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__r"},
					{"F_NAME": "samplefile.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile2.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile2.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile3.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile3.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile4.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile4.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile5.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile5.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile6.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile6.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "Folder2", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__\\Folder2", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__"}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btn1");
				button_1.value = "Button";
				container.addChild(button_1, {
					"top": "2000px",
					"left": "85px",
					"width": "100px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "43px",
				"left": "44px",
				"width": "447px",
				"height": "77px"
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "Button";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			if(typeof onBtn2Blur == "function") {
				button_2.addEventListener("blur", onBtn2Blur);
			}
			container.addChild(button_2, {
				"top": "373px",
				"left": "863px",
				"width": "100px",
				"height": "20px"
			});
			
			var tree_1 = new cpr.controls.Tree("tre1");
			(function(tree_1){
				tree_1.setItemSet(app.lookup("ds3"), {
					"label": "F_NAME",
					"value": "DIR_NAME",
					"parentValue": "DIR_PARENT"
				});
			})(tree_1);
			container.addChild(tree_1, {
				"top": "145px",
				"left": "44px",
				"width": "282px",
				"height": "406px"
			});
			
			var button_3 = new cpr.controls.Button("btn3");
			button_3.value = "Button";
			if(typeof onBtn3Click == "function") {
				button_3.addEventListener("click", onBtn3Click);
			}
			container.addChild(button_3, {
				"top": "145px",
				"left": "325px",
				"width": "100px",
				"height": "20px"
			});
			
			var checkBoxGroup_1 = new cpr.controls.CheckBoxGroup("cbg1");
			checkBoxGroup_1.colCount = 2;
			(function(checkBoxGroup_1){
				checkBoxGroup_1.addItem(new cpr.controls.Item("label1", "value1"));
				checkBoxGroup_1.addItem(new cpr.controls.Item("label2", "value2"));
				checkBoxGroup_1.addItem(new cpr.controls.Item("label3", "value3"));
				checkBoxGroup_1.addItem(new cpr.controls.Item("label4", "value4"));
			})(checkBoxGroup_1);
			if(typeof onCbg1ItemClick == "function") {
				checkBoxGroup_1.addEventListener("item-click", onCbg1ItemClick);
			}
			if(typeof onCbg1Focus == "function") {
				checkBoxGroup_1.addEventListener("focus", onCbg1Focus);
			}
			container.addChild(checkBoxGroup_1, {
				"top": "175px",
				"left": "410px",
				"width": "443px",
				"height": "89px"
			});
			
			var radioButton_1 = new cpr.controls.RadioButton("rdb1");
			radioButton_1.value = "value7";
			(function(radioButton_1){
				radioButton_1.addItem(new cpr.controls.Item("label1", "value1"));
				radioButton_1.addItem(new cpr.controls.Item("label2", "value2"));
				radioButton_1.addItem(new cpr.controls.Item("label3", "value3"));
				radioButton_1.addItem(new cpr.controls.Item("label4", "value4"));
				radioButton_1.addItem(new cpr.controls.Item("label5", "value5"));
				radioButton_1.addItem(new cpr.controls.Item("label6", "value6"));
				radioButton_1.addItem(new cpr.controls.Item("label7", "value7"));
			})(radioButton_1);
			if(typeof onRdb1SelectionChange == "function") {
				radioButton_1.addEventListener("selection-change", onRdb1SelectionChange);
			}
			container.addChild(radioButton_1, {
				"top": "285px",
				"left": "410px",
				"width": "437px",
				"height": "68px"
			});
			
			var embeddedPage_1 = new cpr.controls.EmbeddedPage("ep1");
			embeddedPage_1.src = "202111/bok/index.html";
			container.addChild(embeddedPage_1, {
				"top": "363px",
				"left": "410px",
				"width": "443px",
				"height": "237px"
			});
			
			var button_4 = new cpr.controls.Button("btn4");
			button_4.value = "Button";
			if(typeof onBtn4Click == "function") {
				button_4.addEventListener("click", onBtn4Click);
			}
			container.addChild(button_4, {
				"top": "403px",
				"left": "863px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyFocusin == "function"){
				app.getContainer().addEventListener("focusin", onBodyFocusin);
			}
			if(typeof onBodyKeydown == "function"){
				app.getContainer().addEventListener("keydown", onBodyKeydown);
			}
		}
	});
	app.title = "Untitled";
	cpr.core.Platform.INSTANCE.register(app);
})();

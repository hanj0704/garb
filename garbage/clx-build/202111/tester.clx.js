/*
 * App URI: 202111/tester
 * Source Location: 202111/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202111/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tester.js
			 * Created at 2021. 10. 28. 오전 11:46:25.
			 *
			 * @author HANS
			 ************************************************/
			cpr.events.EventBus.INSTANCE.addFilter("keydown", function(/*cpr.events.CKeyboardEvent*/e){
				var control = e.control;
				
				e.stopPropagation();
				var clickEvt = new cpr.events.CMouseEvent("click");
				control.dispatchEvent(clickEvt);
			});
			
			var scrolled = false;
			var started = 0;
			/*
			 * 그룹에서 scroll 이벤트 발생 시 호출.
			 * 그룹 컨텐츠가 스크롤될 때 발생하는 이벤트.
			 */
			function onGrp1Scroll(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grp1 = e.control;
			//	if(!scrolled){
			//		scrolled = true;
			//		started = grp1.getViewPortRect().top;
			//		console.log(started);
			//	}
			//	console.log("DELTA : "+ (grp1.getViewPortRect().top - started));
			//	a();
			}
			var a = _.debounce(function(){
					scrolled = false;
				} ,1000)
			
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb3ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb3 = e.control;
				console.log(app.lookup("ipb1").inputFilter)
				app.lookup("ipb1").inputFilter = ipb3.value;
				
				app.getContainer().redraw();
			}
			
			
			/*
			 * "Button" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
			//	var a = /^([\w\-])([\w\-\.])*/;
			//	var val = app.lookup("ipb2").value;
			//	var bbb = ValueUtil.fixNull(a.exec(val) == "");
			//	app.lookup("btn2").focus();
			}
			
			
			/*
			 * 그리드에서 cell-resized 이벤트 발생 시 호출.
			 * Cell의 크기를 조정했을 때 발생하는 이벤트.
			 */
			function onGrd1CellResized(/* cpr.events.CGridEvent */ e) {
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				
				var a = grd1.getColumnLayout();
				console.log(a);
			}
			
			
			/*
			 * 그리드에서 row-dblclick 이벤트 발생 시 호출.
			 * detail이 row를 더블클릭 한 경우 발생하는 이벤트.
			 */
			function onGrd1RowDblclick(/* cpr.events.CGridMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				console.log("쿄쿄ㅛ");
			}
			
			
			/*
			 * "buildTest" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn4Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn4 = e.control;
				
				app.lookup("dm1").build({
					column1 : "#",
					column2 : "4"
			 	});
			 	
			 	app.getContainer().redraw();
			 	console.log(btn4.userAttr("hey"));
			 	
			 	var a = /[\w\-\.]/;
			 	console.log(a);
			 	console.log(a.toString())
			}
			
			
			/*
			 * 데이터맵에서 clear 이벤트 발생 시 호출.
			 * 데이터 정보를 제거하는 경우 발생하는 이벤트. 발생 메소드 : clear, (특정조건)build build 메소드 사용시 DataMap.alterColumnLayout="server" 일 때 이벤트가 발생합니다.
			 */
			function onDm1Clear(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataMap
				 */
				var dm1 = e.control;
				console.log("CLEAR");
				console.log(e.baseRow);
				console.log(e.beforeValue);
			}
			
			
			/*
			 * 데이터맵에서 load 이벤트 발생 시 호출.
			 * build 메소드에 의해 데이터 구조가 재구성될 때 발생하는 이벤트. 초기 생성시에도 발생합니다.
			 */
			function onDm1Load(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataMap
				 */
				var dm1 = e.control;
				console.log("LOAD");
				console.log(e.baseRow);
				console.log(e.beforeValue);
			}
			
			
			/*
			 * 데이터맵에서 update 이벤트 발생 시 호출.
			 * 데이터가 수정되는 경우 발생하는 이벤트. 발생 메소드 : setValue
			 */
			function onDm1Update(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataMap
				 */
				var dm1 = e.control;
				console.log("UPDATE");
				console.log(e.baseRow);
				console.log(e.beforeValue);
			}
			
			
			/*
			 * "Button" 버튼(btn5)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn5Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn5 = e.control;
				
				var aa =[1,2,3,4,5,6,7];
				
				aa.shift();
				
				console.log(aa);
				
				var bar = "123456789";
				console.log(bar.substring(1));
			}
			
			
			/*
			 * "Button" 버튼(btn6)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn6Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn6 = e.control;
				
				var a=  [1];
				
				console.log(a.splice(0,1));
				console.log(a);
				console.log(a.indexOf(2));
				app.lookup("btn4").focus();
			}
			
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb4ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb4 = e.control;
				console.log("카카카캇");
			}
			
			
			/*
			 * 넘버 에디터에서 value-change 이벤트 발생 시 호출.
			 * NumberEditor의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onNbe2ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.NumberEditor
				 */
				var nbe2 = e.control;
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb1SelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
			}
			
			
			
			/*
			 * "Button" 버튼(btn8)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn8Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn8 = e.control;
				
			}
			function abc(){
				
				var a= 1;
				var b = 2;
				
			}
			
			/*
			 * "Button" 버튼(btn9)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn9Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn9 = e.control;
				app.lookup("ipb4").value ="ata";
			//	console.log("ㅋㅋ");
			}
			
			
			/*
			 * "Button" 버튼(btn10)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn10Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn10 = e.control;
				
				app.lookup("ipb4").putValue("adadsdweq");
			}
			
			
			/*
			 * "Button" 버튼(btn11)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn11Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn11 = e.control;
				
			//	var a = moment("2021-11-24 16:17:17:003");
			//	var a = new Date("2021-11-24 16:17:17:003");
			//	console.log(a);
			//	console.log(a.getMilliseconds());
			//	var b = moment(a.valueOf());
			//	console.log(b);
			//	console.log(b.format("YYYY-MM-DD HH:mm:ss:SSS"));
				console.log(app.lookup("grp3").focusable);
				console.log(app.lookup("opt5").focusable);
				console.log(app.lookup("opt6").focusable);
				console.log(app.lookup("opt5").focus());
				app.lookup("opt5").setNextControl(app.lookup("opt6"));
			}
			
			
			/*
			 * "Output" 아웃풋(opt7)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onOpt7Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Output
				 */
				var opt7 = e.control;
				
				console.log("HELLOWORLD");
			}
			
			
			/*
			 * 그룹에서 focusin 이벤트 발생 시 호출.
			 * 컨트롤 및 컨트롤의 하위 요소가 포커스를 획득하기 직전 발생하는 이벤트.
			 */
			function onGrp1Focusin(/* cpr.events.CFocusEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grp1 = e.control;
				
			//	console.log("ㅋㅋ");
			//	console.log(e);
			
				grp1.addEventListenerOnce("focusout", aq)
			}
			
			
			function aq(e){
				app.getContainer().addEventListenerOnce("focusin", function(ev){
					console.log(ev);
					abc(e.targetControl,ev.targetControl);
				})
			}
			
			function abc(pc1,pc2){
				
				console.log("쿄쿄~~");
				console.log(pc1);
				console.log(pc2);
			}
			
			
			
			/*
			 * 인풋 박스에서 blur 이벤트 발생 시 호출.
			 * 컨트롤이 포커스를 잃은 후 발생하는 이벤트.
			 */
			function onIpb5Blur(/* cpr.events.CFocusEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb5 = e.control;
				console.log("blur");
			//	cpr.events.EventBus.INSTANCE.omitEvent(function(){
					app.lookup("ipb7").focus();
			//	})
			}
			
			
			/*
			 * 인풋 박스에서 focus 이벤트 발생 시 호출.
			 * 컨트롤이 포커스를 획득한 후 발생하는 이벤트.
			 */
			function onIpb6Focus(/* cpr.events.CFocusEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb6 = e.control;
				console.log("focus");
				console.log(e);
			}
			
			
			/*
			 * "Button" 버튼(btn13)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn13Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn13 = e.control;
				console.log(app.lookup("ds3").getRowDataRanged());
				var opts = _.clone(app.lookup("btn14"));
				app.getContainer().addChild(b, {
					top : "800px",
					left: "20px",
					width: "100px",
					height: "20px"
				});
			}
			
			
			/*
			 * "Button" 버튼(btn14)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn14Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn14 = e.control;
				console.log("ㅋㅅㅋ");
			}
			
			
			/*
			 * "Button" 버튼(btn15)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn15Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn15 = e.control;
				
				app.ABC = "bbb";
			}
			
			
			/*
			 * "Button" 버튼(btn16)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn16Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn16 = e.control;
				console.log(app.hasOwnProperty("ABC"));
				console.log(app.ABC);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("newProperty1", "asad\r\nzzz");
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "column4": "column46"},
					{"column1": "column17", "column2": "column27", "column3": "column37", "column4": "column47"},
					{"column1": "column18", "column2": "column28", "column3": "column38", "column4": "column48"},
					{"column1": "column19", "column2": "column29", "column3": "column39", "column4": "column49"},
					{"column1": "column110", "column2": "column210", "column3": "column310", "column4": "column410"},
					{"column1": "column111", "column2": "column211", "column3": "column311", "column4": "column411"},
					{"column1": "column112", "column2": "column212", "column3": "column312", "column4": "column412"},
					{"column1": "column113", "column2": "column213", "column3": "column313", "column4": "column413"},
					{"column1": "column114", "column2": "column214", "column3": "column314", "column4": "column414"},
					{"column1": "column115", "column2": "column215", "column3": "column315", "column4": "column415"},
					{"column1": "column116", "column2": "column216", "column3": "column316", "column4": "column416"},
					{"column1": "column117", "column2": "column217", "column3": "column317", "column4": "column417"},
					{"column1": "column118", "column2": "column218", "column3": "column318", "column4": "column418"},
					{"column1": "column119", "column2": "column219", "column3": "column319", "column4": "column419"},
					{"column1": "column120", "column2": "column220", "column3": "column320", "column4": "column420"},
					{"column1": "column121", "column2": "column221", "column3": "column321", "column4": "column421"},
					{"column1": "column122", "column2": "column222", "column3": "column322", "column4": "column422"},
					{"column1": "column123", "column2": "column223", "column3": "column323", "column4": "column423"},
					{"column1": "column124", "column2": "column224", "column3": "column324", "column4": "column424"},
					{"column1": "column125", "column2": "column225", "column3": "column325", "column4": "column425"},
					{"column1": "column126", "column2": "column226", "column3": "column326", "column4": "column426"},
					{"column1": "column127", "column2": "column227", "column3": "column327", "column4": "column427"},
					{"column1": "column128", "column2": "column228", "column3": "column328", "column4": "column428"},
					{"column1": "column129", "column2": "column229", "column3": "column329", "column4": "column429"},
					{"column1": "column130", "column2": "column230", "column3": "column330", "column4": "column430"},
					{"column1": "column131", "column2": "column231", "column3": "column331", "column4": "column431"},
					{"column1": "column132", "column2": "column232", "column3": "column332", "column4": "column432"},
					{"column1": "column133", "column2": "column233", "column3": "column333", "column4": "column433"},
					{"column1": "column134", "column2": "column234", "column3": "column334", "column4": "column434"},
					{"column1": "column135", "column2": "column235", "column3": "column335", "column4": "column435"},
					{"column1": "column136", "column2": "column236", "column3": "column336", "column4": "column436"},
					{"column1": "column137", "column2": "column237", "column3": "column337", "column4": "column437"},
					{"column1": "column138", "column2": "column238", "column3": "column338", "column4": "column438"},
					{"column1": "column139", "column2": "column239", "column3": "column339", "column4": "column439"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds3");
			dataSet_3.parseData({
				"columns": [
					{
						"name": "F_NAME",
						"dataType": "string"
					},
					{"name": "DIR_NAME"},
					{"name": "DIR_PARENT"}
				],
				"rows": [
					{"F_NAME": "__Directory__", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__", "DIR_PARENT": ""},
					{"F_NAME": "ProcessDirectory.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__\\ProcessDirectory.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\__Directory__"},
					{"F_NAME": "111.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\111.mdb", "DIR_PARENT": ""},
					{"F_NAME": "111_CLN.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\111_CLN.mdb", "DIR_PARENT": ""},
					{"F_NAME": "222.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\222.mdb", "DIR_PARENT": ""},
					{"F_NAME": "TEMP_FOLDER", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER", "DIR_PARENT": ""},
					{"F_NAME": "samplefile.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile2.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile3.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile4.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile5.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"},
					{"F_NAME": "samplefile6.mdb", "DIR_NAME": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER\\samplefile.mdb", "DIR_PARENT": "P:\\HTN_CTC_300\\Recipe\\Process\\TEMP_FOLDER"}
				]
			});
			app.register(dataSet_3);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "column1",
						"defaultValue": "1"
					},
					{
						"name": "column2",
						"defaultValue": "2"
					}
				]
			});
			if(typeof onDm1Clear == "function") {
				dataMap_1.addEventListener("clear", onDm1Clear);
			}
			if(typeof onDm1Load == "function") {
				dataMap_1.addEventListener("load", onDm1Load);
			}
			if(typeof onDm1Update == "function") {
				dataMap_1.addEventListener("update", onDm1Update);
			}
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dm2");
			dataMap_2.parseData({});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("sms1");
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
			container.addChild(numberEditor_1, {
				"top": "20px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_2 = new cpr.controls.Button("btn2");
				button_2.value = "Button";
				container.addChild(button_2, {
					"top": "2000px",
					"left": "294px",
					"width": "100px",
					"height": "20px"
				});
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				inputBox_1.inputFilter = "^([\\w\\-])([\\w\\-\\.])*";
				container.addChild(inputBox_1, {
					"top": "20px",
					"left": "120px",
					"width": "100px",
					"height": "20px"
				});
				var inputBox_2 = new cpr.controls.InputBox("ipb3");
				if(typeof onIpb3ValueChange == "function") {
					inputBox_2.addEventListener("value-change", onIpb3ValueChange);
				}
				container.addChild(inputBox_2, {
					"top": "70px",
					"left": "120px",
					"width": "100px",
					"height": "20px"
				});
				var output_1 = new cpr.controls.Output("opt1");
				output_1.bind("value").toExpression("\"inputFilter : \"+#ipb1.inputFilter");
				container.addChild(output_1, {
					"top": "39px",
					"left": "120px",
					"width": "401px",
					"height": "21px"
				});
				var button_3 = new cpr.controls.Button("btn4");
				button_3.value = "buildTest";
				button_3.userAttr({"hey": "[\\w\\.\\-]"});
				if(typeof onBtn4Click == "function") {
					button_3.addEventListener("click", onBtn4Click);
				}
				container.addChild(button_3, {
					"top": "108px",
					"left": "20px",
					"width": "100px",
					"height": "20px"
				});
				var output_2 = new cpr.controls.Output("opt2");
				output_2.bind("value").toDataMap(app.lookup("dm1"), "column1");
				container.addChild(output_2, {
					"top": "137px",
					"left": "230px",
					"width": "100px",
					"height": "20px"
				});
				var output_3 = new cpr.controls.Output("opt3");
				output_3.bind("value").toDataMap(app.lookup("dm1"), "column2");
				container.addChild(output_3, {
					"top": "137px",
					"left": "340px",
					"width": "100px",
					"height": "20px"
				});
				var button_4 = new cpr.controls.Button("btn5");
				button_4.value = "Button";
				if(typeof onBtn5Click == "function") {
					button_4.addEventListener("click", onBtn5Click);
				}
				container.addChild(button_4, {
					"top": "40px",
					"left": "613px",
					"width": "100px",
					"height": "20px"
				});
				var userDefinedControl_1 = new udc.han.DateInput();
				container.addChild(userDefinedControl_1, {
					"top": "108px",
					"left": "450px",
					"width": "150px",
					"height": "78px"
				});
				var button_5 = new cpr.controls.Button("btn12");
				button_5.value = "buildTest";
				container.addChild(button_5, {
					"top": "108px",
					"left": "724px",
					"width": "100px",
					"height": "20px"
				});
				var inputBox_3 = new cpr.controls.InputBox("ipb8");
				inputBox_3.inputFilter = "^([\\w\\-])([\\w\\-\\.])*";
				container.addChild(inputBox_3, {
					"top": "148px",
					"left": "38px",
					"width": "120px",
					"height": "28px"
				});
			})(group_1);
			if(typeof onGrp1Scroll == "function") {
				group_1.addEventListener("scroll", onGrp1Scroll);
			}
			if(typeof onGrp1Mousemove == "function") {
				group_1.addEventListener("mousemove", onGrp1Mousemove);
			}
			if(typeof onGrp1Focusin == "function") {
				group_1.addEventListener("focusin", onGrp1Focusin);
			}
			if(typeof onGrp1Focusout == "function") {
				group_1.addEventListener("focusout", onGrp1Focusout);
			}
			container.addChild(group_1, {
				"top": "39px",
				"left": "20px",
				"width": "702px",
				"height": "246px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"resizableColumns": "all",
				"columns": [
					{"width": "50px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "rowindex";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						}
					]
				}
			});
			if(typeof onGrd1Scroll == "function") {
				grid_1.addEventListener("scroll", onGrd1Scroll);
			}
			if(typeof onGrd1CellResized == "function") {
				grid_1.addEventListener("cell-resized", onGrd1CellResized);
			}
			if(typeof onGrd1RowDblclick == "function") {
				grid_1.addEventListener("row-dblclick", onGrd1RowDblclick);
			}
			container.addChild(grid_1, {
				"top": "39px",
				"left": "732px",
				"width": "272px",
				"height": "246px"
			});
			
			var inputBox_4 = new cpr.controls.InputBox("ipb2");
			inputBox_4.value = "adsdsds";
			container.addChild(inputBox_4, {
				"top": "295px",
				"left": "50px",
				"width": "105px",
				"height": "27px"
			});
			
			var button_6 = new cpr.controls.Button("btn3");
			button_6.value = "Button";
			if(typeof onBtn3Click == "function") {
				button_6.addEventListener("click", onBtn3Click);
			}
			container.addChild(button_6, {
				"top": "295px",
				"left": "165px",
				"width": "100px",
				"height": "27px"
			});
			
			var button_7 = new cpr.controls.Button("btn6");
			button_7.value = "Button";
			if(typeof onBtn6Click == "function") {
				button_7.addEventListener("click", onBtn6Click);
			}
			container.addChild(button_7, {
				"top": "295px",
				"left": "275px",
				"width": "100px",
				"height": "27px"
			});
			
			var group_2 = new cpr.controls.Container("grp2");
			group_2.enabled = false;
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var button_8 = new cpr.controls.Button("btn7");
				button_8.value = "Button";
				container.addChild(button_8, {
					"top": "50px",
					"left": "170px",
					"width": "100px",
					"height": "20px"
				});
				var output_4 = new cpr.controls.Output("opt4");
				output_4.value = "Output&#xD;&#xA; zz";
				container.addChild(output_4, {
					"top": "80px",
					"left": "79px",
					"width": "128px",
					"height": "58px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "364px",
				"left": "15px",
				"width": "400px",
				"height": "200px"
			});
			
			var notifier_1 = new cpr.controls.Notifier();
			container.addChild(notifier_1, {
				"top": "648px",
				"left": "544px",
				"width": "460px",
				"height": "100px"
			});
			
			var inputBox_5 = new cpr.controls.InputBox("ipb4");
			if(typeof onIpb4ValueChange == "function") {
				inputBox_5.addEventListener("value-change", onIpb4ValueChange);
			}
			container.addChild(inputBox_5, {
				"top": "345px",
				"left": "425px",
				"width": "100px",
				"height": "20px"
			});
			
			var numberEditor_2 = new cpr.controls.NumberEditor("nbe2");
			if(typeof onNbe2ValueChange == "function") {
				numberEditor_2.addEventListener("value-change", onNbe2ValueChange);
			}
			container.addChild(numberEditor_2, {
				"top": "375px",
				"left": "425px",
				"width": "100px",
				"height": "20px"
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			(function(comboBox_1){
			})(comboBox_1);
			if(typeof onCmb1SelectionChange == "function") {
				comboBox_1.addEventListener("selection-change", onCmb1SelectionChange);
			}
			container.addChild(comboBox_1, {
				"top": "405px",
				"left": "425px",
				"width": "100px",
				"height": "20px"
			});
			
			var dateInput_1 = new cpr.controls.DateInput("dti1");
			if(typeof onDti1ValueChange == "function") {
				dateInput_1.addEventListener("value-change", onDti1ValueChange);
			}
			container.addChild(dateInput_1, {
				"top": "435px",
				"left": "425px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_9 = new cpr.controls.Button("btn8");
			button_9.value = "Button";
			if(typeof onBtn8Click == "function") {
				button_9.addEventListener("click", onBtn8Click);
			}
			container.addChild(button_9, {
				"top": "345px",
				"left": "557px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_10 = new cpr.controls.Button("btn9");
			button_10.value = "Button";
			if(typeof onBtn9Click == "function") {
				button_10.addEventListener("click", onBtn9Click);
			}
			container.addChild(button_10, {
				"top": "386px",
				"left": "592px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_11 = new cpr.controls.Button("btn10");
			button_11.value = "Button";
			if(typeof onBtn10Click == "function") {
				button_11.addEventListener("click", onBtn10Click);
			}
			container.addChild(button_11, {
				"top": "394px",
				"left": "702px",
				"width": "100px",
				"height": "20px"
			});
			
			var tree_1 = new cpr.controls.Tree("tre1");
			(function(tree_1){
				tree_1.addItem(new cpr.controls.TreeItem("label1", "value1", null));
				tree_1.addItem(new cpr.controls.TreeItem("label2", "value2", "value1"));
				tree_1.addItem(new cpr.controls.TreeItem("label3", "value3", "value2"));
				tree_1.addItem(new cpr.controls.TreeItem("label4", "value4", null));
				tree_1.addItem(new cpr.controls.TreeItem("label5", "value5", null));
			})(tree_1);
			container.addChild(tree_1, {
				"top": "435px",
				"left": "691px",
				"width": "327px",
				"height": "203px"
			});
			
			var button_12 = new cpr.controls.Button("btn11");
			button_12.value = "Button";
			if(typeof onBtn11Click == "function") {
				button_12.addEventListener("click", onBtn11Click);
			}
			container.addChild(button_12, {
				"top": "563px",
				"left": "275px",
				"width": "100px",
				"height": "20px"
			});
			
			var group_3 = new cpr.controls.Container("grp3");
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_4);
			(function(container){
			})(group_3);
			container.addChild(group_3, {
				"top": "468px",
				"left": "448px",
				"width": "178px",
				"height": "138px"
			});
			
			var output_5 = new cpr.controls.Output("opt5");
			output_5.value = "Output";
			container.addChild(output_5, {
				"top": "602px",
				"left": "362px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_6 = new cpr.controls.Output("opt6");
			output_6.tabIndex = 0;
			output_6.value = "Output";
			container.addChild(output_6, {
				"top": "621px",
				"left": "368px",
				"width": "100px",
				"height": "20px"
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "<style>\r\n\t.cl-focus {\r\n\t\tbackground-color : red !important;\r\n\t}\r\n<\/style>";
			container.addChild(hTMLSnippet_1, {
				"top": "582px",
				"left": "104px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_7 = new cpr.controls.Output("opt7");
			output_7.value = "Output";
			if(typeof onOpt7Click == "function") {
				output_7.addEventListener("click", onOpt7Click);
			}
			container.addChild(output_7, {
				"top": "284px",
				"left": "684px",
				"width": "163px",
				"height": "51px"
			});
			
			var inputBox_6 = new cpr.controls.InputBox("ipb5");
			if(typeof onIpb5Blur == "function") {
				inputBox_6.addEventListener("blur", onIpb5Blur);
			}
			container.addChild(inputBox_6, {
				"top": "728px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_7 = new cpr.controls.InputBox("ipb6");
			if(typeof onIpb6Focus == "function") {
				inputBox_7.addEventListener("focus", onIpb6Focus);
			}
			container.addChild(inputBox_7, {
				"top": "728px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_8 = new cpr.controls.InputBox("ipb7");
			container.addChild(inputBox_8, {
				"top": "728px",
				"left": "240px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_13 = new cpr.controls.Button("btn13");
			button_13.value = "Button";
			if(typeof onBtn13Click == "function") {
				button_13.addEventListener("click", onBtn13Click);
			}
			container.addChild(button_13, {
				"top": "698px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_14 = new cpr.controls.Button("btn14");
			button_14.value = "Button";
			if(typeof onBtn14Click == "function") {
				button_14.addEventListener("click", onBtn14Click);
			}
			container.addChild(button_14, {
				"top": "698px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_15 = new cpr.controls.Button("btn15");
			button_15.value = "Button";
			if(typeof onBtn15Click == "function") {
				button_15.addEventListener("click", onBtn15Click);
			}
			container.addChild(button_15, {
				"top": "321px",
				"left": "165px",
				"width": "100px",
				"height": "27px"
			});
			
			var button_16 = new cpr.controls.Button("btn16");
			button_16.value = "Button";
			if(typeof onBtn16Click == "function") {
				button_16.addEventListener("click", onBtn16Click);
			}
			container.addChild(button_16, {
				"top": "321px",
				"left": "264px",
				"width": "100px",
				"height": "27px"
			});
			
			var numberEditor_3 = new cpr.controls.NumberEditor("nbe3");
			numberEditor_3.format = "s#,##0.#";
			container.addChild(numberEditor_3, {
				"top": "621px",
				"left": "50px",
				"width": "137px",
				"height": "28px"
			});
			
			var button_17 = new cpr.controls.Button("btn17");
			button_17.value = "Button";
			container.addChild(button_17, {
				"top": "659px",
				"left": "112px",
				"width": "100px",
				"height": "20px"
			});
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

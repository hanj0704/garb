/*
 * App URI: 202012/gtTest
 * Source Location: 202012/gtTest.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202012/gtTest", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * gtTest.js
			 * Created at 2020. 12. 8. 오후 3:23:22.
			 *
			 * @author HANS
			 ************************************************/
			
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd = app.lookup("grd1");
				
				grd.dataSet.getColumnNames().forEach(function(each,idx){
					
					console.log(grd.header.getColumn(idx).targetColumnName);
				});
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var a = "tmpv1";
				
			//	var b = a.split("tmpv");
			//	console.log(b[b.length-1]);
				a = a.replace("tmpv","");
				console.log(a);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control; 
				
				app.lookup("grd1").header.
				
				app.lookup("grd1").redraw();
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd = app.lookup("grd2");
				
				var vaCol = grd.dataSet.getColumnNames();
				
				vaCol.forEach(function(each,idx){
					
					console.log(grd.header.getColumn(idx).targetColumnName);
				});
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd=  app.lookup("grd2");
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd = app.lookup("grd2");
				
				console.log(moment("2012-12-15").isValid());
				
				console.log(grd.getRow(0).getValue("column1"));
				var opt = new cpr.controls.Output();
				
				opt.dataType = "date";
				opt.format = 'YYYY/MM/DD';
				
				opt.value = "아니이게";
				
				console.log(opt.text);
				
				var b= 12312;
				
				console.log(isNaN(b));
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick7(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var a = app.lookup("grd1").header.getColumn(2, 1).targetColumnName;
				console.log(a);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick8(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.lookup("grd1").columnVisible(1, false);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick9(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var grd = app.lookup("grd1");
				
				var cellCnt = grd.detail.cellCount;
				var hans = [];
				for(var i = 0 ; i < cellCnt; i++) {
					var a = grd.detail.getColumn(i);
					var b = grd.getHeaderCellIndices(i);
					if(b.length > 0) {
						
						b.forEach(function(each){
							 var headerCell = grd.header.getColumn(each);
							 
							 if(headerCell.targetColumnName != "" && headerCell.visible) {
							 	
							 	hans.push(headerCell.targetColumnName);
							 }
						});
					}		
				}
				console.log(hans);	
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick10(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var a = [1,2,3,4,5,6];
				
				a.splice(4,1);
				console.log(a);
				a.splice(a.indexOf(6),1);
				console.log(a);
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick11(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var cmb = app.lookup("cmb1");
				
				cmb.getItems().forEach(function(each){
					each.label = "zyzyzyzy";
				});
				
				cmb.redraw();
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick12(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick13(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var vcGrid =app.lookup("grd2");
				
				var ds = app.lookup("ds5");
				
				console.log(ds.getColumnData("column2"));
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick14(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.lookup("sms1").send();
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick15(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
				console.log(app.lookup("opt1").value)
			};
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick16(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				console.log( "0.00" == "")
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick17(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				console.log()
			}
			
			String.prototype.replaceAll = function(org,dest) {
				return this.split(org).join(dest);
			}
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick18(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var opt = app.lookup("opt2");
				
				var b = ["#",",","s"]
				var a= opt.format;
				
				b.forEach(function(each){
					a = a.replaceAll(each, "");
				});
				if(a == "") {
					a = "0";
				}
				opt.value = "";
				console.log(a);
				console.log(opt.text);
				console.log(opt.text == a);
				opt.displayExp = "text =="+a+" ? value==null||value=='' ? '' : '-' : text";
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick19(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				console.log(isNaN("zz"))
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "value1", "column5": "column51", "column6": "column61", "column7": "column71", "column8": "column81", "column9": "column91"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "value2", "column5": "column52", "column6": "column62", "column7": "column72", "column8": "column82", "column9": "column92"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "value3", "column5": "column53", "column6": "column63", "column7": "column73", "column8": "column83", "column9": "column93"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "label1", "value": "value1"},
					{"label": "label2", "value": "value2"},
					{"label": "label3", "value": "value3"},
					{"label": "label4", "value": "value4"},
					{"label": "label5", "value": "value5"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds3");
			dataSet_3.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"}
				],
				"rows": [
					{"column1": "아니이게", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61", "column7": "column71", "column8": "column81", "column9": "column91", "column10": "column101", "column11": "column111"},
					{"column1": "20201209", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62", "column7": "column72", "column8": "column82", "column9": "column92", "column10": "column102", "column11": "column112"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("ds4");
			dataSet_4.parseData({
				"columns": [
					{
						"name": "column1",
						"dataType": "string"
					},
					{"name": "column2"}
				],
				"rows": [
					{"column1": "1.23123", "column2": "column21"},
					{"column1": "2.23123", "column2": "column22"},
					{"column1": "3", "column2": "column23"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("ds5");
			dataSet_5.parseData({
				"columns": [
					{
						"name": "column1",
						"dataType": "number"
					},
					{
						"name": "column2",
						"dataType": "number"
					},
					{"name": "column3"}
				],
				"rows": [
					{"column1": "1", "column2": "1", "column3": "20201215"},
					{"column1": "2", "column2": "2", "column3": "20201215"},
					{"column1": "3", "column2": "3", "column3": "20201215"},
					{"column1": "", "column2": "", "column3": "합계"}
				]
			});
			app.register(dataSet_5);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "202012/c1c2Data3.json";
			submission_1.addResponseData(dataSet_5, false);
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds3"),
				"columns": [
					{
						"width": "100px",
						"visible": false
					},
					{
						"width": "100px",
						"visible": false
					},
					{
						"width": "100px",
						"visible": false
					},
					{
						"width": "100px",
						"visible": false
					},
					{
						"width": "100px",
						"visible": false
					},
					{
						"width": "100px",
						"visible": false
					},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "70px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "qwew\r\nqwe";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "column6";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.targetColumnName = "column7";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "ad";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.targetColumnName = "column8";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.targetColumnName = "column9";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column9";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.targetColumnName = "column10";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column10";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.targetColumnName = "column11";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column11";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.columnName = "column9";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.columnName = "column10";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.columnName = "column11";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "69px",
				"left": "20px",
				"width": "984px",
				"height": "223px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "Button";
			if(typeof onButtonClick7 == "function") {
				button_1.addEventListener("click", onButtonClick7);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "Button";
			if(typeof onButtonClick8 == "function") {
				button_2.addEventListener("click", onButtonClick8);
			}
			container.addChild(button_2, {
				"top": "20px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "Button";
			container.addChild(button_3, {
				"top": "20px",
				"left": "240px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_4 = new cpr.controls.Button();
			button_4.value = "Button";
			if(typeof onButtonClick9 == "function") {
				button_4.addEventListener("click", onButtonClick9);
			}
			container.addChild(button_4, {
				"top": "20px",
				"left": "350px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_5 = new cpr.controls.Button();
			button_5.value = "Button";
			if(typeof onButtonClick10 == "function") {
				button_5.addEventListener("click", onButtonClick10);
			}
			container.addChild(button_5, {
				"top": "20px",
				"left": "462px",
				"width": "100px",
				"height": "20px"
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			(function(comboBox_1){
				comboBox_1.addItem(new cpr.controls.Item("label1", "value1"));
				comboBox_1.addItem(new cpr.controls.Item("label2", "value2"));
				comboBox_1.addItem(new cpr.controls.Item("label3", "value3"));
				comboBox_1.addItem(new cpr.controls.Item("label4", "value4"));
			})(comboBox_1);
			container.addChild(comboBox_1, {
				"top": "302px",
				"left": "119px",
				"width": "100px",
				"height": "20px"
			});
			
			var comboBox_2 = new cpr.controls.ComboBox("cmb2");
			(function(comboBox_2){
			})(comboBox_2);
			container.addChild(comboBox_2, {
				"top": "302px",
				"left": "229px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_6 = new cpr.controls.Button();
			button_6.value = "Button";
			if(typeof onButtonClick11 == "function") {
				button_6.addEventListener("click", onButtonClick11);
			}
			container.addChild(button_6, {
				"top": "378px",
				"left": "119px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_7 = new cpr.controls.Button();
			button_7.value = "Button";
			if(typeof onButtonClick12 == "function") {
				button_7.addEventListener("click", onButtonClick12);
			}
			container.addChild(button_7, {
				"top": "378px",
				"left": "240px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_2 = new cpr.controls.Grid("grd2");
			grid_2.init({
				"dataSet": app.lookup("ds5"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
								cell.control = (function(){
									var output_1 = new cpr.controls.Output();
									output_1.value = "Output";
									output_1.dataType = "number";
									output_1.format = "#,##0";
									output_1.displayExp = "text == \"0\" ? \"-\" : text";
									output_1.bind("value").toDataColumn("column1");
									return output_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
								cell.control = (function(){
									var output_2 = new cpr.controls.Output();
									output_2.dataType = "date";
									output_2.format = "YYYY/MM/DD";
									output_2.displayExp = "text == \"\" ? value : text";
									output_2.bind("value").toDataColumn("column3");
									return output_2;
								})();
							}
						}
					]
				}
			});
			container.addChild(grid_2, {
				"top": "408px",
				"left": "20px",
				"width": "655px",
				"height": "195px"
			});
			
			var button_8 = new cpr.controls.Button();
			button_8.value = "Button";
			if(typeof onButtonClick13 == "function") {
				button_8.addEventListener("click", onButtonClick13);
			}
			container.addChild(button_8, {
				"top": "378px",
				"left": "363px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_9 = new cpr.controls.Button();
			button_9.value = "Button";
			if(typeof onButtonClick14 == "function") {
				button_9.addEventListener("click", onButtonClick14);
			}
			container.addChild(button_9, {
				"top": "348px",
				"left": "363px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_3 = new cpr.controls.Output("opt1");
			output_3.value = "1abc";
			output_3.format = "AAAA/AA";
			container.addChild(output_3, {
				"top": "310px",
				"left": "491px",
				"width": "293px",
				"height": "58px"
			});
			
			var button_10 = new cpr.controls.Button();
			button_10.value = "Button";
			if(typeof onButtonClick15 == "function") {
				button_10.addEventListener("click", onButtonClick15);
			}
			container.addChild(button_10, {
				"top": "348px",
				"left": "794px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_11 = new cpr.controls.Button();
			button_11.value = "Button";
			if(typeof onButtonClick16 == "function") {
				button_11.addEventListener("click", onButtonClick16);
			}
			container.addChild(button_11, {
				"top": "321px",
				"left": "794px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_12 = new cpr.controls.Button();
			button_12.value = "Button";
			if(typeof onButtonClick17 == "function") {
				button_12.addEventListener("click", onButtonClick17);
			}
			container.addChild(button_12, {
				"top": "389px",
				"left": "794px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_4 = new cpr.controls.Output("opt2");
			output_4.dataType = "number";
			output_4.format = "#.##0";
			container.addChild(output_4, {
				"top": "432px",
				"left": "794px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_13 = new cpr.controls.Button();
			button_13.value = "Button";
			if(typeof onButtonClick18 == "function") {
				button_13.addEventListener("click", onButtonClick18);
			}
			container.addChild(button_13, {
				"top": "473px",
				"left": "794px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_5 = new cpr.controls.Output("opts");
			output_5.value = "Output";
			output_5.style.setClasses(["text-right"]);
			container.addChild(output_5, {
				"top": "627px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_14 = new cpr.controls.Button();
			button_14.value = "Button";
			if(typeof onButtonClick19 == "function") {
				button_14.addEventListener("click", onButtonClick19);
			}
			container.addChild(button_14, {
				"top": "657px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
		}
	});
	app.title = "gtTest";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202012/tester
 * Source Location: 202012/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202012/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tester.js
			 * Created at 2020. 11. 30. 오후 1:29:31.
			 *
			 * @author HANS
			 ************************************************/
			
			cpr.expression.ExpressionEngine.INSTANCE.registerFunction("calcBgCol", function(psValue,psColNm,pcCtrl){
				
				/** @type cpr.controls.Grid */
				var vcGrid = pcCtrl;
				
				var vcDs = vcGrid.dataSet;
				
				var a = vcDs.getUnfilteredDistinctValues(psColNm);
				var z = a.indexOf(psValue);
				console.log(z);
				if(z%2 == 0) {
					return "blue";
				} else {
					return "red";
				}
			});
			
			
			function abc(){
				return new Promise(function(resolve, reject) {
					worker.onmessage = function(e) {
						/** @type Blob */
						var blob = e.data; // blob
						console.log(e.data);
						console.log("메세지 worker.onmessage2");
						delete worker.onmessage;
						resolve(blob);
					}
					console.log("메세지 worker.onmessage3");
					worker.postMessage("hello");
				});
			}
			var worker;
			
			
			
			/*
			 * MDI 폴더에서 content-init 이벤트 발생 시 호출.
			 * TabItem의 Content가 그려질 준비를 마쳤을 때 호출되는 이벤트로 컨트롤을 그리는 스크립트가 동작한 후 호출됨.
			 */
			function onMdi1ContentInit(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.MDIFolder
				 */
				var mdi1 = e.control;
				console.log("INIT");
				
			}
			
			
			/*
			 * MDI 폴더에서 content-load 이벤트 발생 시 호출.
			 * TabItem의 Content가 그려지고 브라우저에 표현되기 직전에 호출됨.
			 */
			function onMdi1ContentLoad(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.MDIFolder
				 */
				var mdi1 = e.control;
				console.log("LOAD");
			}
			
			
			/*
			 * MDI 폴더에서 content-ready 이벤트 발생 시 호출.
			 * TabItem의 Content가 그려질 준비를 마쳤을 때 호출되는 이벤트로 컨트롤을 그리는 스크립트가 동작하기 전에 호출됨.
			 */
			function onMdi1ContentReady(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.MDIFolder
				 */
				var mdi1 = e.control;
				console.log("READY");
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var a = [{
					"idb":"column11",
					"column2":"column21"
				},{
					"idb":"column12",
					"column2":"column22"
				},{
					"idb":"column13",
					"column2":"column23"
				},{
					"idb":"column14",
					"column2":"column24"
				},{
					"idb":"column15",
					"column2":"column25"
				}
				]
				app.lookup("ds3").build(a);
				
				
			}
			
			
			/*
			 * MDI 폴더에서 close 이벤트 발생 시 호출.
			 * 탭 아이템을 닫을 때 발생하는 이벤트이며, 사용자가 취소할 수 있습니다.
			 */
			function onMdi1Close(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.MDIFolder
				 */
				var mdi1 = e.control;
				
				console.log("close");
				
				var items = mdi1.getTabItems();
				
				console.log(items);
				var item = items.filter(function(each){
					return each.text == "flowChart.clx";
				})[0];
				if(items.length == 2 && item) {
					
					item.visible = false;
					mdi1.setSelectedTabItem(item);
				}
			}
			
			var aq ;
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				console.log(app.lookup("ds3").getColumnNames());
				aq = app.lookup("ds3").getColumnNames();
				
			}
			
			
			/*
			 * "copyDataSet" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
				var ds2 = app.lookup("ds2");
				var ds3 = app.lookup("ds3");
				
				
				ds2.copyToDataSet(ds3);
				
			}
			
			
			/*
			 * "ds3 colNm" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var a = app.lookup("ds3").getColumnNames;
				console.log(a);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var a = [1,2,3,4,5];
				a.splice(1,0,a[1]);
				a.splice(3,0,a[3]);
				console.log(a);
			}
			
			
			/*
			 * "ds5 filter" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
				app.lookup("ds5").setFilter("column1 ==3");
			}
			
			
			/*
			 * "ds5 getRowData" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick7(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var a = app.lookup("ds5").getRowDataRanged();
				console.log(a);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick8(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.lookup("smsSend").send();
			}
			
			
			/*
			 * 서브미션에서 before-submit 이벤트 발생 시 호출.
			 * 통신을 시작하기전에 발생합니다.
			 */
			function onSmsSendBeforeSubmit(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var smsSend = e.control;
			//	app.lookup("ds5").forEachOfUnfilteredRows(function(DataRow){
			//		DataRow.setAttr("rowIndex", DataRow.getIndex());
			//		
			//	});
				var a = app.lookup("ds5").getUnfilteredRowDatasByState(cpr.data.tabledata.RowState.ALL);
				console.log(a[cpr.data.tabledata.RowState.INSERTED]);
				console.log(Object.keys(a));
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick9(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick10(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.lookup("grd1").insertRow(0, true);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick11(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
			//	var a = new cpr.events.CKeyboardEvent("keydown");
			//	app.dispatchEvent(a);
				document.dispatchEvent(new KeyboardEvent("keydown",{key:"Meta"}));
			}
			
			
			/*
			 * 루트 컨테이너에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onBodyKeydown(/* cpr.events.CKeyboardEvent */ e){
				console.log(e);
				console.log("ㅋㅋ");
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				document.addEventListener("keydown", function(event){
					
					console.log(event.key);
				});
			}
			
			
			/*
			 * 파일 업로드에서 sendbutton-click 이벤트 발생 시 호출.
			 * 파일을 전송하는 button을 클릭 시 발생하는 이벤트. 서브미션을 통해 전송 버튼에 대한 구현이 필요합니다.
			 */
			function onFud1SendbuttonClick(/* cpr.events.CEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var fud1 = e.control;
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick12(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var fi = app.lookup("fud1");
				
				var a = fi.getFiles();
				fi.addUploadedFile(a[0]);
				fi.removeFile(a[0]);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick13(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.lookup("fud1").getFiles().forEach(function(each){
					console.log(each instanceof cpr.controls.UploadedFile);
				});
			}
			
			
			/*
			 * 파일 업로드에서 add-file 이벤트 발생 시 호출.
			 * 파일 추가 후 발생하는 이벤트입니다.
			 */
			function onFud1AddFile(/* cpr.events.CFileUploadEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var fud1 = e.control;
				console.log("쿄쿄쿄");
			//	aqqq();
			}
			
			
			
			
			/*
			 * 파일 업로드에서 add-before-file 이벤트 발생 시 호출.
			 * 파일을 추가 하기전에 발생하는 이벤트입니다. event.preventDefault()를 하면 파일을 추가하지 않습니다.
			 */
			function onFud1AddBeforeFile(/* cpr.events.CFileUploadEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var fud1 = e.control;
				console.log("ㅋㅋ");
			}
			
			
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				var a = [1,2,3,4,5,6,7,8,9];
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds3");
			dataSet_3.parseData({
				"alterColumnLayout": "server",
				"columns": [
					{"name": "cc1"},
					{"name": "cc2"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("ds4");
			dataSet_4.parseData({
				"columns": [
					{"name": "idb"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				],
				"rows": [
					{"idb": "1", "column2": "column21", "column3": "column31", "column4": "column41"},
					{"idb": "1", "column2": "column22", "column3": "column32", "column4": "column42"},
					{"idb": "1", "column2": "column23", "column3": "column33", "column4": "column43"},
					{"idb": "2", "column2": "column24", "column3": "column34", "column4": "column44"},
					{"idb": "2", "column2": "column25", "column3": "column35", "column4": "column45"},
					{"idb": "2", "column2": "column26", "column3": "column36", "column4": "column46"},
					{"idb": "3", "column2": "column27", "column3": "column37", "column4": "column47"},
					{"idb": "3", "column2": "column28", "column3": "column38", "column4": "column48"},
					{"idb": "4", "column2": "column29", "column3": "column39", "column4": "column49"},
					{"idb": "4", "column2": "column210", "column3": "column310", "column4": "column410"},
					{"idb": "4", "column2": "column211", "column3": "column311", "column4": "column411"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("ds5");
			dataSet_5.parseData({
				"columns": [
					{
						"name": "column1",
						"dataType": "number"
					},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column6"}
				],
				"rows": [
					{"column1": "1", "column2": "column21", "column3": "column31", "column4": "column41", "column6": "1"},
					{"column1": "2", "column2": "column22", "column3": "column32", "column4": "column42", "column6": "100"},
					{"column1": "3", "column2": "column23", "column3": "column33", "column4": "column43", "column6": "2"},
					{"column1": "4", "column2": "column24", "column3": "column34", "column4": "column44", "column6": "3"},
					{"column1": "5", "column2": "column25", "column3": "column35", "column4": "column45", "column6": "4"},
					{"column1": "6", "column2": "column26", "column3": "column36", "column4": "column46", "column6": "5"},
					{"column1": "7", "column2": "column27", "column3": "column37", "column4": "column47", "column6": "99"}
				]
			});
			app.register(dataSet_5);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "column1",
						"defaultValue": ""
					},
					{
						"name": "column2",
						"defaultValue": ""
					},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "202012/c1c2Data.json";
			submission_1.addResponseData(dataMap_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.action = "dataMan/c1c2Data.json";
			submission_2.addResponseData(dataMap_1, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms3");
			submission_3.action = "202012/c1c2Data2.json";
			submission_3.addResponseData(dataMap_1, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("smsSend");
			submission_4.action = "aa/sa.do";
			submission_4.mediaType = "application/json";
			submission_4.addRequestData(dataSet_5, cpr.protocols.PayloadType.all);
			if(typeof onSmsSendBeforeSubmit == "function") {
				submission_4.addEventListener("before-submit", onSmsSendBeforeSubmit);
			}
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "ds3에 json넣기";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "136px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "ds3 colNm";
			if(typeof onButtonClick2 == "function") {
				button_2.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_2, {
				"top": "20px",
				"left": "166px",
				"width": "163px",
				"height": "20px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "copyDataSet";
			if(typeof onButtonClick3 == "function") {
				button_3.addEventListener("click", onButtonClick3);
			}
			container.addChild(button_3, {
				"top": "61px",
				"left": "20px",
				"width": "136px",
				"height": "20px"
			});
			
			var button_4 = new cpr.controls.Button();
			button_4.value = "ds3 colNm";
			if(typeof onButtonClick4 == "function") {
				button_4.addEventListener("click", onButtonClick4);
			}
			container.addChild(button_4, {
				"top": "20px",
				"left": "339px",
				"width": "163px",
				"height": "20px"
			});
			
			var tabFolder_1 = new cpr.controls.TabFolder();
			
			var tabItem_1 = (function(tabFolder){
				var tabItem_1 = new cpr.controls.TabItem();
				tabItem_1.text = "tab1";
				var group_1 = new cpr.controls.Container();
				// Layout
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
				})(group_1);
				tabItem_1.content = group_1;
				return tabItem_1;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_1);
			tabFolder_1.setSelectedTabItem(tabItem_1);
			container.addChild(tabFolder_1, {
				"top": "143px",
				"left": "20px",
				"width": "243px",
				"height": "50px"
			});
			
			var button_5 = new cpr.controls.Button();
			button_5.value = "Button";
			if(typeof onButtonClick5 == "function") {
				button_5.addEventListener("click", onButtonClick5);
			}
			container.addChild(button_5, {
				"top": "20px",
				"left": "626px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds5"),
				"suppressedCellType": "merged",
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column6";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						}
					]
				},
				"footer": {
					"rows": [
						{"height": "20px"},
						{"height": "20px"}
					],
					"cells": [
						{
							"constraint": {"rowIndex": 1, "colIndex": 0},
							"configurator": function(cell){
								cell.expr = "\"\"";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 1},
							"configurator": function(cell){
								cell.expr = "\"\"";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 2},
							"configurator": function(cell){
								cell.expr = "\"\"";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 3},
							"configurator": function(cell){
								cell.expr = "\"\"";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 4},
							"configurator": function(cell){
								cell.expr = "getMin(\"column6\")";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.expr = "\"\"";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.expr = "\"\"";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.expr = "\"\"";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.expr = "\"\"";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.expr = "getMax('Number(column6)')";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "213px",
				"left": "32px",
				"width": "620px",
				"height": "250px"
			});
			
			var button_6 = new cpr.controls.Button();
			button_6.value = "ds5 filter";
			if(typeof onButtonClick6 == "function") {
				button_6.addEventListener("click", onButtonClick6);
			}
			container.addChild(button_6, {
				"top": "61px",
				"left": "166px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_7 = new cpr.controls.Button();
			button_7.value = "ds5 getRowData";
			if(typeof onButtonClick7 == "function") {
				button_7.addEventListener("click", onButtonClick7);
			}
			container.addChild(button_7, {
				"top": "61px",
				"left": "273px",
				"width": "137px",
				"height": "20px"
			});
			
			var button_8 = new cpr.controls.Button();
			button_8.value = "Button";
			container.addChild(button_8, {
				"top": "61px",
				"left": "441px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_9 = new cpr.controls.Button();
			button_9.value = "Button";
			if(typeof onButtonClick8 == "function") {
				button_9.addEventListener("click", onButtonClick8);
			}
			container.addChild(button_9, {
				"top": "61px",
				"left": "626px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_10 = new cpr.controls.Button();
			button_10.value = "Button";
			if(typeof onButtonClick9 == "function") {
				button_10.addEventListener("click", onButtonClick9);
			}
			container.addChild(button_10, {
				"top": "61px",
				"left": "736px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_11 = new cpr.controls.Button();
			button_11.value = "Button";
			if(typeof onButtonClick10 == "function") {
				button_11.addEventListener("click", onButtonClick10);
			}
			container.addChild(button_11, {
				"top": "173px",
				"left": "464px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_12 = new cpr.controls.Button();
			button_12.value = "Button";
			if(typeof onButtonClick11 == "function") {
				button_12.addEventListener("click", onButtonClick11);
			}
			container.addChild(button_12, {
				"top": "61px",
				"left": "846px",
				"width": "100px",
				"height": "20px"
			});
			
			var fileUpload_1 = new cpr.controls.FileUpload("fud1");
			if(typeof onFud1SendbuttonClick == "function") {
				fileUpload_1.addEventListener("sendbutton-click", onFud1SendbuttonClick);
			}
			if(typeof onFud1ExtensionViolate == "function") {
				fileUpload_1.addEventListener("extension-violate", onFud1ExtensionViolate);
			}
			if(typeof onFud1AddFile == "function") {
				fileUpload_1.addEventListener("add-file", onFud1AddFile);
			}
			if(typeof onFud1RemoveFile == "function") {
				fileUpload_1.addEventListener("remove-file", onFud1RemoveFile);
			}
			if(typeof onFud1AddBeforeFile == "function") {
				fileUpload_1.addEventListener("add-before-file", onFud1AddBeforeFile);
			}
			if(typeof onFud1RemoveBeforeFile == "function") {
				fileUpload_1.addEventListener("remove-before-file", onFud1RemoveBeforeFile);
			}
			container.addChild(fileUpload_1, {
				"top": "473px",
				"left": "32px",
				"width": "450px",
				"height": "194px"
			});
			
			var button_13 = new cpr.controls.Button();
			button_13.value = "Button";
			if(typeof onButtonClick12 == "function") {
				button_13.addEventListener("click", onButtonClick12);
			}
			container.addChild(button_13, {
				"top": "473px",
				"left": "527px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_14 = new cpr.controls.Button();
			button_14.value = "Button";
			if(typeof onButtonClick13 == "function") {
				button_14.addEventListener("click", onButtonClick13);
			}
			container.addChild(button_14, {
				"top": "503px",
				"left": "527px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_15 = new cpr.controls.Button("btn1");
			button_15.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_15.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_15, {
				"top": "154px",
				"left": "694px",
				"width": "100px",
				"height": "20px"
			});
			
			var radioButton_1 = new cpr.controls.RadioButton("rdb1");
			(function(radioButton_1){
				radioButton_1.addItem(new cpr.controls.Item("aa", "value1"));
				radioButton_1.addItem(new cpr.controls.Item("ss", "value2"));
			})(radioButton_1);
			container.addChild(radioButton_1, {
				"top": "571px",
				"left": "551px",
				"width": "200px",
				"height": "40px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyKeydown == "function"){
				app.getContainer().addEventListener("keydown", onBodyKeydown);
			}
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

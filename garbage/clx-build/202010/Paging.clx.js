/*
 * App URI: 202010/Paging
 * Source Location: 202010/Paging.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202010/Paging", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Paging.js
			 * Created at 2019. 8. 9. 오전 10:48:49.
			 *
			 * @author HANS
			 ************************************************/
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				app.lookup("subList").send();
			}
			
			
			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onPageIndexSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.PageIndexer
				 */
				var pageIndex = e.control;
				
				var dmPage = app.lookup("dmPage");
				
				//페이지 인덱서에서 사용자가 page index를 변경할 경우 인덱스에 맞는 새 데이터를 내려받도록 데이터 맵에 페이지 인덱스를 넣어서 서브미션을 전송합니다.
				dmPage.setValue("pageIdx", e.newSelection);
				app.lookup("subList").send();
			}
			
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubListSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subList = e.control;
				//서브미션으로 데이터 통신이 끝났을 경우, 내려온 totCnt, rowSize를 이용하여 페이지 인덱서를 그려야 하므로 페이지 인덱서를 다시그려줍니다.
				app.lookup("pageIndex").redraw();
				
			}
			
			
			/*
			 * 데이터셋에서 sort 이벤트 발생 시 호출.
			 * 데이터가 정렬되는 경우 발생하는 이벤트. 발생 메소드 : setSort, setSortExpr, clearSort
			 */
			function onDs1Sort(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = e.control;
				
				var vcGrid = app.lookup("grd1");
				var dmPage = app.lookup("dmPage");
				
				//그리드 헤더에서 sortCondition 을 지정해줄 때, 오름차순인지 내림차순인지에 대한 값을 가져옵니다.
				var vsSortCondition = vcGrid.getSort();
				vsSortCondition = vsSortCondition.split(" ")[1];
				
				console.log(vsSortCondition);
				if(vsSortCondition == "desc") {
					//내림차순일 경우 쿼리에서 desc를 사용하기 위해 데이터맵에 입력해줍니다. 
					dmPage.setValue("sortCondition", "desc");
					
				} else {
					//오름차순일 경우 쿼리에서 asc를 사용하기 위해 데이터맵에 입력해줍니다.
					dmPage.setValue("sortCondition", "asc");
				}
				
				//정렬 조건을 지정하고 서브미션을 전송합니다.
				app.lookup("subList").send();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns" : [
					{
						"name": "board_no",
						"dataType": "number"
					},
					{"name": "title"},
					{"name": "content"}
				]
			});
			if(typeof onDs1Sort == "function") {
				dataSet_1.addEventListener("sort", onDs1Sort);
			}
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dmPage");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "totCnt",
						"defaultValue": "0"
					},
					{
						"name": "rowSize",
						"defaultValue": "10"
					},
					{
						"name": "pageIdx",
						"defaultValue": "1"
					},
					{
						"name": "sortCondition",
						"defaultValue": "asc"
					}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subList");
			submission_1.action = "./paging/list.do";
			submission_1.addParameter("a", null);
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_1, false);
			if(typeof onSubListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubListSubmitSuccess);
			}
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.leftMargin = 20;
			verticalLayout_1.rightMargin = 20;
			verticalLayout_1.topMargin = 20;
			verticalLayout_1.bottomMargin = 20;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "페이지 인덱싱";
			output_1.style.css({
				"font-weight" : "bold",
				"font-size" : "14pt"
			});
			container.addChild(output_1, {
				"width": "100px",
				"height": "46px"
			});
			
			var output_2 = new cpr.controls.Output("opt2");
			output_2.value = " 해당 화면은 데이터베이스에 접근하여 가져온 데이터를 바탕으로, 페이지 인덱서 컨트롤을 활용한 인덱싱 예제입니다.\r\n데이터 맵에 인덱싱에 필요한[전체 데이터량, 한 페이지에 보여질 행의 수 , 현재 사용자가 선택한 인덱스]를 서버로 보내서, \r\n쿼리를 통해 특정 위치부터 지정한 갯수만큼의 데이터를 보여주는 예제입니다.\r\n 또한 그리드 상단에 있는 단일 정렬 조건을 클릭할 경우, 정렬 조건을 데이터맵에 담아 조건으로 보내서 , 쿼리를 통해 가져올 \r\n데이터의 정렬조건을 변환하여 오름차순, 내림차순으로 정렬된 데이터에서 인덱싱을 하는 기능을 구현하였습니다.\r\n 스크립트에 대한 해설을 참조하였으니, 스크립트 편집기를 확인하시기 바랍니다.\r\n예제를 받아보셔서 확인하실 경우, db 통신을 전제하고 있기 때문에 , context.xml에서 dataSource항목과, mybatis부분을 확인해주시기 바랍니다.\r\n쿼리는 mariadb기준으로 작성되었습니다.";
			output_2.style.css({
				"border-top-width" : "1px",
				"border-top-color" : "black",
				"border-top-style" : "solid"
			});
			container.addChild(output_2, {
				"width": "100px",
				"height": "189px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.readOnly = false;
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columnMovable": false,
				"resizableColumns": "none",
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "board_no";
								cell.filterable = false;
								cell.sortable = false;
								cell.sortColumnName = "board_no";
								cell.text = "board_no";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "title";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "title";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "content";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "content";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "board_no";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "title";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "content";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"autoSize": "height",
				"width": "984px",
				"height": "446px"
			});
			
			var pageIndexer_1 = new cpr.controls.PageIndexer("pageIndex");
			pageIndexer_1.bind("totalRowCount").toDataMap(app.lookup("dmPage"), "totCnt");
			pageIndexer_1.bind("pageRowCount").toDataMap(app.lookup("dmPage"), "rowSize");
			pageIndexer_1.init(1, 1, 1);
			if(typeof onPageIndexSelectionChange == "function") {
				pageIndexer_1.addEventListener("selection-change", onPageIndexSelectionChange);
			}
			container.addChild(pageIndexer_1, {
				"width": "984px",
				"height": "40px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "Paging";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202010/tester
 * Source Location: 202010/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202010/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tester.js
			 * Created at 2020. 10. 5. 오후 2:59:59.
			 *
			 * @author HANS
			 ************************************************/
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
			
				var fi1 = app.lookup("fi1");
				
				var files = fi1.file;
				
				var rawFile = new XMLHttpRequest();
				rawFile.open("GET", files, false);
				
			//	var cont = new cpr.controls.Container("abc");
			//	
			//	
			//	var output = new cpr.controls.Output();
			//	
			//	output.value = "뮻ㅇㅁ";
			//	
			//	var xyLayout = new cpr.controls.layouts.XYLayout();
			//	cont.setLayout(xyLayout);
			//	
			//	cont.addChild(output, {
			//		"left" : "0px",
			//		"top" : "0px",
			//		"width" : "100px",
			//		"height" : "20px"
			//	});
			//	
			//	app.getContainer().floatControl(cont,{
			//		"left" : "100px",
			//		"top" : "100px",
			//		"width" : "100px",
			//		"height" : "20px"
			//	});
			//	var tre = app.lookup("tre1");
			//	tre.setSubTreeChecked(tre.getItemByValue("1"), true);
			//	app.lookup("tre1").setCheckedChildren(app.lookup("tre1").getItemByValue("1"), true);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var tre = app.lookup("tre1");	
				
			//	var item = tre.getItemByValue("1");
				
				
			//	var childrens = tre.getChildren(item);
				
			//	tre.setCheckedChildren(item, state);
			
			//	console.log(tre.getCheckedItems());
			//	console.log(tre.getSelectedDataSetIndices());
				console.log(tre.getCheckedItems());
				tre.setSubTreeChecked(tre.getItemByValue("1"), false);
			}
			
			
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var vcTrees = new cpr.controls.Tree();
			//		vcTrees.showItemCheckbox = true;
			//		vcTrees.setItemSet( app.lookup("ds1"), {
			//			"label" : "label",
			//			"value" : "value",
			//			"parentValue" :"parentV"
			//		});		
			//			
			//			var vsRootValue = "1";
			//			
			//			vcTrees.setSubTreeChecked(vcTrees.getItemByValue("1"), true);
			//			
			//			console.log(vcTrees.getCheckedItems())
			
				app.lookup("tre1").getCheckedItems().forEach(function(each){
					
					vcTrees.addItem(new cpr.controls.TreeItem(each.label, each.value, each.parentValue));
				});
				
				app.getContainer().addChild(vcTrees, {
					"top" : "500px",
					"left" :"500px",
					"width":"200px",
					"height":"500px"
				});
			}
			
			
			/*
			 * "Button" 버튼에서 mouseenter 이벤트 발생 시 호출.
			 * 마우스 포인터가 컨트롤 위에 진입할 때 발생하는 이벤트.
			 */
			function onButtonMouseenter(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.getContainer().floatControl(button,{
					"left" : "0px",
					"top" :"0px",
					"bottom":"0px",
					"width":"400px"
				});
			}
			
			
			/*
			 * "Button" 버튼에서 mouseleave 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 및 컨트롤의 자식 영역 바깥으로 마우스 포인터를 이동할 때 발생하는 이벤트.
			 */
			function onButtonMouseleave(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.lookup("grp1").addChild(button, {
					"left" : "0px",
					"top" :"0px",
					"bottom":"0px",
					"width":"45px"
				});
				
			}
			
			
			/*
			 * 트리에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onTre1ItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var tre1 = e.control;
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
			
				var mdi = app.lookup("mdi1");	
					
				
			}
			
			
			/*
			 * 루트 컨테이너에서 screen-change 이벤트 발생 시 호출.
			 * 스크린 크기 변경 시 호출되는 이벤트.
			 */
			function onBodyScreenChange(/* cpr.events.CScreenChangeEvent */ e){
				
				var grd = app.lookup("grd1");
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
			
				var grd = app.lookup("grd1");
				
				console.log(grd.leftSplitWidth);
				console.log(grd.rightSplitWidth);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var tf1 = app.lookup("tf1");
				
				console.log(tf1.getItemByName("tab1"));
				
				var a ={
					a : 1,
					b : 2,
					c : 3
				}
				
				var ab = JSON.stringify(a);	
				
				console.log(JSON.parse('"'+ab+'"'));
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick7(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var tf = app.lookup("tf1");
				
				var items = tf.getTabItems()[0];
				
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick8(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd = app.lookup("grd1");
				
				console.log(grd.header);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick9(/* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
				var grid = app.lookup("grd1");
				
				console.log(grid.getColumnLayout().header);
					
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick10(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			//	app.lookup("si1").putValue(value);
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick11(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				console.log(app.lookup("tre1").getChildren(app.lookup("tre1").getItems()[0]));
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick12(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parentV"}
				],
				"rows": [
					{"label": "label1", "value": "1", "parentV": ""},
					{"label": "label2", "value": "2", "parentV": ""},
					{"label": "label3", "value": "3", "parentV": ""},
					{"label": "label4", "value": "4", "parentV": "1"},
					{"label": "label5", "value": "5", "parentV": "4"},
					{"label": "label6", "value": "6", "parentV": "5"},
					{"label": "label7", "value": "7", "parentV": "5"},
					{"label": "label8", "value": "8", "parentV": "5"},
					{"label": "label9", "value": "9", "parentV": "8"},
					{"label": "label10", "value": "10", "parentV": ""},
					{"label": "label11", "value": "11", "parentV": ""}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61", "column7": "column71", "column8": "column81", "column9": "column91"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62", "column7": "column72", "column8": "column82", "column9": "column92"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "column63", "column7": "column73", "column8": "column83", "column9": "column93"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "column64", "column7": "column74", "column8": "column84", "column9": "column94"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55", "column6": "column65", "column7": "column75", "column8": "column85", "column9": "column95"}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "Button";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "536px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "Button";
			if(typeof onButtonClick2 == "function") {
				button_2.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_2, {
				"top": "20px",
				"left": "646px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "Button";
			if(typeof onButtonClick3 == "function") {
				button_3.addEventListener("click", onButtonClick3);
			}
			container.addChild(button_3, {
				"top": "50px",
				"left": "646px",
				"width": "100px",
				"height": "20px"
			});
			
			var menu_1 = new cpr.controls.Menu();
			menu_1.expandTrigger = "click";
			(function(menu_1){
				menu_1.setItemSet(app.lookup("ds1"), {
					"label": "label",
					"value": "value",
					"parentValue": "parentV"
				});
			})(menu_1);
			container.addChild(menu_1, {
				"top": "20px",
				"left": "770px",
				"width": "234px",
				"height": "232px"
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_4 = new cpr.controls.Button();
				button_4.value = "Button";
				if(typeof onButtonMouseenter == "function") {
					button_4.addEventListener("mouseenter", onButtonMouseenter);
				}
				if(typeof onButtonMouseleave == "function") {
					button_4.addEventListener("mouseleave", onButtonMouseleave);
				}
				container.addChild(button_4, {
					"top": "0px",
					"bottom": "0px",
					"left": "0px",
					"width": "45px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"bottom": "0px",
				"left": "0px",
				"width": "50px"
			});
			
			var button_5 = new cpr.controls.Button();
			button_5.value = "Button";
			if(typeof onButtonClick4 == "function") {
				button_5.addEventListener("click", onButtonClick4);
			}
			container.addChild(button_5, {
				"top": "69px",
				"left": "437px",
				"width": "100px",
				"height": "20px"
			});
			
			var fileInput_1 = new cpr.controls.FileInput("fi1");
			container.addChild(fileInput_1, {
				"top": "20px",
				"left": "437px",
				"width": "100px",
				"height": "20px"
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.visible = false;
			hTMLSnippet_1.value = "<style type=\"text/css\"> \r\n.cl-output.hintman {\r\n  background-color: #4D5052;\r\n  opacity: 0.5;\r\n  border-radius: 5px;\r\n  color: white;\r\n  padding-left: 10px;\r\n}\r\n.cl-output.hintman:not(.cl-selected):hover {\r\n  opacity: 1;\r\n}\r\n<\/style>";
			container.addChild(hTMLSnippet_1, {
				"top": "463px",
				"left": "94px",
				"width": "130px",
				"height": "43px"
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.value = "class : hintman";
			output_1.style.setClasses(["hintman"]);
			container.addChild(output_1, {
				"top": "463px",
				"left": "225px",
				"width": "192px",
				"height": "43px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds2"),
				"columnMovable": true,
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.targetColumnName = "column6";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.targetColumnName = "column7";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.targetColumnName = "column8";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.targetColumnName = "column9";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column9";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.columnName = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.columnName = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.columnName = "column9";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						}
					]
				}
			});
			if(typeof onGrd1MeasureSize == "function") {
				grid_1.addEventListener("measure-size", onGrd1MeasureSize);
			}
			if(typeof onGrd1Scroll == "function") {
				grid_1.addEventListener("scroll", onGrd1Scroll);
			}
			if(typeof onGrd1FilterdialogClose == "function") {
				grid_1.addEventListener("filterdialog-close", onGrd1FilterdialogClose);
			}
			if(typeof onGrd1Expand == "function") {
				grid_1.addEventListener("expand", onGrd1Expand);
			}
			container.addChild(grid_1, {
				"right": "20px",
				"bottom": "20px",
				"left": "94px",
				"height": "217px"
			});
			
			var button_6 = new cpr.controls.Button();
			button_6.value = "Button";
			if(typeof onButtonClick5 == "function") {
				button_6.addEventListener("click", onButtonClick5);
			}
			container.addChild(button_6, {
				"top": "505px",
				"left": "446px",
				"width": "100px",
				"height": "20px"
			});
			
			var mDIFolder_1 = new cpr.controls.MDIFolder("mdi1");
			
			var tabItem_1 = (function(tabFolder){
				var tabItem_1 = new cpr.controls.TabItem();
				tabItem_1.text = "verticalTest.clx";
				var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
				cpr.core.App.load("202010/verticalTest", function(app) {
					if(app){
						embeddedApp_1.app = app;
					}
				});
				tabItem_1.content = embeddedApp_1;
				return tabItem_1;
			})(mDIFolder_1);
			mDIFolder_1.addTabItem(tabItem_1);
			mDIFolder_1.setSelectedTabItem(tabItem_1);
			container.addChild(mDIFolder_1, {
				"top": "119px",
				"left": "437px",
				"width": "323px",
				"height": "257px"
			});
			
			var tabFolder_1 = new cpr.controls.TabFolder("tf1");
			tabFolder_1.userAttr({"tab-movable": "true"});
			
			var tabItem_2 = (function(tabFolder){
				var tabItem_2 = new cpr.controls.TabItem();
				tabItem_2.text = "tab1";
				tabItem_2.name = "tab1";
				var group_2 = new cpr.controls.Container();
				// Layout
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
				})(group_2);
				tabItem_2.content = group_2;
				return tabItem_2;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_2);
			
			var tabItem_3 = (function(tabFolder){
				var tabItem_3 = new cpr.controls.TabItem();
				tabItem_3.text = "tab 2";
				tabItem_3.name = "tab 2";
				var group_3 = new cpr.controls.Container();
				// Layout
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				group_3.setLayout(xYLayout_4);
				(function(container){
				})(group_3);
				tabItem_3.content = group_3;
				return tabItem_3;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_3);
			
			var tabItem_4 = (function(tabFolder){
				var tabItem_4 = new cpr.controls.TabItem();
				tabItem_4.text = "tab 3";
				tabItem_4.name = "tab 3";
				var group_4 = new cpr.controls.Container();
				// Layout
				var xYLayout_5 = new cpr.controls.layouts.XYLayout();
				group_4.setLayout(xYLayout_5);
				(function(container){
				})(group_4);
				tabItem_4.content = group_4;
				return tabItem_4;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_4);
			tabFolder_1.setSelectedTabItem(tabItem_2);
			container.addChild(tabFolder_1, {
				"top": "262px",
				"left": "770px",
				"width": "200px",
				"height": "173px"
			});
			
			var button_7 = new cpr.controls.Button();
			button_7.value = "Button";
			if(typeof onButtonClick6 == "function") {
				button_7.addEventListener("click", onButtonClick6);
			}
			container.addChild(button_7, {
				"top": "445px",
				"left": "770px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_8 = new cpr.controls.Button();
			button_8.value = "Button";
			if(typeof onButtonClick7 == "function") {
				button_8.addEventListener("click", onButtonClick7);
			}
			container.addChild(button_8, {
				"top": "445px",
				"left": "880px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_9 = new cpr.controls.Button();
			button_9.value = "Button";
			if(typeof onButtonClick8 == "function") {
				button_9.addEventListener("click", onButtonClick8);
			}
			container.addChild(button_9, {
				"top": "505px",
				"left": "556px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_10 = new cpr.controls.Button();
			button_10.value = "Button";
			if(typeof onButtonClick9 == "function") {
				button_10.addEventListener("click", onButtonClick9);
			}
			container.addChild(button_10, {
				"top": "505px",
				"left": "660px",
				"width": "100px",
				"height": "20px"
			});
			
			var searchInput_1 = new cpr.controls.SearchInput("si1");
			container.addChild(searchInput_1, {
				"top": "50px",
				"left": "60px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_11 = new cpr.controls.Button();
			button_11.value = "Button";
			if(typeof onButtonClick10 == "function") {
				button_11.addEventListener("click", onButtonClick10);
			}
			container.addChild(button_11, {
				"top": "80px",
				"left": "60px",
				"width": "100px",
				"height": "20px"
			});
			
			var tree_1 = new cpr.controls.Tree("tre1");
			(function(tree_1){
				tree_1.setItemSet(app.lookup("ds1"), {
					"label": "label",
					"value": "value",
					"parentValue": "parentV"
				});
			})(tree_1);
			container.addChild(tree_1, {
				"top": "110px",
				"left": "60px",
				"width": "303px",
				"height": "142px"
			});
			
			var button_12 = new cpr.controls.Button();
			button_12.value = "Button";
			if(typeof onButtonClick11 == "function") {
				button_12.addEventListener("click", onButtonClick11);
			}
			container.addChild(button_12, {
				"top": "262px",
				"left": "60px",
				"width": "100px",
				"height": "20px"
			});
			
			var maskEditor_1 = new cpr.controls.MaskEditor("mse1");
			container.addChild(maskEditor_1, {
				"top": "263px",
				"left": "256px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_2 = new cpr.controls.Grid("grd2");
			grid_2.init({
				"dataSet": app.lookup("ds2"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "column6";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.targetColumnName = "column7";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.targetColumnName = "column8";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.targetColumnName = "column9";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column9";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.columnName = "column9";
							}
						}
					]
				}
			});
			container.addChild(grid_2, {
				"top": "292px",
				"left": "94px",
				"width": "312px",
				"height": "161px"
			});
			
			var button_13 = new cpr.controls.Button();
			button_13.value = "Button";
			if(typeof onButtonClick12 == "function") {
				button_13.addEventListener("click", onButtonClick12);
			}
			container.addChild(button_13, {
				"top": "80px",
				"left": "170px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyScreenChange == "function"){
				app.addEventListener("screen-change", onBodyScreenChange);
			}
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

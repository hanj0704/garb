/*
 * App URI: 202010/GridWidthConfigurer
 * Source Location: 202010/GridWidthConfigurer.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202010/GridWidthConfigurer", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * GridWidthConfigurer.js
			 * Created at 2020. 10. 5. 오전 8:52:38.
			 *
			 * @author HANS
			 ************************************************/
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var vcGrid = app.lookup("grd1");
				
			//	var a = 100;
			//	vcGrid.header.getColumn(0).context.columnLayout.forEach(function(each){
			//		
			//		each.width = a;
			//		a += 10;
			//	});
			//	
				//TODO
				/*
				 * 그리드에서 
				 */
				
				var a = vcGrid.getColumnLayout();
				var width = 100;
			//	a.columnLayout.forEach(function(each){
			//		each.width = width;
			//		width+= 15;
			//	});
				vcGrid.setColumnLayout(a);
				vcGrid.redraw();
			}
			
			/**
			 * 
			 * @param {cpr.controls.Grid} pcGrid
			 */
			function checkGridHeadMove(pcGrid){
				
				
			}
			
			/*
			 * 그리드에서 mouseup 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 위에 포인터를 위치한 상태로 마우스 버튼을 뗄 때 발생하는 이벤트.
			 */
			function onGrd1Mouseup(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				
				checkGridHeadMove(grd1);
			}
			
			
			/*
			 * 그리드에서 drop 이벤트 발생 시 호출.
			 * 마우스로 소스 컨트롤을 드래그 중 타겟 컨트롤에 소스 컨트롤을 드롭할 때 발생하는 이벤트.
			 */
			function onGrd1Drop(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				
				
			//	if(e.targetObject.relativeTargetName == "header")
				var vnColLen = grd1.columnCount;
				
			//	for ( var i = 0 ; i <vnColLen ; i++) {
			//		
			//		console.log(grd1.header.getColumn(i).targetColumnName);
			//	}
				
			//	console.log(grd1.getRow(1).getRowData());
				var a = grd1.getExportData({
					exceptStyle : true,
					applyFormat : true
				});
				
				var headerArray = [];
				setTimeout(function(){
					grd1.forEachOfGridCells(function(GridCellInfo){
						GridCellInfo.filter(function(each){
							return each.region =="header";
						}).forEach(function(eachs){
							headerArray.push(eachs.columnName);
						});
					});
			//			console.log(headerArray);
				}, 200);
				
			
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var vcGrid = app.lookup("grd1");
					var voColumnLayout = vcGrid.getColumnLayout();
					
					vcGrid.setColumnLayout(voColumnLayout);
					
					console.log(voColumnLayout);
			//		var voHeader = voColumnLayout.header;
			//		
			//		var vaColName = [];
			//		voHeader.forEach(function(each){
			//			
			//			vaColName.push(vcGrid.header.getColumn(each.cellIndex).getText());
			//		});
			//		
			//		console.log(vaColName);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "column63"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "column64"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = linker.grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columnMovable": true,
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "column6";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column6";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						}
					]
				}
			});
			if(typeof onGrd1Mouseup == "function") {
				grid_1.addEventListener("mouseup", onGrd1Mouseup);
			}
			if(typeof onGrd1Drop == "function") {
				grid_1.addEventListener("drop", onGrd1Drop);
			}
			container.addChild(grid_1, {
				"top": "58px",
				"right": "10px",
				"left": "9px",
				"height": "268px"
			});
			
			var userDefinedControl_1 = linker.userDefinedControl_1 = new udc.grids.gridFitButton();
			container.addChild(userDefinedControl_1, {
				"top": "13px",
				"right": "10px",
				"width": "35px",
				"height": "35px"
			});
			// Linking
			linker.userDefinedControl_1.gridControl = linker.grid_1;
		}
	});
	app.title = "GridWidthConfigurer";
	cpr.core.Platform.INSTANCE.register(app);
})();

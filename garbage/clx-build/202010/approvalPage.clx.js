/*
 * App URI: 202010/approvalPage
 * Source Location: 202010/approvalPage.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202010/approvalPage", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * draftMan.js
			 * Created at 2020. 7. 30. 오후 5:45:52.
			 *
			 * @author han
			 ************************************************/
			
			var util = createCommonUtil();
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				
				/** @type {pageParam:String,copyData:Object} */
				var voHostProp = app.getHostProperty("initValue");
				var voPasteData = voHostProp["copyData"];
				
				var vcEmbApp = app.lookup("ea1");
				
				cpr.core.App.load(voHostProp["pageParam"], function(loadedApp) {//파라미터로 불러온 pageParam을 통해 해당 이름을 가진 앱을 로드합니다.
					
					vcEmbApp.app = loadedApp;//로드된 앱을 임베디드앱 컨트롤의 앱으로 지정하면 임베디드앱에서 해당 앱이 실행됩니다.
					
					vcEmbApp.addEventListener("app-ready", function(e) {//임베디드 앱의 이벤트중 app-ready이벤트에 리스너를 추가하여 앱의 load이벤트 이전의 작업을 수행합니다.
						
						var voNewAppIns = vcEmbApp.getEmbeddedAppInstance();//임베디드 앱에서 불러낸 loadedApp의 앱 인스턴스를 가져옵니다.
						voNewAppIns.removeAllEventListeners();//임베디드앱에서 보여지는 앱은 단순 데이터를 확인하는 용도이기 때문에 모든 이벤트리스너를 제거하여 동작하지 않게 만듭니다.
			
						voNewAppIns.getContainer().getAllRecursiveChildren().forEach(function(each) {
							each.removeAllEventListeners();//앱 내에 포함된 컨트롤들의 이벤트 리스너도 전부 제거합니다.
						});
						
						voNewAppIns.addEventListenerOnce("load", function(ev) {//앱의 모든 이벤트리스너를 제거하고, load되었을 때 복사한 데이터를 붙여넣기 하기 위해 새 이벤트리스너를 하나 추가합니다.
							
							voPasteData.dataComponent.forEach(function(each) {//데이터 컴포넌트들은 build하여 데이터셋, 맵과 연결된 컨트롤들에 행들을 추가시켜줍니다.
								
								var dataComponent = voNewAppIns.lookup(each.id);
								dataComponent.build(each.value);
							});
							
							voPasteData.control.forEach(function(each) {//복사된 화면에서 가져온 각 컨트롤들의 value를 putValue를 통해 값을 집어넣습니다.
								
								var iterCtrls = voNewAppIns.lookup(each.id);
								if(each.isBinded) {//값을 복사하는 모듈(CopyKit)에서 컨트롤에 상대컬럼 바인딩이 되어있을 경우 isBinded attribute에 저장하게끔 작성되어있습니다.
									iterCtrls.unbind("value");//상대컬럼 바인딩이 되어있으면, 정상적으로 데이터가 보이지 않을 수 있으므로 바인딩을 지우고 값을 집어넣게끔 합니다. 이후 변경될 여지가 있습니다.
								}
								iterCtrls.putValue(each.value);
							});
							//로드된 앱 내에 udc나 임베디드 앱이 있을 경우 내부에 있는 값들도 표현하기 위한 embedded attribute
							voPasteData.embedded.forEach(function(embeds){
								
								var vbIsEmbLoaded = voNewAppIns.lookup(embeds.id).getAppInstance();
								if(vbIsEmbLoaded) {
									//임베디드앱의 경우 getEmbeddedAppInstance()를 호출할 경우 아직 로드되지 않아 null,undefined될 경우가 있어서 작성된 if문
								util.Copy.copyEmbPage(vbIsEmbLoaded, embeds.value);//udc인 경우에는 바로 데이터를 삽입하는 함수를 호출합니다.
								} else {
									//embeds가 udc가 아닌 임베디드앱인 경우에는 앱이 준비되면 그때 데이터를 삽입하는 함수를 호출하도록 합니다.
									/** @type cpr.controls.EmbeddedApp */
									var vcEmbeddedApp = voNewAppIns.lookup(embeds.id);
									vcEmbeddedApp.addEventListener("app-ready", function(e){
									var voEmbAppIns = vcEmbeddedApp.getEmbeddedAppInstance();
									
									voEmbAppIns.addEventListener("load", function(eqe){
										util.Copy.copyEmbPage(eqe.control, embeds.value);
									});
										
									});
								}
							});
							
							voNewAppIns.getContainer().readOnly = true; //readOnly를 true로 지정하여 갑을 변경할 수 없게 만들어줍니다.
							var voDialogManager = app.getRootAppInstance().dialogManager;//다이얼로그를 열 때 dialogManager로 열 경우 이렇게 자신을 호출한 부모에서 dialogManager에 접근할 수 있습니다.
			//				var voDialogRect = voDialogManager.getConstraintByName(app.app.id);
							var voContentRect = app.lookup("ea1").getEmbeddedAppInstance().getContainer().getContentPaneRect();
							//dialogRect에 calc가 적용되지 않아 임시적으로 작성된 변수입니다.
			//					app.getRootAppInstance().dialogManager.replaceConstraintByName(app.app.id, {
			//						"width" : voContentRect.width+30,
			//						"height" : voContentRect.height+100
			//					});
							
						});
						
						
					});
				});
				
			}
			
			/*
			 * "취소" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				app.close("NO");
			}
			
			/*
			 * "결재" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
			
			//	util.DataMap.setValue(app, "input","userId", getSysInfo().getValue("userId"));
				
				util.Submit.send(app, "subChck", null, function(pbSuccess){
					
					if(pbSuccess) {
						
						app.close("OK");
					} else {
						
					}
				});
			}
			// End - User Script
			
			// Header
			var dataMap_1 = new cpr.data.DataMap("input");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "userId",
						"defaultValue": ""
					},
					{
						"name": "password",
						"defaultValue": ""
					},
					{"name": "lginPw"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subList");
			submission_1.action = "/LOGIN.SVC";
			submission_1.mediaType = "application/json";
			submission_1.userAttr({"isNeedToken": "Y"});
			submission_1.setHeader("X-Auth_Token", null);
			submission_1.setHeader("X-Requested-With", "XMLHttpRequest");
			submission_1.addRequestData(dataMap_1);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subChck");
			submission_2.action = "/CMO0600A.SVC";
			submission_2.mediaType = "application/json";
			submission_2.addRequestData(dataMap_1);
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			container.addChild(embeddedApp_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "50px",
				"left": "0px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "취소";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"right": "10px",
				"bottom": "10px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "결재";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_2, {
				"right": "120px",
				"bottom": "10px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.secret = true;
			inputBox_1.bind("value").toDataMap(app.lookup("input"), "lginPw");
			container.addChild(inputBox_1, {
				"right": "230px",
				"bottom": "10px",
				"width": "100px",
				"height": "20px"
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.value = "PASSWORD :";
			container.addChild(output_1, {
				"right": "340px",
				"bottom": "10px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "approvalPage";
	cpr.core.Platform.INSTANCE.register(app);
})();

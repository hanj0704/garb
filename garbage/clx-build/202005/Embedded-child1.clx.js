/*
 * App URI: 202005/Embedded-child1
 * Source Location: 202005/Embedded-child1.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202005/Embedded-child1", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Embedded-child1.js
			 * Created at 2020. 5. 19. 오후 5:47:33.
			 *
			 * @author LHS_0212
			 ************************************************/
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				console.log(app);
				console.log(app.getHostAppInstance());
				var vcOpt1 = app.lookup("opt1");
				var vcOpt2 = app.lookup("opt2");
				var vcOpt3 = app.lookup("opt3");
				
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = app.getHostAppInstance().lookup("ds1");
				
				var rowData = ds1.getRowData(0);
				
				vcOpt1.value = rowData["column1"];
				vcOpt2.value = rowData["column2"];
				vcOpt3.value = rowData["column3"];
			}
			
			
			/*
			 * "추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var vcIpb1 = app.lookup("ipb1");
				var vcIpb2 = app.lookup("ipb2");
				var vcIpb3 = app.lookup("ipb3");
				
				var vsIpb1Value = vcIpb1.value;
				var vsIpb2Value = vcIpb2.value;
				var vsIpb3Value = vcIpb3.value;
				
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = app.getHostAppInstance().lookup("ds1");
				
				var insertRow = ds1.insertRow(ds1.getRowCount());
				insertRow.setRowData({
					"column1" : vsIpb1Value,
					"column2" : vsIpb2Value,
					"column3" : vsIpb3Value,
				})
			}
			
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var vcIpb4 = app.lookup("ipb4");
				
				var vsIpb4Value = vcIpb4.value;
				var vnIpb4Value = (vsIpb4Value*1) - 1;
				
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = app.getHostAppInstance().lookup("ds1");
				
				ds1.deleteRow(vnIpb4Value);
			}
			
			
			/*
			 * "업데이트" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var vcIpb5 = app.lookup("ipb5");
				var vcIpb6 = app.lookup("ipb6");
				var vcIpb7 = app.lookup("ipb7");
				var vcIpb8 = app.lookup("ipb8");
				
				
				var vsIpb5Value = vcIpb5.value;
				var vnIpb5Value = (vsIpb5Value*1) - 1;
				
				var vsIpb6Value = vcIpb6.value;
				var vsIpb7Value = vcIpb7.value;
				var vsIpb8Value = vcIpb8.value;
				
				
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = app.getHostAppInstance().lookup("ds1");
				
				var rowData = {
					"column1" : vsIpb6Value,
					"column2" : vsIpb7Value,
					"column3" : vsIpb8Value
				}
				
				ds1.updateRow(vnIpb5Value, rowData)
			}
			
			
			/*
			 * "조회" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;	
				
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = app.getHostAppInstance().lookup("ds1");
				
				var container = app.getContainer();
				var group_1 = app.lookup("grp1");	
				
				(function(container){				
					var grid_1 = new cpr.controls.Grid("grd1");
							grid_1.init({
								"dataSet": ds1, // 부모에서 받아온 데이터셋 셋팅
								"columns": [
									{"width": "50px"},
									{"width": "100px"},
									{"width": "100px"},
									{"width": "100px"}
								],
								"header": {
									"rows": [{"height": "24px"}],
									"cells": [
										{
											"constraint": {"rowIndex": 0, "colIndex": 0},
											"configurator": function(cell){
												cell.filterable = false;
												cell.sortable = false;
												cell.text = "row";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 1},
											"configurator": function(cell){
												cell.targetColumnName = "column1";
												cell.filterable = false;
												cell.sortable = false;
												cell.text = "column1";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 2},
											"configurator": function(cell){
												cell.targetColumnName = "column2";
												cell.filterable = false;
												cell.sortable = false;
												cell.text = "column2";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 3},
											"configurator": function(cell){
												cell.targetColumnName = "column3";
												cell.filterable = false;
												cell.sortable = false;
												cell.text = "column3";
											}
										}
									]
								},
								"detail": {
									"rows": [{"height": "24px"}],
									"cells": [
										{
											"constraint": {"rowIndex": 0, "colIndex": 0},
											"configurator": function(cell){
												cell.columnType = "rowindex";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 1},
											"configurator": function(cell){
												cell.columnName = "column1";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 2},
											"configurator": function(cell){
												cell.columnName = "column2";
											}
										},
										{
											"constraint": {"rowIndex": 0, "colIndex": 3},
											"configurator": function(cell){
												cell.columnName = "column3";
											}
										}
									]
								}
							});
							container.addChild(grid_1, {
								"colIndex": 0,
								"rowIndex": 14,
								"colSpan": 5,
								"rowSpan": 1
							});
						})(group_1);
						container.addChild(group_1, {
							"top": "0px",
							"right": "0px",
							"left": "0px",
							"height": "759px"
						});			
				
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "15px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["2fr", "2fr", "2fr", "2fr", "1fr"]);
			formLayout_1.setRows(["45px", "40px", "20px", "45px", "40px", "20px", "45px", "40px", "20px", "45px", "40px", "20px", "30px", "3px", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "부모앱의 데이터셋 값(첫 번째 로우)";
				output_1.style.css({
					"font-size" : "20pt"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 3,
					"rowSpan": 1
				});
				var output_2 = new cpr.controls.Output("opt1");
				container.addChild(output_2, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_3 = new cpr.controls.Output("opt2");
				container.addChild(output_3, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var output_4 = new cpr.controls.Output("opt3");
				container.addChild(output_4, {
					"colIndex": 2,
					"rowIndex": 1
				});
				var output_5 = new cpr.controls.Output();
				output_5.value = "데이터 셋 Row 추가";
				output_5.style.css({
					"font-size" : "20pt"
				});
				container.addChild(output_5, {
					"colIndex": 0,
					"rowIndex": 3,
					"colSpan": 2,
					"rowSpan": 1
				});
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				inputBox_1.placeholder = "column1";
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 4
				});
				var inputBox_2 = new cpr.controls.InputBox("ipb2");
				inputBox_2.placeholder = "column2";
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 4
				});
				var inputBox_3 = new cpr.controls.InputBox("ipb3");
				inputBox_3.placeholder = "column3";
				container.addChild(inputBox_3, {
					"colIndex": 2,
					"rowIndex": 4,
					"colSpan": 1,
					"rowSpan": 1
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "추가";
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 4,
					"rowIndex": 4
				});
				var output_6 = new cpr.controls.Output();
				output_6.value = "데이터 셋 Row 삭제";
				output_6.style.css({
					"font-size" : "20pt"
				});
				container.addChild(output_6, {
					"colIndex": 0,
					"rowIndex": 6,
					"colSpan": 2,
					"rowSpan": 1
				});
				var inputBox_4 = new cpr.controls.InputBox("ipb4");
				inputBox_4.placeholder = "row";
				container.addChild(inputBox_4, {
					"colIndex": 0,
					"rowIndex": 7,
					"colSpan": 1,
					"rowSpan": 1
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "삭제";
				if(typeof onButtonClick2 == "function") {
					button_2.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_2, {
					"colIndex": 4,
					"rowIndex": 7
				});
				var output_7 = new cpr.controls.Output();
				output_7.value = "데이터 셋 Row 업데이트";
				output_7.style.css({
					"font-size" : "20pt"
				});
				container.addChild(output_7, {
					"colIndex": 0,
					"rowIndex": 9,
					"colSpan": 2,
					"rowSpan": 1
				});
				var inputBox_5 = new cpr.controls.InputBox("ipb5");
				inputBox_5.placeholder = "row";
				container.addChild(inputBox_5, {
					"colIndex": 0,
					"rowIndex": 10
				});
				var button_3 = new cpr.controls.Button();
				button_3.value = "업데이트";
				if(typeof onButtonClick3 == "function") {
					button_3.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_3, {
					"colIndex": 4,
					"rowIndex": 10
				});
				var inputBox_6 = new cpr.controls.InputBox("ipb6");
				inputBox_6.placeholder = "column1";
				container.addChild(inputBox_6, {
					"colIndex": 1,
					"rowIndex": 10
				});
				var inputBox_7 = new cpr.controls.InputBox("ipb7");
				inputBox_7.placeholder = "column2";
				container.addChild(inputBox_7, {
					"colIndex": 2,
					"rowIndex": 10
				});
				var inputBox_8 = new cpr.controls.InputBox("ipb8");
				inputBox_8.placeholder = "column3";
				container.addChild(inputBox_8, {
					"colIndex": 3,
					"rowIndex": 10
				});
				var button_4 = new cpr.controls.Button("btn1");
				button_4.value = "조회";
				if(typeof onBtn1Click == "function") {
					button_4.addEventListener("click", onBtn1Click);
				}
				container.addChild(button_4, {
					"colIndex": 4,
					"rowIndex": 12
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"left": "0px",
				"height": "759px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "Embedded-child1";
	cpr.core.Platform.INSTANCE.register(app);
})();

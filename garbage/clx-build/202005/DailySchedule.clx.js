/*
 * App URI: 202005/DailySchedule
 * Source Location: 202005/DailySchedule.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202005/DailySchedule", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Page1.js
			 * Created at 2019. 12. 18. 오후 1:38:23.
			 *
			 * @author sylee
			 ************************************************/
			
			var util = createCommonUtil();
			var voGridRowData; //잘라내기, 복사, 붙여넣기 저장용 변수
			
			//그리드에서 사용할 수 있도록 함수 등록
			cpr.expression.ExpressionEngine.INSTANCE.registerFunction("calBroadEndTime", calBroadEndTime);
			
			/*드래그 표시 컨트롤 생성*/
			/**
			 * @param {Object} data
			 * @return {cpr.controls.Container} group
			 */
			function createDragSourceFeedback(data) {
			
			    //폼 레이아웃을 만들어놓는다.
			    var feedback = new cpr.controls.layouts.FormLayout();
			    feedback.horizontalSpacing = "5px";
			    feedback.verticalSpacing = "0px";
			    feedback.setColumns(["1fr", "1fr", "1fr", "1fr", "1fr"]);
			    feedback.setRows(["40px", "40px"]);
			    feedback.setColumnAutoSizing(1, true);
			    var group = new cpr.controls.Container();
			    group.setLayout(feedback);
			
			    group.style.css({
			        "opacity": "0.95",
			        "background": "#fff",
			        "border": "1px solid black"
			    });
			
			    //이미지
			    var vcImage = new cpr.controls.Image();
			    vcImage.src = data["Thumbnail"];
			
			    group.addChild(vcImage, {
			        "colIndex": 0,
			        "rowIndex": 0,
			        "colSpan": 1,
			        "rowSpan": 2
			    });
			
			    //콘텐츠 명
			    var vcContentsName = new cpr.controls.Output();
			    vcContentsName.value = data["mtrlNm"];
			
			    group.addChild(vcContentsName, {
			        "colIndex": 1,
			        "rowIndex": 0,
			        "colSpan": 4,
			        "rowSpan": 1
			    });
			
			    //콘텐츠ID
			    var vcContentsID = new cpr.controls.Output();
			    vcContentsID.ellipsis = true;
			    vcContentsID.value = data["mtrlId"];
			    group.addChild(vcContentsID, {
			        "colIndex": 1,
			        "rowIndex": 1
			    });
			
			    //플레이 시간
			    var vcDuration = new cpr.controls.Output();
			    vcDuration.dataType = "date";
			    vcDuration.dateValueFormat = "HHmmssSSS";
			    vcDuration.format = "HH:mm:ss:SS";
			    vcDuration.value = data["playRun"];
			    group.addChild(vcDuration, {
			        "colIndex": 2,
			        "rowIndex": 1
			    });
			
			    //제작일시
			    var vcImageQuality = new cpr.controls.Output();
			    vcImageQuality.dataType = "date";
			    vcImageQuality.dateValueFormat = "YYYYMMDD";
			    vcImageQuality.format = "YYYY-MM-DD";
			    vcImageQuality.value = data["playYmd"];
			    group.addChild(vcImageQuality, {
			        "colIndex": 3,
			        "rowIndex": 1
			    });
			
			    return group;
			}
			
			/**
			 * ConfirmList를 불러온다
			 */
			function loadConfirmList() {
			    var voDmDailySearch = app.lookup("dmDailySearch");
			    var voDmConfirmParam = app.lookup("dmSearch");
			    voDmConfirmParam.setValue("strCh", voDmDailySearch.getValue("chanId"));
			    voDmConfirmParam.setValue("strDate", voDmDailySearch.getValue("playYmd"));
			    voDmConfirmParam.setValue("strNo", voDmDailySearch.getValue("playNo"));
			    voDmConfirmParam.setValue("systemClf", "PL");
			    voDmConfirmParam.setValue("weekYn", "N");
			    voDmConfirmParam.setValue("dayClf", "0");
			    voDmConfirmParam.setValue("outDs", "dsConfirm");
			
			    util.Submit.send(app, "smsSelectConfirmedList", function(pbSuccess) {
			        if (pbSuccess) {
			            if (app.lookup("dsConfirm").getRow(0) === null) {
			                //dsConfirm이 null일 경우
			                app.lookup("opbConfirm").value = "[Working]";
			            } else {
			                var vsCnfYn = app.lookup("dsConfirm").getRow(0).getValue("cnfYn");
			                var vsCnfDt = app.lookup("dsConfirm").getRow(0).getValue("cnfDt");
			                var vsCnfUserId = app.lookup("dsConfirm").getRow(0).getValue("cnfUserId");
			
			                if (vsCnfYn === "Y") {
			                    app.lookup("opbConfirm").value = "[Confirmed] "
			                        + vsCnfDt.substring(0, 4) + "." + vsCnfDt.substring(4, 6) + "." + vsCnfDt.substring(6, 8) + " "
			                        + vsCnfDt.substring(8, 10) + ":" + vsCnfDt.substring(10, 12) + ":" + vsCnfDt.substring(12, 14)
			                        + " " + vsCnfUserId;
			                } else {
			                    app.lookup("otpCfn").value = "[Working]";
			                }
			
			
			            }
			            // setBtnDecide();
			        }
			    });
			}
			
			/**
			 * 해당 그리드에 컨텍스트 메뉴를 추가한다.
			 * @param {String} psGridId 그리드 ID
			 */
			function setContextMenu(psGridId) { // 그리드 ID를 받아옴
			    /** @type cpr.controls.Grid */
			    var vcGrid = app.lookup(psGridId); // 해당 그리드를 타겟으로 잡음
			
			    vcGrid.addEventListener("contextmenu", function( /*cpr.events.CMouseEvent */ e) { // 그리드에 컨텍스트 메뉴 이벤트 추가
			        if (e.targetObject == null) return; // 타겟이 해당 그리드의 Object가 아니라면 실행X
			        /** @type cpr.controls.Grid */
			        var targetGrid = e.control;
			
			        var voTargetObject = e.targetObject; // 타겟 그리드의 Object를 변수에 담음
			
			        var rootContainer = targetGrid.getAppInstance().getRootAppInstance().getContainer(); // 컨텍스트 메뉴가 공통으로 사용되고 있으므로 해당 컨텍스트 메뉴를 찾아가는 과정
			
			        if (rootContainer.getAppInstance().lookup("menuCtxCmn")) { // 컨텍스트 메뉴를 찾고
			            rootContainer.getAppInstance().lookup("menuCtxCmn").dispose(); // 커스텀해서 쓸 것이므로 제거
			        }
			
			        e.preventDefault(); // 다음 기본 동작 방지
			
			        var ctxMenu = new cpr.controls.Menu("menuCtxCmn");
			        ctxMenu.addItem(new cpr.controls.TreeItem("행추가", "1", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("행삽입", "2", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("삭제", "3", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("복사", "4", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("붙여넣기", "5", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("잘라내기", "6", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("Marking", "7", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("Sub Event", "8", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("블록재생성", "9", "root"));
			        ctxMenu.addItem(new cpr.controls.TreeItem("프로그램밴드추가", "10", "root"));
			
			        // 셀고정용 인덱스
			        var splitCellIndex = -1;
			        var targetColIndex = -1;
			        var header = targetGrid.header;
			        var cellCount = header.cellCount;
			
			        ctxMenu.addEventListener("item-click", function( /**@type cpr.events.CItemEvent */ e) { // 컨텍스트메뉴에 아이템 클릭 이벤트 추가
			
			            function setGridLayOut(targetGrid, pbReset) {
			                var voGridLayout = targetGrid.getColumnLayout();
			                var vsGridLayout = JSON.stringify(voGridLayout);
			                if (pbReset) vsGridLayout = "reset";
			                var voMenuInfo = util.Auth.getPageInfo(app);
			                var vsPageId = voMenuInfo.get("PAGE_ID");
			
			                var submission = new cpr.protocols.Submission("subGridMarge");
			                submission.action = "/EXB/GRID_C01_C.do";
			                submission.async = true;
			                submission.mediaType = "application/x-www-form-urlencoded";
			                submission.method = "post";
			                submission.responseType = "text";
			                app.register(submission);
			                submission.removeAllParameters();
			                submission.removeAllResponseData();
			                submission.addParameter("gridId", targetGrid.id);
			                submission.addParameter("pageId", vsPageId);
			                submission.addParameter("change", vsGridLayout);
			                submission.send();
			                if (pbReset) {
			                    targetGrid.resetGrid();
			                    util.Grid.init(app, targetGrid);
			                }
			            }
			
			            var itemValue = e.item.value;
			
			            //행추가
			            if (itemValue == "1") {
			                onBtnAddClick(e);
			                //행삽입
			            } else if (itemValue == "2") {
			                onBtnUpAddClick(e);
			                //삭제
			            } else if (itemValue == "3") {
			                onBtnDelClick(e);
			                //복사
			            } else if (itemValue == "4") {
			                var vnRowIndex = targetGrid.getSelectedRowIndex();
			                voGridRowData = targetGrid.getRow(vnRowIndex).getRowData();
			                //붙여넣기
			            } else if (itemValue == "5") {
			                if (voGridRowData !== undefined || voGridRowData !== null) {
			                    var vnRowIndex = targetGrid.getSelectedRowIndex();
			                    var vsStartTime = vcGrid.getSelectedRow().getValue("playTime24");
			                    targetGrid.getRow(vnRowIndex).setRowData(voGridRowData);
			                    targetGrid.setCellValue(vnRowIndex, 1, vsStartTime);
			                    targetGrid.selectRows(vnRowIndex);
			                    adjustBroadEndTime();
			                }
			                //잘라내기
			            } else if (itemValue == "6") {
			                var vnRowIndex = targetGrid.getSelectedRowIndex();
			                var vsStartTime = "";
			
			                if (vnRowIndex == 0) {
			                    vsStartTime = "02000000";
			                } else {
			                    vsStartTime = targetGrid.getRow(vnRowIndex).getValue("playTime24");
			                }
			
			                voGridRowData = targetGrid.getRow(vnRowIndex).getRowData();
			                targetGrid.deleteRow(vnRowIndex);
			                targetGrid.selectRows(vnRowIndex);
			                targetGrid.getRow(vnRowIndex).setValue("playTime24", vsStartTime);
			                adjustBroadEndTime();
			                //Marking
			            } else if (itemValue == "7") {
			                var vnRowIndex = targetGrid.getSelectedRowIndex();
			
			                targetGrid.getRow(vnRowIndex).setValue("color", "YELLOW");
			                util.Msg.alert((vnRowIndex + 1) + "번째 행 노란색으로 변경");
			                // Sub Event
			            } else if (itemValue == "8") {
			                var vnRowIndex = targetGrid.getSelectedRowIndex();
			
			                app.getRootAppInstance().openDialog("app/popup/SubEventFind", {
			                    width: 600,
			                    height: 300
			                }, function(dialog) {
			                    dialog.ready(function(dialogApp) {
			                        dialogApp.initValue = app.lookup("dmDailySearch").getValue("chanId");
			                    });
			                }).then(function(returnValue) {
			                    if (returnValue) {
			
			                    }
			                });
			                // 블록재생성
			            } else if (itemValue == "9") {
			                var vnRowIndex = targetGrid.getSelectedRowIndex();
			
			                // 프로그램밴드추가
			            } else if (itemValue == "10") {
			                var vnRowIndex = targetGrid.getSelectedRowIndex();
			                var initValue = {};
			
			                initValue["playYmd"] = app.lookup("dtiDaily").value;
			                initValue["playNo"] = app.lookup("cmbPlayNo").value;
			                initValue["chanId"] = app.lookup("cmbChan").value;
			
			                app.getRootAppInstance().openDialog("app/popup/PgmBandAdd", {
			                    width: 800,
			                    height: 500
			                }, function(dialog) {
			                    dialog.ready(function(dialogApp) {
			                        dialogApp.initValue = initValue;
			                    });
			                }).then(function(returnValue) {
			                    if (returnValue) {
			
			                    }
			                });
			            }
			            ctxMenu.dispose();
			        });
			        ctxMenu.addEventListenerOnce("blur", function( /**@type cpr.events.CFocusEvent*/ e) {
			            //rootContainer.removeChild(ctxMenu);
			            ctxMenu.dispose();
			        });
			
			        /**@type cpr.controls.Container */
			
			        var showConstraint = {
			            "position": "absolute",
			            "top": e.clientY + "px",
			            "left": (e.clientX - 130) + "px",
			            "width": "200px",
			            "height": "60px"
			        };
			        rootContainer.addChild(ctxMenu, showConstraint);
			
			        ctxMenu.focus();
			    });
			
			    //그리드 noData
			    vcGrid.noDataMessage = "조회된 내역이 없습니다.";
			}
			
			
			/**
			 * 서브이벤트의 시작시간, 메인이벤트의 운행길이로 서브이벤트의 운행길이를 측정
			 * 
			 */
			function subtractRunTime(vsBroadStart, vsBroadRun){
				
				var vsBroadHour = vsBroadStart.substring(0, 2);
			    var vsBroadMin = vsBroadStart.substring(2, 4);
			    var vsBroadSec = vsBroadStart.substring(4, 6);
			    var vsBroadFrm = vsBroadStart.substring(6, 8);
			
			    // 운행길이 시, 분, 초, 프레임
			    var vsBroadRunHour = vsBroadRun.substring(0, 2);
			    var vsBroadRunMin = vsBroadRun.substring(2, 4);
			    var vsBroadRunSec = vsBroadRun.substring(4, 6);
			    var vsBroadRunFrm = vsBroadRun.substring(6, 8);
				var vnFrm = Number(vsBroadRunFrm) - Number(vsBroadFrm);
				var vnSec = Number(vsBroadSec) - Number(vsBroadRunSec);
				var vnMin = Number(vsBroadRunMin) - Number(vsBroadMin);
				var vnHour = Number(vsBroadRunHour) - Number(vsBroadHour);
				
				 if(vnFrm < 0) {
				 	vnFrm += 30;
				 	vnSec += -1;
				 }
				 if(vnSec < 0) {
				 	vnSec += 60;
				 	vnMin += -1;
				 }
				 if(vnMin < 0) {
				 	vnMin += 60;
				 	vnHour += -1;
				 }
				 var vsResult = "";
			    if (vnHour < 10) {
			        vsResult += "0" + vnHour;
			    } else {
			        vsResult += String(vnHour);
			    }
			    if (vnMin < 10) {
			        vsResult += "0" + vnMin;
			    } else {
			        vsResult += String(vnMin);
			    }
			    if (vnSec < 10) {
			        vsResult += "0" + vnSec;
			    } else {
			        vsResult += String(vnSec);
			    }
			    if (vnFrm < 10) {
			        vsResult += "0" + vnFrm;
			    } else {
			        vsResult += String(vnFrm);
			    }
			
			    return vsResult;
			}
			function calcBroadEndTimeSimple(vsBroadStart,vsBroadRun){
				var vsBroadHour = vsBroadStart.substring(0, 2);
			    var vsBroadMin = vsBroadStart.substring(2, 4);
			    var vsBroadSec = vsBroadStart.substring(4, 6);
			    var vsBroadFrm = vsBroadStart.substring(6, 8);
			
			    // 운행길이 시, 분, 초, 프레임
			    var vsBroadRunHour = vsBroadRun.substring(0, 2);
			    var vsBroadRunMin = vsBroadRun.substring(2, 4);
			    var vsBroadRunSec = vsBroadRun.substring(4, 6);
			    var vsBroadRunFrm = vsBroadRun.substring(6, 8);
				var vnBroadHour = Number(vsBroadHour) + Number(vsBroadRunHour); // 12:30:40:20
			    var vnBroadMin = Number(vsBroadMin) + Number(vsBroadRunMin); // 4:40:30:20
			    var vnBroadSec = Number(vsBroadSec) + Number(vsBroadRunSec); // 17:11:11:10
			    var vnBroadFrm = Number(vsBroadFrm) + Number(vsBroadRunFrm);
			    vnBroadHour = vnBroadHour + Math.floor(vnBroadMin / 60);
			    vnBroadMin = (vnBroadMin % 60) + Math.floor(vnBroadSec / 60);
			    vnBroadSec = (vnBroadSec % 60) + Math.floor(vnBroadFrm / 30);
			    vnBroadFrm = (vnBroadFrm % 30);
			
			    var vsResult = "";
			    if (vnBroadHour < 10) {
			        vsResult += "0" + vnBroadHour;
			    } else {
			        vsResult += String(vnBroadHour);
			    }
			    if (vnBroadMin < 10) {
			        vsResult += "0" + vnBroadMin;
			    } else {
			        vsResult += String(vnBroadMin);
			    }
			    if (vnBroadSec < 10) {
			        vsResult += "0" + vnBroadSec;
			    } else {
			        vsResult += String(vnBroadSec);
			    }
			    if (vnBroadFrm < 10) {
			        vsResult += "0" + vnBroadFrm;
			    } else {
			        vsResult += String(vnBroadFrm);
			    }
			
			    return vsResult;
			}
			/**
			 * 시작시각, 운행길이로 종료시각을 가져온다
			 * @param {string} psBroadHour 방송시
			 * @param {string} psBroadMin 방송분
			 * @param {string} psBroadSec 방송초
			 * @param {string} psBroadFrm 방송프레임
			 * @param {string} psBroadRunHour 운행시
			 * @param {string} psBroadRunMin 운행분
			 * @param {string} psBroadRunSec 운행초
			 * @param {string} psBroadRunFrm 운행프레임
			 * @return {string} 종료시각
			 * @since 2020-04-26
			 * @author sylee
			 */
			function calBroadEndTime(psBroadHour, psBroadMin, psBroadSec, psBroadFrm, psBroadRunHour, psBroadRunMin, psBroadRunSec, psBroadRunFrm) {
			    var vnBroadHour = Number(psBroadHour) + Number(psBroadRunHour); // 12:30:40:20
			    var vnBroadMin = Number(psBroadMin) + Number(psBroadRunMin); // 4:40:30:20
			    var vnBroadSec = Number(psBroadSec) + Number(psBroadRunSec); // 17:11:11:10
			    var vnBroadFrm = Number(psBroadFrm) + Number(psBroadRunFrm);
			    vnBroadHour = vnBroadHour + Math.floor(vnBroadMin / 60);
			    vnBroadMin = (vnBroadMin % 60) + Math.floor(vnBroadSec / 60);
			    vnBroadSec = (vnBroadSec % 60) + Math.floor(vnBroadFrm / 30);
			    vnBroadFrm = (vnBroadFrm % 30);
			
			    var vsResult = "";
			    if (vnBroadHour < 10) {
			        vsResult += "0" + vnBroadHour;
			    } else {
			        vsResult += String(vnBroadHour);
			    }
			    if (vnBroadMin < 10) {
			        vsResult += "0" + vnBroadMin;
			    } else {
			        vsResult += String(vnBroadMin);
			    }
			    if (vnBroadSec < 10) {
			        vsResult += "0" + vnBroadSec;
			    } else {
			        vsResult += String(vnBroadSec);
			    }
			    if (vnBroadFrm < 10) {
			        vsResult += "0" + vnBroadFrm;
			    } else {
			        vsResult += String(vnBroadFrm);
			    }
			
			    return vsResult;
			}
			
			/**
			 * 입력된 편성길이에 따라 방송시각을 재조정한다
			 * @since 2020-04-28
			 * @author sylee
			 */
			function adjustBroadEndTime() {
			    /** @type cpr.controls.Grid */
			    var vcGrid = app.lookup("grdSch");
			    var vnRowIndex = vcGrid.getSelectedRowIndex();
			    var vsBroadStart = vcGrid.getRow(vnRowIndex).getValue("playTime24").toString(); // 시작시각
			    var vsBroadHour = "";
			    var vsBroadMin = "";
			    var vsBroadSec = "";
			    var vsBroadFrm = "";
			    var vnBroadRun = vcGrid.getRow(vnRowIndex).getValue("playRun").toString(); // 운행시각
			    var vsBroadRunHour = "";
			    var vsBroadRunMin = "";
			    var vsBroadRunSec = "";
			    var vsBroadRunFrm = "";
			    var voPreviousRow;
			    var voRow;
			    var vnNotSeIdx = 0;
			    var vsPreSeEndTime = "";
			    var playTime24 = ""; //
			    var playRun = ""; //
			
			    //방송시각 미입력
			    if (vsBroadStart === "" || vsBroadStart.length < 8) {
			        return;
			    }
			    //편성길이 미입력
			    if (vnBroadRun === "" || vnBroadRun.length < 8) {
			        return;
			    }
			
			    // 시작시각 시, 분, 초, 프레임
			    vsBroadHour = vsBroadStart.substring(0, 2);
			    vsBroadMin = vsBroadStart.substring(2, 4);
			    vsBroadSec = vsBroadStart.substring(4, 6);
			    vsBroadFrm = vsBroadStart.substring(6, 8);
			
			    // 운행길이 시, 분, 초, 프레임
			    vsBroadRunHour = vnBroadRun.substring(0, 2);
			    vsBroadRunMin = vnBroadRun.substring(2, 4);
			    vsBroadRunSec = vnBroadRun.substring(4, 6);
			    vsBroadRunFrm = vnBroadRun.substring(6, 8);
				
				var vsMtrlClf = util.Grid.getCellValue(app, "grdSch", "mtrlClf", vnRowIndex);
				
				if(vsMtrlClf == "SE") {
					var voProgramRow = findNearestRow(vnRowIndex);
					var vofarthestRow = findFarthestRow(vnRowIndex);
					
					var vsPlayRun = voProgramRow.getValue("playRun");
					for(var vnIdx = voProgramRow.getIndex() ; vnIdx < vofarthestRow.getIndex();vnIdx++){
						
						vcGrid.getRow(vnIdx);
			//TODO
			//			subtractRunTime(vsBroadStart, vsBroadRun)
						
						
					}
					
				} else {
					var vaAllRows = vcGrid.findAllRow("mtrlClf != 'SE' && getIndex() >"+vnRowIndex);
					var voSelectRow = vcGrid.getRow(vnRowIndex);
			
					var tempRow = voSelectRow;
					vaAllRows.forEach(function(each,idx){
						playTime24 = tempRow.getValue("playTime24");
						playRun = tempRow.getValue("playRun");
						vsPreSeEndTime = calcBroadEndTimeSimple(playTime24, playRun);
			        	each.setValue("playTime24", vsPreSeEndTime);
							tempRow = each;
					});
				}
			//    for (var i = vnRowIndex + 1, length = vcGrid.rowCount; i < length; i++) {
			//    	
			//		    	
			//    	var vnSelectedIndex = util.Grid.getCheckOrSelectedRowIndex(app, ["grdSch"]);
			//    	
			////   			findNearestRow(vnSelectedIndex);	
			//        voPreviousRow = findRowExcludeSE(vcGrid, i); //vcGrid.getRow(i-1); // 전 로우
			//        playTime24 = voPreviousRow.getValue("playTime24");//시작시간
			//        playRun = voPreviousRow.getValue("playRun");//운행시간
			//        voRow = vcGrid.getRow(i); // 다음 로우
			//
			//        vsBroadHour = playTime24.substring(0, 2);
			//        vsBroadMin = playTime24.substring(2, 4);
			//        vsBroadSec = playTime24.substring(4, 6);
			//        vsBroadFrm = playTime24.substring(6, 8);
			//        vsBroadRunHour = playRun.substring(0, 2);
			//        vsBroadRunMin = playRun.substring(2, 4);
			//        vsBroadRunSec = playRun.substring(4, 6);
			//        vsBroadRunFrm = playRun.substring(6, 8);
			//
			//
			//        vsPreSeEndTime = calBroadEndTime(vsBroadHour, vsBroadMin, vsBroadSec, vsBroadFrm, vsBroadRunHour, vsBroadRunMin, vsBroadRunSec, vsBroadRunFrm);
			//        voRow.setValue("playTime24", vsPreSeEndTime);
			//    }
			}
			
			/**
			 * 선택된행에서 부터 가장 가까운 프로그램(SE가 아닌 행)을 찾는 함수
			 * @param {Number} vnRowIdx
			 */
			function findNearestRow(vnRowIdx){
				
				var rows ;
				var index  = vnRowIdx;
				
				while(util.Grid.getCellValue(app, "grdSch", "mtrlClf", index) == "SE"){
					index--;
				}
				
				return app.lookup("grdSch").getRow(index);
			}
			/**
			 * 선택된행에서 부터 가장 먼 서브이벤트(SE)를 찾는 함수
			 * @param {Number} vnRowIdx
			 */
			function findFarthestRow(vnRowIdx) {
			
				var rows;
				var index = vnRowIdx;
				
				while(util.Grid.getCellValue(app, "grdSch", "mtrlClf", index) == "SE") {
					index++;
				}	
				
				return app.lookup("grdSch").getRow(index-1);
			}
			
			/**
			 * 요일 구하는 함수
			 */
			function getDayNm(Ymd) {
			    var weekName = new Array('일', '월', '화', '수', '목', '금', '토');
			    var year = Ymd.substring(0, 4);
			    var month = Ymd.substring(4, 6);
			    var day = Ymd.substring(6, 8);
			    var week = new Date(year, month - 1, day, 0, 0, 0, 0);
			
			    week = weekName[week.getDay()];
			
			    return week;
			}
			
			/**
			 * 다음날 or 전날 이동
			 */
			function dateCalc(Ymd, n) {
			    var year = Ymd.substring(0, 4);
			    var month = Ymd.substring(4, 6);
			    var day = Ymd.substring(6, 8);
			    var tDate = new Date(year, month - 1, day);
			    var convMonth = "";
			    var convDay = "";
			    var setDate = "";
			
			    if (n == 1) {
			        // 날짜(일) 더하기
			        tDate.setDate(tDate.getDate() + 1);
			    } else if (n == 2) {
			        // 날짜(일) 빼기
			        tDate.setDate(tDate.getDate() - 1);
			    }
			
			    if (tDate.getMonth() + 1 < 10) {
			        convMonth = "0" + (tDate.getMonth() + 1);
			    } else {
			        convMonth = (tDate.getMonth() + 1).toString();
			    }
			
			    if (tDate.getDate() < 10) {
			        convDay = "0" + tDate.getDate();
			    } else {
			        convDay = tDate.getDate().toString();
			    }
			
			    setDate = tDate.getFullYear().toString() + convMonth + convDay;
			
			    return parseInt(setDate, 10);
			}
			
			///**
			// * SE 일전체 생성 함수
			// */
			//function seTotalCreate() {
			//	var sChkHm = "";
			//	var nStartRow = 0;
			//	var nSumCount = 0;
			//	var nRowCount = app.lookup("grdSch").getRowCount();
			//	var nMainRow = 0;
			//	var sMtrlClf = "";
			//	var sDuration = "";
			//	var sBrdHm = "";
			//	var nFRow1 = 0;
			//	var nFRow2 = 0;
			//	var sSetClf = "";
			//	var nSubCount = 0;
			//	
			//	// 일일운행표 SE 생성 전 전체 ROW에 대해 조건 검색
			//	for (var i = 0; i < nRowCount; i++) {
			//		nMainRow = i; // ROW의 INDEX
			//		sMtrlClf = app.lookup("grdSch").getRow(i).getValue("mtrlClf");
			//		sDuration = app.lookup("grdSch").getRow(i).getValue("duration");
			//		sBrdHm = app.lookup("grdSch").getRow(i).getValue("broadHm");
			//		
			//		// 이전행과 편성시각 동일여부 체크
			//		if (sBrdHm != sChkHm) {
			//			nStartRow = i;
			//		}
			//		
			//		// SE, CT, CC는 SKIP
			//		if (sMtrlClf == "SE" || sMtrlClf == "CT" || sMtrlClf == "CC") {
			//			continue;
			//		}
			//		
			//		// 길이가 0인 이벤트 SKIP
			//		if (sDuration == "00000000") {
			//			continue;
			//		}
			//		/******************** 순방향 검색 시작 ********************/
			//		/******************** 기준편성시각 바뀌고 첫번째인 경우 ********************/
			//		if (nStartRow == i) {
			//			nFRow1 = 0;
			//			for (var j = i + 1; j < nRowCount; j++) {
			//				
			//				if (app.lookup("grdSch").getRow(j).getValue("mtrlClf") == sMtrlClf && app.lookup("grdSch").getRow(j).getValue("broadHm") == sBrdHm) {
			//					nFRow2 = j;
			//					break;
			//				}
			//			}
			//		} else if (nRowCount == i) {
			//			nFRow2 = 0;
			//			for (var j = nStartRow; j < i; j++) {
			//				
			//				if (app.lookup("grdSch").getRow(j).getValue("mtrlClf") == sMtrlClf && app.lookup("grdSch").getRow(j).getValue("broadHm") == sBrdHm) {
			//					nFRow1 = j;
			//					break;
			//				}
			//			}
			//		} else {
			//			for (var j = nStartRow; j < i; j++) {
			//				
			//				if (app.lookup("grdSch").getRow(j).getValue("mtrlClf") == sMtrlClf && app.lookup("grdSch").getRow(j).getValue("broadHm") == sBrdHm) {
			//					nFRow1 = j;
			//					break;
			//				}
			//			}
			//			
			//			for (var j = i + 1; j < nRowCount; j++) {
			//				
			//				if (app.lookup("grdSch").getRow(j).getValue("mtrlClf") == sMtrlClf && app.lookup("grdSch").getRow(j).getValue("broadHm") == sBrdHm) {
			//					nFRow2 = j;
			//					break;
			//				}
			//			}
			//		}
			//		/******************** 순방향 검색 종료 ********************/
			//		
			//		sSetClf = sMtrlClf.substring(0, 3); // 0, 1, 2
			//		
			//		/******************** 첫 번째 소재 ********************/
			//		if (nFRow1 == 0) {
			//			nSubCount = wfSecond(i, nMainRow, "1", sSetClf, sDuration, "");
			//		}
			//		
			//		nRowCount += nSubCount;
			//		i += nSubCount;
			//		nSubCount = 0;
			//		
			//		/******************** 모든 소재 ********************/
			//		nSubCount = wfSecond(i, nMainRow, "0", sSetClf, sDuration, "");
			//		nRowCount += nSubCount;
			//		i += nSubCount;
			//		nSubCount = 0;
			//		
			//		/******************** 중간 소재 ********************/
			//		if ((nFRow1 > 0 && nFRow2 > 0) || (nFRow1 == 0 && nFRow2 > 0)) {
			//			nSubCount = wfSecond(i, nMainRow, "2", sSetClf, sDuration, "");
			//		}
			//		
			//		nRowCount += nSubCount;
			//		i += nSubCount;
			//		nSubCount = 0;
			//		
			//		/******************** 마지막 소재 ********************/
			//		if (nFRow2 == 0 || i == nRowCount) {
			//			nSubCount = wfSecond(i, nMainRow, "9", sSetClf, sDuration, "");
			//		}
			//		
			//		nRowCount += nSubCount;
			//		i += nSubCount;
			//		nSubCount = 0;
			//		
			//		sChkHm = sBrdHm;
			//	}
			//}
			//
			///**
			// * SE 추가를 위한 ROW 추가 함수
			// */
			//function wfSecond(aNRow, aNStartRow, aSType, aSClf, aSRun, aSTmplId) {
			//	// aNRow : 운행표의 행 번호(number)
			//	// aNStartRow : 운행표의 메인이벤트 행 번호(number)
			//	// aSType : 적용대상 0전체, 1처음, 2중간, 9마지막 (String)
			//	// aSClf : 소재구분 (String)
			//	// aSRun : 메인이벤트운행길이 (String)
			//	// aSTmplId : 서브이벤트 템플릿아이디 (자동생성시에는 공백으로 받음)
			//	
			//	var sChanId = app.lookup("dsPlayList").getValue(0, "chanId");
			//	var sMtrlClf = aSClf;
			//	var sDuration = aSRun;
			//	var nMainRow = aNStartRow;
			//	
			//	var sDelibGrd = app.lookup("grdSch").getRow(nMainRow).getValue("delibGrade");
			//	var grdRowCount = app.lookup("grdSch").getRowCount();
			//	var sNextClf = "";
			//	var sPreClf = "";
			//	var sMode = "";
			//	var sTrffId = "";
			//	var sRegClf = "";
			//	var sTmplId = "";
			//	var nRowCount = 0;
			//	var nRowCount2 = 0;
			//	var nRow = 0;
			//	var sGradeYn = "";
			//	var sGradeList = "";
			//	var sSumRun = "";
			//	var sCheckRun = "";
			//	var sStartType = "";
			//	var sDevice = "";
			//	var sDevInfo = "";
			//	var sEpsdYn = "";
			//	var sEventNm = "";
			//	var sEventInfo = "";
			//	var sLogoId = "";
			//	var sCgId = "";
			//	var sRun = "";
			//	
			//	if (sDelibGrd == "null") {
			//		sDelibGrd = "00";
			//	}
			//	
			//	for (var i = nMainRow; i < grdRowCount; i++) {
			//		
			//		if (app.lookup("grdSch").getRow(i).getValue("mtrlClf") != "CC" && app.lookup("grdSch").getRow(i).getValue("mtrlClf") != "SE") {
			//			sNextClf = app.lookup("grdSch").getRow(i).getValue("mtrlClf");
			//			break;
			//		}
			//	}
			//	
			//	for (var i = nMainRow - 1; i >= 0; i--) {
			//		
			//		if (app.lookup("grdSch").getRow(i).getValue("mtrlClf") != "CC" && app.lookup("grdSch").getRow(i).getValue("mtrlClf") != "SE") {
			//			sPreClf = app.lookup("grdSch").getRow(i).getValue("mtrlClf");
			//			break;
			//		}
			//	}
			//	
			//	if (sMtrlClf == "99") {
			//		sMode = "none";
			//	} else {
			//		sPreClf = sPreClf.substring(0,3);
			//		sNextClf = sNextClf.substring(0,3);
			//		
			//		if (sMtrlClf == sPreClf || sMtrlClf == sNextClf) {
			//			sMode = "none";
			//		} else {
			//			sMode = "stop";
			//		}
			//	}
			//	
			//	app.lookup("dmPlayIdForMax").setValue("chanId", sChanId);
			//	app.lookup("dmPlayIdForMax").setValue("mtrlClf", sMtrlClf);
			//	app.lookup("dmPlayIdForMax").setValue("objClf", aSType);
			//	app.lookup("dmPlayIdForMax").setValue("useYn", "Y");
			//	
			//	util.Submit.send(app, "smsMaxPlayIdSet", function(pbSuccess){
			//		if(pbSuccess){
			//			app.lookup("dmTemplateAll").clear(false);
			//			// 소재구분에 따른 운행 ID 가져오기
			//			sTrffId = app.lookup("dsMaxPlayId").getValue(0, "maxPlayId");
			//			
			//			if (sTrffId == null || sTrffId == "") {
			//				return 0;
			//			}
			//			
			//			app.lookup("dmTemplateAll").setValue("chanId", sChanId);
			//			app.lookup("dmTemplateAll").setValue("playId", sTrffId);
			//			app.lookup("dmTemplateAll").setValue("useYn", "Y");
			//			
			//			if (sMtrlClf == "99") {
			//				sRegClf = "M";
			//				app.lookup("dmTemplateAll").setValue("templateId", aSTmplId);
			//			} else {
			//				sRegClf = "A";
			//			}
			//			
			//			util.Submit.send(app, "smsTemplateMst", function(pbSuccess){
			//				if(pbSuccess){
			//					nRowCount = app.lookup("dsTemplateMst").getRowCount();
			//					
			//					nRow = 0;
			//						
			//					for (var i = 0; i < nRowCount; i++) {
			//						sGradeYn = app.lookup("dsTemplateMst").getValue(i, "gradeYn");
			//						sGradeList = app.lookup("dsTemplateMst").getValue(i, "gradeList");
			//						
			//						if (sGradeYn == "Y" && sGradeList != sDelibGrd) { 
			//							continue;
			//						}
			//						
			//						sTmplId = app.lookup("dsTemplateMst").getValue(i, "templateId");
			//						
			//						// 운행 템플릿에 등록된 상세 편성정보 가져오기
			//						util.Submit.send(app, "smsTemplateDtl", function(pbSuccess){
			//							if(pbSuccess){
			//								nRowCount2 = app.lookup("dsTemplateDtl").getRowCount();
			//								sSumRun = app.lookup("dsTemplateMst").getValue(i, "beginTime");
			//								sCheckRun = fTimeMns("FF", sDuration, app.lookup("dsTemplateMst").getValue(i, "endTime"));
			//								
			//								if (app.lookup("dsTemplateMst").getValue(i, "repeatYn") == "Y") {
			//									
			//									do {
			//										
			//										for (var ii = 0; ii < nRowCount2; ii++) {
			//											sStartType = app.lookup("dsTemplateDtl").getValue(ii, "startType");
			//											sSumRun = fTimeAdd("FF", sSumRun, app.lookup("dsTemplateDtl").getValue(ii, "playTime"));
			//											sDevice = app.lookup("dsTemplateDtl").getValue(ii, "deviceId");
			//											
			//											app.lookup("dmDeviceInfo").setValue("chanId", sChanId);
			//											app.lookup("dmDeviceInfo").setValue("deviceId", sDevice);
			//											
			//											util.Submit.send(app, "smsDeviceInfoSet", function(pbSuccess){
			//												if(pbSuccess){
			//													sDevInfo = app.lookup("dsDeviceInfo").getValue(0, "deviceInfo2");
			//													sEpsdYn = app.lookup("dsTemplateDtl").getValue(ii, "episodeYn");
			//													
			//													if (sEpsdYn == "" || sEpsdYn == null) {
			//														sEpsdYn = "N";	
			//													}
			//													
			//													sEventNm = wfData(ii, app.lookup("dsTemplateDtl").getValue(ii, "eventNm"), nMainRow, sEpsdYn);
			//													sEventInfo = app.lookup("dsTemplateDtl").getValue(ii, "eventInfo");
			//													sLogoId = wfData(ii, app.lookup("dsTemplateDtl").getValue(ii, "logoId"), nMainRow, sEpsdYn); // 수정 필요해보임
			//													sCgId = wfData(ii, app.lookup("dsTemplateDtl").getValue(ii, "cgId"), nMainRow, sEpsdYn);
			//													
			//													if (sCheckRun > sSumRun) {
			//														sRun = app.lookup("dsTemplateDtl").getValue(ii, "trffRun");
			//														
			//														if (fTimeMns("FF", sCheckRun, sSumRun) < sRun) {
			//															sRun = fTimeMns("FF", sCheckRun, sSumRun);
			//														}
			//														
			//														// 메인행을 복사하여  새로운 행을 만든다.
			//														nRow += 1;
			//														
			//														app.lookup("grdSch").insertRowData(aNRow + nRow - 1, true, app.lookup("grdSch").getRow(aNRow).getRowData());
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("mtrlClf", "SE");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("startType", app.lookup("dsTemplateDtl").getValue(ii, "startType"));
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("playTime", sSumRun);
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("playRun", sRun);
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("mtrlId", "");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("tapeId", "");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("som", "00000000");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("duration", "00000000");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("mtrlNm", sEventNm);
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("mtrlInfo", sLogoId);
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("cgId", sCgId);
			//														
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("deviceId", app.lookup("dsTemplateDtl").getValue(ii, "deviceId"));
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventCtrl", app.lookup("dsTemplateDtl").getValue(ii, "eventCtrl"));
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventTrns", app.lookup("dsTemplateDtl").getValue(ii, "eventTrns"));
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventRate", app.lookup("dsTemplateDtl").getValue(ii, "eventRate"));
			//														
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventOut", "");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventTyp", "");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("audioClf", "");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("delibGrade", "");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("gpiId1", "");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("gpiId2", "");
			//														app.lookup("grdSch").getRow(aNRow + nRow).setValue("subAutoYn", "Y");
			//														
			//														sSumRun = fTimeAdd("FF", sSumRun, sRun);
			//													}
			//												}
			//											});
			//										}
			//									} while (sSumRun <= sCheckRun)
			//								} else {
			//									
			//									for (var ii = 0; ii < nRowCount2; ii ++) {
			//										
			//										sStartType = app.lookup("dsTemplateDtl").getValue(ii, "startType");
			//										sSumRun = fTimeAdd("FF", sSumRun, app.lookup("dsTemplateDtl").getValue(ii, "playTime"))
			//										sDevice = app.lookup("dsTemplateDtl").getValue(ii, "deviceId");
			//										
			//										app.lookup("dmDeviceInfo").setValue("chanId", sChanId);
			//										app.lookup("dmDeviceInfo").setValue("deviceId", sDevice);
			//										
			//										util.Submit.send(app, "smsDeviceInfoSet", function(pbSuccess){
			//											
			//											if(pbSuccess){
			//												sDevInfo = app.lookup("dsDeviceInfo").getValue(0, "deviceInfo2");
			//												sEpsdYn = app.lookup("dsTemplateDtl").getValue(ii, "episodeYn");
			//												
			//												if (sEpsdYn == "" || sEpsdYn == null) {
			//													sEpsdYn = "N";
			//												}
			//												
			//												sEventNm = wfData(ii, app.lookup("dsTemplateDtl").getValue(ii, "eventNm"), nMainRow, sEpsdYn);
			//												sEventInfo = app.lookup("dsTemplateDtl").getValue(ii, "eventInfo");
			//												sLogoId = wfData(ii, app.lookup("dsTemplateDtl").getValue(ii, "logoId"), nMainRow, sEpsdYn); // 수정 필요해보임
			//												sCgId = wfData(ii, app.lookup("dsTemplateDtl").getValue(ii, "cgId"), nMainRow, sEpsdYn);
			//												
			//												if (sLogoId.toUpperCase() == "NONE") {
			//													continue;
			//												}
			//												if (sCgId.toUpperCase() == "NONE") {
			//													continue;
			//												}
			//												
			//												// 메인행을 복사하여 새로운 행을 만든다
			//												nRow += 1;
			//												
			//												app.lookup("grdSch").insertRowData(aNRow + nRow - 1, false, app.lookup("grdSch").getRow(aNRow).getRowData());
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("mtrlClf", "SE");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("startType", app.lookup("dsTemplateDtl").getValue(ii, "startType"));
			//												
			//												if (ii == 0) {
			//													app.lookup("grdSch").getRow(aNRow + nRow).setValue("playTime", sSumRun);
			//												} else {
			//													app.lookup("grdSch").getRow(aNRow + nRow).setValue("playTime", app.lookup("dsTemplateDtl").getValue(ii, "playTime"));
			//												}
			//												
			//												if (app.lookup("grdSch").getRow(ii).getValue("autoCalYn") == "Y") {
			//													
			//													if (ii == 1) {
			//														sRun = fTimeMns("FF", app.lookup("dsTemplateDtl").getValue(ii, "playTime"), sCheckRun);
			//														sRun = fTimeMns("FF", sRun, app.lookup("dsTemplateDtl").getValue(ii, "playRun"));
			//													} else {
			//														sRun = fTimeMns("FF", app.lookup("dsTemplateDtl").getValue(ii, "playTime"), app.lookup("dsTemplateMst").getValue(ii, "endTime"));
			//													}
			//												} else {
			//													
			//													if (ii == 1) {
			//														sRun = fTimeMns("FF", app.lookup("dsTemplateDtl").getValue(ii, "playTime"), sDuration);
			//														sRun = fTimeMns("FF", sRun, app.lookup("dsTemplateDtl").getValue(ii, "playRun"));
			//													} else {
			//														sRun = fTimeMns("FF", app.lookup("dsTemplateDtl").getValue(ii, "playTime"), app.lookup("dsTemplateMst").getValue(ii, "endTime"));
			//													}
			//												}
			//												
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("playRun", sRun);
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("mtrlId", "");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("tapeId", "");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("som", "00000000");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("duration", "00000000");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("mtrlNm", sEventNm);
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("mtrlInfo", sLogoId);
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("cgId", sCgId);
			//													
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("deviceId", app.lookup("dsTemplateDtl").getValue(ii, "deviceId"));
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventCtrl", app.lookup("dsTemplateDtl").getValue(ii, "eventCtrl"));
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventTrns", app.lookup("dsTemplateDtl").getValue(ii, "eventTrns"));
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventRate", app.lookup("dsTemplateDtl").getValue(ii, "eventRate"));
			//													
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventOut", "");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventTyp", "");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("audioClf", "");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("delibGrade", "");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("gpiId1", "");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("gpiId2", "");
			//												app.lookup("grdSch").getRow(aNRow + nRow).setValue("subAutoYn", "Y");
			//												
			//												if (app.lookup("dsTemplateDtl").getValue(ii, "eventCtrl") == "0" && sMode =="stop") {
			//													app.lookup("grdSch").getRow(aNRow + nRow).setValue("eventCtrl", "1");
			//													app.lookup("grdSch").getRow(aNRow + nRow).setValue("playRun", fTimeMns("FF", aSRun, app.lookup("grdSch").getRow(aNRow + nRow).getValue("playTime")));
			//												}
			//											}
			//										});
			//									}
			//								}
			//							}
			//						});
			//					}
			//				}
			//			});
			//		}
			//	});
			//}
			
			/**
			 * SE 추가를 위한 데이터 삽입 함수
			 */
			function wfData(aNRow, aSColName, aNMainRow, aEpsdYn) {
			    // aNRowE : 템플릿의 행번호
			    // aSColName : 컬럼명
			    // aNMainRow : 운행표행번호
			    // aEpsdYn : 회차관리여부
			
			    var sData = "";
			    var nFRow = 0;
			    var sDataUpper = "";
			    var sReturn = "";
			    var sMtrlClf = app.lookup("grdSch").getRow(aNMainRow).getValue("mtrlClf");
			
			    if (aSColName.toUpperCase() == "LOGO_ID") {
			        sData = app.lookup("dsTemplateDtl").getValue(aNRow, "logoId");
			    } else if (aSColName.toUpperCase() == "CG_ID") {
			        sData = app.lookup("dsTemplateDtl").getValue(aNRow, "cgId");
			    } else if (aSColName.toUpperCase() == "EVENT_NM") {
			        sData = app.lookup("dsTemplateDtl").getValue(aNRow, "eventNm");
			    } else {
			        sData = "";
			    }
			
			    if (sData == "" || sData == null) {
			        return "";
			    }
			
			    app.lookup("dmSearchRow").setValue("broadYmd", app.lookup("grdSch").getRow(aNMainRow).getValue("playYmd"));
			    app.lookup("dmSearchRow").setValue("pgmId", app.lookup("grdSch").getRow(aNMainRow).getValue("pgmId"));
			    app.lookup("dmSearchRow").setValue("broadYmd", app.lookup("grdSch").getRow(aNMainRow).getValue("broadHm"));
			    // 조건 추가해야 할 것으로 보임////////////////////////////////////////////////////////
			
			    util.Submit.send(app, "smsSearchRow", function(pbSuccess) {
			
			        var vnRowCount = app.lookup("dsSearchRow").getRowCount();
			
			        if (pbSuccess) {
			
			            for (var i = 0; i < vnRowCount; i++) {
			
			                if (app.lookup("dsSearchRow").getValue(i, "broadYmd") == app.lookup("grdSch").getRow(aNMainRow).getValue("playYmd") && app.lookup("dsSearchRow").getValue(i, "pgmId") == app.lookup("grdSch").getRow(aNMainRow).getValue("pgmId") && app.lookup("dsSearchRow").getValue(i, "broadHm") == app.lookup("grdSch").getRow(aNMainRow).getValue("broadHm")) {
			                    nFRow = i;
			                    break;
			                }
			            }
			
			            sDataUpper = sData.toUpperCase();
			
			            if (sDataUpper.substring(0, 5) == "@AUTO" || sDataUpper.substring(0, 9) == "@CM_CG_ID") {
			
			                if (right(sData, 2) == "/N") {
			                    nFRow += 1;
			                    sReturn = app.lookup("dsSearchRow").getValue(nFRow, "cgIdCm");
			
			                    if (sReturn == null) {
			                        sReturn = "익일미편성";
			                        return;
			                    }
			                }
			
			                if (nFRow == 0) {
			                    sReturn = "미편성";
			                    return;
			                } else {
			
			                    if (sMtrlClf.substring(0, 2) == "CM") {
			                        sReturn = app.lookup("dsSearchRow").getValue(nFRow, "cgIdCm");
			                    } else if (sMtrlClf.substring(0, 2) == "ZP") {
			                        sReturn = app.lookup("dsSearchRow").getValue(nFRow, "cgIdProgram");
			                    }
			                }
			            } else if (sDataUpper.substring(0, 8) == "TITLE_NM") {
			                sReturn = app.lookup("dsSearchRow").getValue(nFRow, "pgmNm") + "" + sData;
			            } else {
			                sReturn = sData;
			            }
			
			            return sReturn;
			        }
			    });
			}
			
			// RIGHT substring 함수
			function right(s, c) {
			    return s.substr(-c);
			} //right("abcd",2)
			
			// MID substring 함수
			function mid(s, c, l) {
			    return s.substring(c, l);
			} //mid("abcd",1,2)
			
			// MOD 함수
			function mod(n, m) {
			    return ((n % m) + m) % m;
			}
			
			/**
			 * SE 추가 시 시간 뺄셈을 위한 함수
			 */
			function fTimeMns(aSTyp, aSTime1, aSTime2) {
			    var sTmp = "";
			    var iHH = 0;
			    var iMM = 0;
			    var iSS = 0;
			    var iFF = 0;
			    var iHH1 = 0;
			    var iMM1 = 0;
			    var iSS1 = 0;
			    var iFF1 = 0;
			    var iHH2 = 0;
			    var iMM2 = 0;
			    var iSS2 = 0;
			    var iFF2 = 0;
			    var sRet = "";
			
			    if (aSTime1 == null || aSTime1 == "") {
			        aSTime1 = "00000000";
			    } else if (aSTime2 == null || aSTime2 == "") {
			        aSTime2 = "00000000";
			    }
			
			    if (aSTime1 < aSTime2) {
			        sTmp = aSTime1;
			        aSTime1 = aSTime2;
			        aSTime2 = sTmp;
			    }
			
			    iHH1 = Number(mid(aSTime1, 0, 2)) + 24;
			    iMM1 = Number(mid(aSTime1, 2, 2));
			    iSS1 = Number(mid(aSTime1, 4, 2));
			    iFF1 = Number(mid(aSTime1, 6, 2));
			
			    if (iMM1 == 0) {
			        iMM1 += 60;
			        iHH1--;
			    }
			
			    if (iSS1 == 0) {
			        iSS1 += 60;
			        iMM1--;
			
			        if (iMM1 == 0) {
			            iMM1 += 60;
			            iHH1--;
			        }
			    }
			
			    if (iFF1 == 0) {
			        iFF1 += 30;
			        iSS1--;
			
			        if (iSS1 == 0) {
			            iSS1 += 60;
			            iMM1--;
			
			            if (iMM1 == 0) {
			                iMM1 += 60;
			                iHH1--;
			            }
			        }
			    }
			
			    iHH2 = Number(mid(aSTime2, 0, 2)) + 24;
			    iMM2 = Number(mid(aSTime2, 2, 2));
			    iSS2 = Number(mid(aSTime2, 4, 2));
			    iFF2 = Number(mid(aSTime2, 6, 2));
			
			    // frame 계산
			    if (iFF1 < iFF2) {
			        iFF1 += 30;
			        iSS1--;
			    }
			
			    // 초 계산
			    if (iSS1 < iSS2) {
			        iSS1 += 60;
			        iMM1--;
			    }
			
			    // 분 계산
			    if (iMM1 < iMM2) {
			        iMM1 += 60;
			        iHH1--;
			    }
			
			    iFF = iFF1 - iFF2;
			    iSS = iSS1 - iSS2;
			    iMM = iMM1 - iMM2;
			    iHH = iHH1 - iHH2;
			
			    if (iFF >= 30) {
			        iSS += Math.trunc(iFF / 30);
			        iFF = mod(iFF, 30);
			    }
			
			    if (iSS >= 60) {
			        iMM += Math.trunc(iSS / 60);
			        iSS = mod(iSS, 60);
			    }
			
			    if (iMM >= 60) {
			        iHH += Math.trunc(iMM / 60);
			        iMM = mod(iMM, 60);
			    }
			
			    sRet = String(iHH, "00") + String(iMM, "00") + String(iSS, "00") + String(iFF, "00")
			
			    return sRet;
			}
			
			/**
			 * SE 추가 시 시간 덧셈을 위한 함수
			 */
			function fTimeAdd(aSTyp, aSTime1, aSTime2) {
			    var sTmp = "";
			    var iHH = 0;
			    var iMM = 0;
			    var iSS = 0;
			    var iFF = 0;
			    var iHH1 = 0;
			    var iMM1 = 0;
			    var iSS1 = 0;
			    var iFF1 = 0;
			    var iHH2 = 0;
			    var iMM2 = 0;
			    var iSS2 = 0;
			    var iFF2 = 0;
			    var sRet = "";
			    var iCalFrame1 = 0;
			    var iCalFrame2 = 0;
			    var iCalFrame = 0;
			    var iRevFrame = 0;
			
			    if (aSTime1 == null || aSTime1 == "") {
			        aSTime1 = "00000000";
			    } else if (aSTime2 == null || aSTime2 == "") {
			        aSTime2 = "00000000";
			    }
			
			    if (aSTyp == "DF") {
			        iHH1 = Number(mid(aSTime1, 0, 2));
			        iMM1 = Number(mid(aSTime1, 2, 2)) + (iHH1 * 60);
			        iSS1 = Number(mid(aSTime1, 4, 2));
			        iFF1 = Number(mid(aSTime1, 6, 2));
			
			        iHH2 = Number(mid(aSTime2, 0, 2));
			        iMM2 = Number(mid(aSTime2, 2, 2)) + (iHH2 * 60);
			        iSS2 = Number(mid(aSTime2, 4, 2));
			        iFF2 = Number(mid(aSTime2, 6, 2));
			
			        // frame을 계산할 때에는 1분을 1798frame으로 계산
			        iCalFrame1 = iMM1 * 1798 + (Math.trunc(iMM1 / 10) * 2) + (iSS1 * 30) + iFF1 + 1;
			        iCalFrame2 = iMM2 * 1798 + (Math.trunc(iMM2 / 10) * 2) + (iSS2 * 30) + iFF2 + 1;
			
			        iCalFrame = iCalFrame1 + iCalFrame2 - 1;
			
			        iMM = Math.trunc(iCalFrame / 1798);
			
			        iRevFrame = Math.trunc(iMM / 10) * 2;
			
			        if ((mod(iCalFrame, 1798) - iRevFrame - 1) < 0) {
			            iMM--;
			            iRevFrame = Math.trunc(iMM / 10) * 2;
			            iCalFrame = mod(iCalFrame, 1798) + 1798 - iRevFrame - 1;
			        } else {
			            iCalFrame = mod(iCalFrame, 1798) - iRevFrame - 1;
			        }
			
			        iHH = Math.trunc(iMM / 60);
			        iMM = mod(iMM, 60);
			        iSS = Math.trunc(iCalFrame / 30);
			        iFF = mod(iCalFrame, 30);
			
			        sRet = String(iHH, "00") + String(iMM, "00") + String(iSS, "00") + String(iFF, "00")
			    } else {
			        iHH1 = Number(mid(aSTime1, 0, 2));
			        iMM1 = Number(mid(aSTime1, 2, 2));
			        iSS1 = Number(mid(aSTime1, 4, 2));
			
			        iHH2 = Number(mid(aSTime2, 0, 2));
			        iMM2 = Number(mid(aSTime2, 2, 2));
			        iSS2 = Number(mid(aSTime2, 4, 2));
			
			        if (aSTyp == "FF" || aSTyp == "NF") {
			            iFF1 = Number(mid(aSTime1, 6, 2));
			            iFF2 = Number(mid(aSTime2, 6, 2));
			
			            iSS = Math.trunc((iFF1 + iFF2) / 30);
			            iFF = mod((iFF1 + iFF2), 30);
			        }
			
			        iMM = Math.trunc((iSS + iSS1 + iSS2) / 60);
			        iSS = mod((iSS + iSS1 + iSS2), 60);
			
			        iHH = Math.trunc((iMM + iMM1 + iMM2) / 60);
			        iMM = mod((iMM + iMM1 + iMM2), 60);
			
			        iHH = iHH + iHH1 + iHH2;
			
			        if (iHH >= 24) {
			            iHH -= 24;
			        }
			
			        sRet = String(iHH, "00") + String(iMM, "00") + String(iSS, "00");
			
			        if (aSTyp == "FF" || aSTyp == "NF") {
			            sRet += String(iFF, "00");
			        }
			    }
			    return sRet;
			}
			
			/**
			 * 공통 코드 및 초기 조회
			 */
			function doListCmmn() {
			
			    //초기 파라미터 세팅
			    var voParams = [
			        ["dsPlayNo", "BSSC211", "", ""], //운행안번호
			        ["dsEventTyp", "BSSC705", "", ""], //Type
			        ["dsStartTyp", "BSSC703", "", ""], //시작
			        ["dsGpiId1", "BSSC710", "", ""], //큐톤신호
			        ["dsMtrlClf", "BSSC720", "", ""], //소재구분
			        //		["dsDeviceId"	, "BSSC008"	, ""	, ""], //송출소스
			        ["dsBrdType", "BSSC310", "", ""], //송출구분
			        ["dsEventCtrl", "BSSC706", "", ""], //Control
			        ["dsDelibGrade", "BSSC001", "", ""], //심의등급
			        ["dsBroadClf", "BSSC210", "", ""], //방송구분
			        ["dsFirstClf", "BSSC214", "", ""], //초방구분
			        ["dsCmNotCd", "BSCM200", "", ""], //광고불가
			        ["dsVideoClf", "BSSC014", "", ""], //화질
			        ["dsAudioClf", "BSCO901", "", ""], //Audio
			        ["dsEventOut", "BSSC704", "", ""], //Output
			        ["dsEventTrns", "BSSC707", "", ""], //Transition
			        ["dsEventRate", "BSSC708", "", ""], //Rate
			        ["dsCmClf", "BSCM003", "", ""], //광고구분
			        ["dsPibClf", "BSCM044", "", ""], //광고위치
			        ["dsMtrlClf1", "BSLB801", "", ""] //소재구분1
			    ];
			
			    util.Submit.send(app, "subExbBisCodeList", function(pbSuccess) {
			        if (pbSuccess) {
			            app.lookup("cmbPlayNo").selectItem(0);
			            app.lookup("cmbPlayNo").redraw();
			        }
			    }, voParams);
			}
			
			/** 
			 * 드래그 대상 컨트롤 설정
			 * @param {cpr.controls.Grid} setControl 
			 */
			function setDragSource(setControl) {
			    var feedback = null;
			
			    //드래그 대상 컨트롤(그리드)
			    var control = setControl;
			
			    var actualRect = null;
			
			    new cpr.controls.DragSource(control, {
			        options: {
			            threadhold: 10
			        },
			
			
			        onDragStart: function(context) {
			            context.cursor = "grabbing";
			
			            var gridData = context.source.detail;
			
			            var data = gridData.row.getRowData();
			            context.data = {
			                sourceRowIndex: gridData.rowIndex,
			                rowData: data
			            };
			            feedback = createDragSourceFeedback(data);
			
			            control.style.css("opacity", "0.5");
			            var nowXY = context.dragStartLocation;
			            actualRect = new cpr.geometry.Rectangle(nowXY.x, nowXY.y, 450, 80);
			            app.getRootAppInstance().floatControl(feedback, actualRect);
			
			        },
			
			        onDragMove: function(context) {
			            context.cursor = "grabbing"
			            var newRect = actualRect.getTranslatedByDimension(context.dragDelta);
			            app.getRootAppInstance().floatControl(feedback, newRect);
			
			        },
			
			        onDragEnd: function(context) {
			            context.cursor = "";
			            feedback.dispose();
			            feedback = null;
			            control.style.removeStyle("opacity");
			        }
			    });
			}
			
			/** 
			 * 드래그 받는대상 컨트롤 설정
			 * @param {cpr.controls.Grid} setUpGrid 
			 */
			function setDropTarget(setUpGrid) {
			
			    var setTarget = setUpGrid;
			
			    var actualRect = null;
			
			    new cpr.controls.DropTarget(setTarget, {
			
			        onDrop: function(context) {
			            var sourcedata = context.source;
			
			            var targetdata = context.target;
			
			            var sourceRowData = context.data;
			
			            var grid = setTarget;
			
			            var targetDetail = targetdata.detail;
			
			            var vsTargetTime = grid.getRow(targetDetail.rowIndex).getValue("playRun");
			            var vsSoucreTime = sourceRowData["duration"];
			
			            grid.updateRow(targetDetail.rowIndex, sourceRowData);
			
			            grid.getRow(targetDetail.rowIndex).setValue("playRun", vsSoucreTime);
			
			            grid.selectRows(targetDetail.rowIndex);
			
			            adjustBroadEndTime();
			
			            //			if (checkPlayRunTime( vsTargetTime , vsSoucreTime) ){
			            //				grid.updateRow(targetDetail.rowIndex , sourceRowData);
			            //			}else{
			            //				alert("드래그할 프로그램의 운행길이가 큽니다.");
			            //			}
			
			
			        },
			
			        onDragEnter: function(context) {
			
			            var targetdata = context.target;
			            var targetDetail = null;
			            if (targetdata.control) {
			                targetDetail = targetdata.detail;
			            }
			        },
			
			        onDragMove: function(context) {
			
			            /** @type cpr.controls.Grid */
			            var targetGrid = null;
			
			            if (context.target.control instanceof cpr.controls.Grid) {
			                targetGrid = context.target.control;
			            }
			
			        }
			    });
			
			}
			
			/** @param {String} targetTime
			 *  @param {String} sourceTime
			 *  @return {Boolean} {true : 드래그했을때 드래그 소스가 타겟보다 운행길이가 짧았을 때 }
			 */
			function checkPlayRunTime(targetTime, sourceTime) {
			
			    var vsTarget = parseInt(targetTime);
			    var vsSource = parseInt(sourceTime);
			
			    if (vsTarget >= vsSource) {
			        return true;
			    } else {
			        return false;
			    }
			
			}
			
			/*
			 * 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var button = e.control;
			
			    //var vsCh = app.lookup("cmbChan").value;
			    var vsDate = app.lookup("dtiDaily").value;
			
			    if (vsDate == "") {
			        alert("운행일자를 제대로 입력해주세요.")
			    } else {
			        app.lookup("smsPlayListSet").send();
			        loadConfirmList();
			    }
			}
			
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit( /* cpr.events.CEvent */ e) {
			    setDragSource(app.lookup("grdPlMtrl"));
			    setDragSource(app.lookup("grdPgmMtrl"));
			    setDragSource(app.lookup("grdCmMtrl"));
			    setDropTarget(app.lookup("grdSch"));
			}
			
			
			/*
			 * 트리 셀에서 node-open 이벤트 발생 시 호출.
			 * TreeCell 노드가 확장 될 때 발생하는 이벤트.
			 */
			function onTreeCellNodeOpen( /* cpr.events.CTreeCellEvent */ e) {
			    /** 
			     * @type cpr.controls.gridpart.renderer.TreeCell
			     */
			    var treeCell = e.control;
			    app.lookup("grdSch").redraw();
			}
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms2SubmitDone( /* cpr.events.CSubmissionEvent */ e) {
			    /** 
			     * @type cpr.protocols.Submission
			     */
			    var sms2 = e.control;
			    for (var i = 0; i < app.lookup("dsMtrllist").getRowCount(); i++) {
			        var image = "theme/images/Thumbnail_" + (i % 8 + 1) + ".jpg";
			        app.lookup("dsMtrllist").setValue(i, "Thumbnail", image);
			    }
			    app.lookup("grdMtrl").redraw();
			}
			
			
			/*
			 * "검색" 버튼(btnSubSearch)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSubSearchClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnSubSearch = e.control;
			
			    var vsDate1 = app.lookup("dti2").value;
			    var vsDate2 = app.lookup("dti3").value;
			
			    if (vsDate1 == "" || vsDate2 == "") {
			        alert("등록일를 정확하게 입력해주세요.");
			    } else {
			        app.lookup("sms2").send();
			    }
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
			
			    var dailyDate = app.lookup("dtiDaily");
			    var m = moment();
			
			    dailyDate.value = m.format("YYYYMMDD");
			
			    //	doListCmmn();
			
			    //	app.lookup("smsChannelSet").send();
			
			    //	app.lookup("grpCt").getLayout().setColumnVisible(1, false);
				
			    onButtonClick(e);
				app.lookup("smsPlayListSet").send();
			}
			
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSmsChannelSetSubmitSuccess( /* cpr.events.CSubmissionEvent */ e) {
			    /** 
			     * @type cpr.protocols.Submission
			     */
			    var smsChannelSet = e.control;
			
			    app.lookup("grpSchFrist").redraw();
			}
			
			/*
			 * 버튼(btnPlMtrlSearch)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPlMtrlSearchClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnPlMtrlSearch = e.control;
			
			    var dmDailySearch = app.lookup("dmDailySearch");
			    var dmPlMtrlInfo = app.lookup("dmPlMtrlInfo");
			    var selChanId = dmDailySearch.getValue("chanId");
			
			    dmPlMtrlInfo.setValue("chanId", selChanId);
			
			    if (!dmPlMtrlInfo.getValue("mtrlClf1") && !dmPlMtrlInfo.getValue("mtrlNm") && !dmPlMtrlInfo.getValue("mtrlInfo") && !dmPlMtrlInfo.getValue("mtrlId") && !dmPlMtrlInfo.getValue("useBeginYmd") && !dmPlMtrlInfo.getValue("useEndYmd") && !dmPlMtrlInfo.getValue("regBeginYmd") && !dmPlMtrlInfo.getValue("regEndYmd")) {
			        alert("조회 조건이 하나 이상 포함되어야 합니다.");
			        return;
			    }
			
			    util.Submit.send(app, "smsPlMtrlSet", function(pbSuccess) {
			        if (pbSuccess) {
			            app.lookup("grdPlMtrl").redraw();
			        }
			    });
			
			}
			
			
			/*
			 * 버튼(btnPgmMtrlSearch)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPgmMtrlSearchClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnPgmMtrlSearch = e.control;
			
			    var dmDailySearch = app.lookup("dmDailySearch");
			    var dmPgmMtrlInfo = app.lookup("dmPgmMtrlInfo");
			    var selChanId = dmDailySearch.getValue("chanId");
			
			    dmPgmMtrlInfo.setValue("chanId", selChanId);
			
			    util.Submit.send(app, "smsPgmMtrlSet", function(pbSuccess) {
			        if (pbSuccess) {
			            app.lookup("grdPgmMtrl").redraw();
			        }
			    });
			}
			
			
			/*
			 * "운행표 작성" 버튼(btnScheduleCreate)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnScheduleCreateClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnScheduleCreate = e.control;
			    var dmDailyCreate = app.lookup("dmDailyCreate");
			    var initValue = {};
			
			    app.openDialog("app/operation/popup/ScheduleCreate", {
			        width: 400,
			        height: 200
			    }, function(dialog) {
			        dialog.ready(function(dialogApp) {
			            //dialogApp.initValue = voData;
			            dialog.headerTitle = "운행표작성";
			        });
			    }).then(function(returnData) {
			
			        if (returnData) {
			
			            /** @type {{ipbCorpCd : String, ipbCorpNm : String}} */
			            var returnData = returnData;
			
			            if (returnData == "new") {
			
			                dmDailyCreate.setValue("chanId", app.lookup("cmbChan").value);
			                dmDailyCreate.setValue("playYmd", app.lookup("dtiDaily").value);
			                dmDailyCreate.setValue("playNo", app.lookup("cmbPlayNo").value);
			
			                util.Submit.send(app, "smsDailyCreate", function(pbSuccess) {
			                    if (pbSuccess) {
			                        app.lookup("btnMainSearch").click();
			                        app.lookup("grdSch").redraw();
			                    }
			                }, null, null, "mask");
			
			            } else if (returnData == "copy") {
			
			                initValue["targetPlayYmd"] = app.lookup("dtiDaily").value;
			                initValue["targetPlayNo"] = app.lookup("cmbPlayNo").value;
			                initValue["targetChanId"] = app.lookup("cmbChan").value;
			
			                app.getRootAppInstance().openDialog("app/popup/DailyScheduleCalendar", {
			                    width: 800,
			                    height: 550
			                }, function(dialog) {
			                    dialog.ready(function(dialogApp) {
			                        dialogApp.initValue = initValue;
			                    });
			                }).then(function(returnValue) {
			                    if (returnValue) {
			                        app.lookup("dmDailyCopy").setValue("sourceChanId", returnValue.sourceChanId);
			                        app.lookup("dmDailyCopy").setValue("sourceBroadYmd", returnValue.sourceBroadYmd);
			                        app.lookup("dmDailyCopy").setValue("sourcePlanNo", returnValue.sourcePlanNo);
			                        app.lookup("dmDailyCopy").setValue("targetChanId", returnValue.targetChanId);
			                        app.lookup("dmDailyCopy").setValue("targetBroadYmd", returnValue.targetBroadYmd);
			                        app.lookup("dmDailyCopy").setValue("targetPlanNo", returnValue.targetPlanNo);
			
			                        util.Submit.send(app, "smsDailyCopy", function(pbSuccess) {
			                            if (pbSuccess) {
			                                app.lookup("grdSch").redraw();
			                            }
			                        });
			                    }
			                });
			            }
			        }
			    });
			}
			
			
			/*
			 * "<" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var button = e.control;
			
			    var vnNowDate = app.lookup("dtiDaily").value;
			    var setDate = dateCalc(vnNowDate, 2);
			
			    app.lookup("dtiDaily").value = setDate;
			    app.lookup("dtiDaily").redraw();
			
			    util.Submit.send(app, "smsPlayListSet", function(pbSuccess) {
			        if (pbSuccess) {
			            loadConfirmList();
			        }
			    }, null, null, "mask");
			}
			
			
			/*
			 * ">" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var button = e.control;
			
			    var vnNowDate = app.lookup("dtiDaily").value;
			    var setDate = dateCalc(vnNowDate, 1);
			
			    app.lookup("dtiDaily").value = setDate;
			    app.lookup("dtiDaily").redraw();
			
			    util.Submit.send(app, "smsPlayListSet", function(pbSuccess) {
			        if (pbSuccess) {
			            loadConfirmList();
			        }
			    }, null, null, "mask");
			}
			
			
			/*
			 * "행추가" 버튼(btnAdd)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnAddClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnAdd = e.control;
			    var vcGrid = app.lookup("grdSch");
			    var dsPlayList = app.lookup("dsPlayList");
			    var voSelRow = null;
			    var vsPlayTime24 = "";
			    var vsPlayRun = "";
			
			    if (vcGrid.getSelectedRow()) {
			        voSelRow = vcGrid.getSelectedRow();
			        vsPlayTime24 = vcGrid.getSelectedRow().getValue("playTime24");
			        vsPlayRun = vcGrid.getSelectedRow().getValue("playRun");
			
			        // 선택한 행 밑에 신규 행을 추가, 선택한 행의 종료시각이 추가된 행의 시작시각으로 세팅 calBroadEndTime 함수 사용
			        vcGrid.insertRowData(vcGrid.getSelectedRow().getIndex(), true, {
			            "chanId": dsPlayList.getValue(0, "chanId"),
			            "playYmd": dsPlayList.getValue(0, "playYmd"),
			            "playClf": 0,
			            "playNo": dsPlayList.getValue(0, "playNo"),
			            "playTime24": calBroadEndTime(vsPlayTime24.substring(0, 2), vsPlayTime24.substring(2, 4), vsPlayTime24.substring(4, 6), vsPlayTime24.substring(6, 8), vsPlayRun.substring(0, 2), vsPlayRun.substring(2, 4), vsPlayRun.substring(4, 6), vsPlayRun.substring(6, 8)),
			            "playRun": "00000000",
			            "pgmCd": voSelRow.getValue("pgmCd"),
			            "pgmNm": voSelRow.getValue("pgmNm"),
			            "episodeNo": voSelRow.getValue("episodeNo"),
			            "episodeNm": voSelRow.getValue("episodeNm"),
			            "delibGrade": voSelRow.getValue("delibGrade"),
			            "delibTopicYn": voSelRow.getValue("delibTopicYn"),
			            "delibLanguageYn": voSelRow.getValue("delibLanguageYn"),
			            "delibCopyYn": voSelRow.getValue("delibCopyYn"),
			            "delibViolenceYn": voSelRow.getValue("delibViolenceYn"),
			            "delibSexualYn": voSelRow.getValue("delibSexualYn"),
			            "broadClf": voSelRow.getValue("broadClf"),
			            "firstClf": voSelRow.getValue("firstClf"),
			            "captionYn": voSelRow.getValue("captionYn"),
			            "signLangYn": voSelRow.getValue("signLangYn"),
			            "dvsYn": voSelRow.getValue("dvsYn"),
			            "childYn": voSelRow.getValue("childYn")
			            //			"playSeq" : dsPlayList.getValue(0, "playSeq"),
			            //			"sortSeq" : dsPlayList.getValue(0, "sortSeq"),
			        });
			    } else {
			        vcGrid.insertRowData(0, false);
			    }
			
			    vcGrid.selectRows(voSelRow.getIndex() + 1);
			}
			
			/*
			 * "행삽입" 버튼(btnUpAdd)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnUpAddClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnUpAdd = e.control;
			    var vcGrid = app.lookup("grdSch");
			    var dsPlayList = app.lookup("dsPlayList");
			    var voSelRow = null;
			
			    // 선택한 행 위에 신규 행을 추가 (선택한 행 자리에 신규 행이 추가), 선택한 행의 시작시각을 추가된 행의 시작시각으로 세팅
			    if (vcGrid.getSelectedRow()) {
			        voSelRow = vcGrid.getSelectedRow();
			
			        vcGrid.insertRowData(vcGrid.getSelectedRow().getIndex(), false, {
			            "chanId": dsPlayList.getValue(0, "chanId"),
			            "playYmd": dsPlayList.getValue(0, "playYmd"),
			            "playClf": 0,
			            "playNo": dsPlayList.getValue(0, "playNo"),
			            "playTime24": vcGrid.getSelectedRow().getValue("playTime24"),
			            "playRun": "00000000",
			            "pgmCd": voSelRow.getValue("pgmCd"),
			            "pgmNm": voSelRow.getValue("pgmNm"),
			            "episodeNo": voSelRow.getValue("episodeNo"),
			            "episodeNm": voSelRow.getValue("episodeNm"),
			            "delibGrade": voSelRow.getValue("delibGrade"),
			            "delibTopicYn": voSelRow.getValue("delibTopicYn"),
			            "delibLanguageYn": voSelRow.getValue("delibLanguageYn"),
			            "delibCopyYn": voSelRow.getValue("delibCopyYn"),
			            "delibViolenceYn": voSelRow.getValue("delibViolenceYn"),
			            "delibSexualYn": voSelRow.getValue("delibSexualYn"),
			            "broadClf": voSelRow.getValue("broadClf"),
			            "firstClf": voSelRow.getValue("firstClf"),
			            "captionYn": voSelRow.getValue("captionYn"),
			            "signLangYn": voSelRow.getValue("signLangYn"),
			            "dvsYn": voSelRow.getValue("dvsYn"),
			            "childYn": voSelRow.getValue("childYn")
			            //			"playSeq" : dsPlayList.getValue(0, "playSeq"),
			            //			"sortSeq" : dsPlayList.getValue(0, "sortSeq"),
			        });
			    } else {
			        vcGrid.insertRowData(0, false, {
			            "chanId": dsPlayList.getValue(0, "chanId"),
			            "playYmd": dsPlayList.getValue(0, "playYmd"),
			            "playClf": 0,
			            "playNo": dsPlayList.getValue(0, "playNo")
			        });
			    }
			
			    vcGrid.selectRows(voSelRow.getIndex());
			}
			
			/*
			 * "행삭제" 버튼(btnDel)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDelClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnDel = e.control;
			    var vcGrid = app.lookup("grdSch");
			
			    if (vcGrid.length < 1) {
			        alert("삭제할 데이터를 선택해주세요");
			    } else {
			        vcGrid.deleteRow(vcGrid.getSelectedRowIndex());
			    }
			}
			
			
			/*
			 * "저장" 버튼(btnSave)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnSave = e.control;
			
			    if (util.validate(app, "grdSch")) {
			        util.Submit.send(app, "smsPlayListSave", function(pbSuccess) {
			            if (pbSuccess) {
			                alert("저장되었습니다");
			                util.Submit.send(app, "smsPlayListSet");
			                util.Msg.notify(app, "저장되었습니다.");
			            } else {
			                alert("저장이 안되었습니다.")
			            }
			        });
			    }
			}
			
			
			/*
			 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
			 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onDtiDailyValueChange( /* cpr.events.CValueChangeEvent */ e) {
			    /** 
			     * @type cpr.controls.DateInput
			     */
			    var dtiDaily = e.control;
			    var dateNm = getDayNm(dtiDaily.value);
			
			    app.lookup("opbDayOfTheWeek").value = "[" + dateNm + "]";
			    app.lookup("opbDayOfTheWeek").redraw();
			}
			
			
			/*
			 * 버튼(btnCmMtrlSearch)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCmMtrlSearchClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnCmMtrlSearch = e.control;
			    var dmDailySearch = app.lookup("dmDailySearch");
			    var dmCmMtrlInfo = app.lookup("dmCmMtrlInfo");
			    var selChanId = dmDailySearch.getValue("chanId");
			    var vnTotalCmSec = 0;
			    var vnBcmSec = 0;
			    var vnAcmSec = 0;
			    var vnMcmSec = 0;
			
			    dmCmMtrlInfo.setValue("chanId", selChanId);
			
			    util.Submit.send(app, "smsCmMtrlSet", function(pbSuccess) {
			        if (pbSuccess) {
			            app.lookup("grdCmMtrl").redraw();
			
			            for (var i = 0; i < app.lookup("grdCmMtrl").getRowCount(); i++) {
			                vnTotalCmSec += Number(app.lookup("grdCmMtrl").getRow(i).getValue("cmmSec"));
			
			                if (app.lookup("grdCmMtrl").getRow(i).getValue("cmClf") == "100") {
			                    vnBcmSec += Number(app.lookup("grdCmMtrl").getRow(i).getValue("cmmSec"));
			                } else if (app.lookup("grdCmMtrl").getRow(i).getValue("cmClf") == "300") {
			                    vnAcmSec += Number(app.lookup("grdCmMtrl").getRow(i).getValue("cmmSec"));
			                } else {
			                    vnMcmSec += Number(app.lookup("grdCmMtrl").getRow(i).getValue("cmmSec"));
			                }
			            }
			
			            app.lookup("opbTotalCmSec").value = vnTotalCmSec;
			            app.lookup("opbBcmSec").value = vnBcmSec;
			            app.lookup("opbMcmSec").value = vnMcmSec;
			            app.lookup("opbBandCnt").value = "0";
			            app.lookup("opbAcmSec").value = vnAcmSec;
			            app.lookup("opbTotalCmCnt").value = app.lookup("grdCmMtrl").getRowCount();
			        }
			    });
			
			    app.lookup("grpCmInfo").redraw();
			
			}
			
			
			/*
			 * "광고생성" 버튼(btnCmCreate)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCmCreateClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnCmCreate = e.control;
			    var initValue = {};
			
			    app.lookup("dmCmCreate").setValue("chanId", app.lookup("dmDailySearch").getValue("chanId"));
			    app.lookup("dmCmCreate").setValue("playYmd", app.lookup("dmDailySearch").getValue("playYmd"));
			    app.lookup("dmCmCreate").setValue("playNo", app.lookup("dmDailySearch").getValue("playNo"));
			
			    app.openDialog("app/operation/popup/CmCreate", {
			        width: 400,
			        height: 200
			    }, function(dialog) {
			        dialog.ready(function(dialogApp) {
			            //dialogApp.initValue = voData;
			            dialog.headerTitle = "광고생성";
			        });
			    }).then(function(returnData) {
			
			        if (returnData) {
			
			            if (returnData == "dayNew") {
			
			                util.Submit.send(app, "smsDailyCmCreate", function(pbSuccess) {
			                    if (pbSuccess) {
			                        app.lookup("grdSch").redraw();
			                    }
			                });
			            } else if (returnData == "timeBandNew") {
			
			                if (!app.lookup("grdSch").getSelectedRow()) {
			                    alert("TimeBand를 생성할 시간대를 선택해주세요");
			                } else {
			                    app.lookup("dmCmCreate").setValue("broadHm", app.lookup("grdSch").getSelectedRow().getValue("broadHm"));
			
			                    util.Submit.send(app, "smsDailyCmCreate", function(pbSuccess) {
			                        if (pbSuccess) {
			                            app.lookup("grdSch").redraw();
			                        }
			                    });
			                }
			            } else if (returnData == "dayDel") {
			                alert("일전체 삭제");
			            } else if (returnData == "timeBandDel") {
			                alert("타임밴드 삭제");
			            }
			
			            app.lookup("dmCmCreate").clear(false);
			        }
			    });
			
			}
			
			
			/*
			 * "S/E 생성" 버튼(btnSeCreate)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSeCreateClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnSeCreate = e.control;
			    var initValue = {};
			
			    app.lookup("dmSeCreate").setValue("chanId", app.lookup("dmDailySearch").getValue("chanId"));
			    app.lookup("dmSeCreate").setValue("playYmd", app.lookup("dmDailySearch").getValue("playYmd"));
			    app.lookup("dmSeCreate").setValue("playNo", app.lookup("dmDailySearch").getValue("playNo"));
			
			    app.openDialog("app/operation/popup/SeCreate", {
			        width: 600,
			        height: 300
			    }, function(dialog) {
			        dialog.ready(function(dialogApp) {
			            //dialogApp.initValue = voData;
			            dialog.headerTitle = "S/E생성";
			        });
			    }).then(function(returnData) {
			
			        if (returnData) {
			
			            if (returnData == "seTotalNew") {
			                util.Submit.send(app, "smsDailySeCreate", function(pbSuccess) {
			
			                    if (pbSuccess) {
			                        app.lookup("grdSch").redraw();
			                    }
			                });
			            }
			
			        }
			    });
			
			}
			
			
			/*
			 * "검증" 버튼(btnVerify)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnVerifyClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnVerify = e.control;
			    var initValue = {};
			
			    app.openDialog("app/operation/popup/VerifySort", {
			        width: 400,
			        height: 200
			    }, function(dialog) {
			        dialog.ready(function(dialogApp) {
			            //dialogApp.initValue = voData;
			            dialog.headerTitle = "검증";
			        });
			    }).then(function(returnData) {
			
			        if (returnData) {
			
			        }
			    });
			
			}
			
			/*
			 * "소재 변경" 버튼(btnMtrlChange)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMtrlChangeClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnMtrlChange = e.control;
			    //	var initValue = {};
			    //	var vsSelPlayRun = app.lookup("grdSch").getSelectedRow().getValue("playRun");
			    //	var vsSelMtrlId = app.lookup("grdSch").getSelectedRow().getValue("mtrlId");
			    //	var vsSelMtrlNm = app.lookup("grdSch").getSelectedRow().getValue("mtrlNm");
				
				var vcGrid = app.lookup("grdSch");
				
				util.Dialog.open(app, "app/operation/popup/MtrlChange", 1000, 600, function(e){
						var dialog = e.control;
						var returnData = dialog.returnValue;
					if (returnData || returnData.length > 0) {
						returnData.forEach(function(each){
							var vaAllRows = vcGrid.findAllRow("mtrlId == '"+each.mtrlIdBefore+"'");
							vaAllRows.forEach(function(eachRow, idx){
								
								eachRow.setValue("mtrlId", each.mtrlIdAfter);
								eachRow.setValue("mtrlNm", each.mtrlNmAfter);
								eachRow.setValue("mtrlClf", each.mtrlClfAfter);
								eachRow.setValue("mtrlInfo", each.mtrlInfoAfter);
								eachRow.setValue("playRun", each.durationAfter);
								
							});
									
						});
						var firstRow = vcGrid.findFirstRow("mtrlClf != 'SE' && getStateString()=='U'");
						
						var vaProgramRows = vcGrid.findAllRow("mtrlClf != 'SE' && getIndex() >="+firstRow.getIndex());
			
						var tempRow = vaProgramRows.shift();
						var vsPlayTime24 = "";
						var vsPlayRun = "";
						var vsResultTime = "";
						vaProgramRows.forEach(function(each){
							vsPlayTime24 = tempRow.getValue("playTime24");
							vsPlayRun = tempRow.getValue("playRun");
							vsResultTime = calcBroadEndTimeSimple(vsPlayTime24, vsPlayRun);
							each.setValue("playTime24", vsResultTime);
							tempRow = each;	
						});
						
			        }
				});
			}
			
			/*
			 * "광고시간 확인" 버튼(btnCmTimeCheck)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCmTimeCheckClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnCmTimeCheck = e.control;
			
			    for (var i = 0; i < app.lookup("grdSch").getRowCount(); i++) {
			
			        if (app.lookup("grdSch").getRow(i).getValue("playSeq") != app.lookup("dsPlayList").getValue(i, "playSeq")) {
			            console.log("그리드 순번과 데이터셋의 순번이 일치하지 않는 로우는 " + i);
			        }
			    }
			
			}
			
			
			/*
			 * "방송소재 확인" 버튼(btnBroadMtrl)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnBroadMtrlClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnBroadMtrl = e.control;
			    var initValue = {};
			
			    initValue["chanId"] = app.lookup("cmbChan").value;
			    initValue["playNo"] = app.lookup("cmbPlayNo").value;
			
			    if (!app.lookup("grdSch").getSelectedRow()) {
			        alert("행을 선택해주세요");
			        return;
			    } else {
			        initValue["mtrlId"] = app.lookup("grdSch").getSelectedRow().getValue("mtrlId");
			        initValue["mtrlNm"] = app.lookup("grdSch").getSelectedRow().getValue("mtrlNm");
			    }
			
			    app.openDialog("app/operation/popup/MtrlBroadHistory", {
			        width: 800,
			        height: 600
			    }, function(dialog) {
			        dialog.ready(function(dialogApp) {
			            dialogApp.initValue = initValue;
			            dialog.headerTitle = "소재별 방송내역";
			        });
			    }).then(function(returnData) {
			
			        if (returnData) {
			
			        }
			    });
			}
			
			
			/*
			 * "소스지정" 버튼(btnSource)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSourceClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnSource = e.control;
			
			    if (app.lookup("btnSource").value == "소스지정") {
			        app.lookup("btnSource").value = "소스지정 취소";
			        app.lookup("btnSource").redraw();
			    } else {
			        app.lookup("btnSource").value = "소스지정";
			        app.lookup("btnSource").redraw();
			    }
			
			}
			
			
			/*
			 * "확정" 버튼(btnConfirm)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnConfirmClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnConfirm = e.control;
			
			    if (app.lookup("btnConfirm").value == "확정") {
			        app.lookup("btnConfirm").value = "확정 취소";
			        app.lookup("btnConfirm").redraw();
			    } else {
			        app.lookup("btnConfirm").value = "확정";
			        app.lookup("btnConfirm").redraw();
			    }
			}
			
			
			/*
			 * "S/E" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var button = e.control;
			    var initValue = {};
			
			    app.openDialog("app/popup/SubEventFind", {
			        width: 600,
			        height: 300
			    }, function(dialog) {
			        dialog.ready(function(dialogApp) {
			            dialogApp.initValue = app.lookup("cmbChan").value;
			            dialog.headerTitle = "서브이벤트조회";
			        });
			    }).then(function(returnData) {
			
			        if (returnData) {
			
			        }
			    });
			}
			
			
			/*
			 * "밴드추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var button = e.control;
			    var initValue = {};
			    initValue["broadYmd"] = app.lookup("dtiDaily").value;
			    initValue["playNo"] = app.lookup("cmbPlayNo").value;
			    initValue["chanId"] = app.lookup("cmbChan").value;
			
			    app.openDialog("app/popup/PgmBandAdd", {
			        width: 850,
			        height: 550
			    }, function(dialog) {
			        dialog.ready(function(dialogApp) {
			            dialogApp.initValue = initValue;
			            dialog.headerTitle = "프로그램 밴드 추가";
			        });
			    }).then(function(returnData) {
			
			        if (returnData) {
			
			        }
			    });
			}
			
			
			/*
			 * 마스크 에디터에서 value-change 이벤트 발생 시 호출.
			 * MaskEditor의 value의 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onMseStartValueChange( /* cpr.events.CValueChangeEvent */ e) {
			    /** 
			     * @type cpr.controls.MaskEditor
			     */
			    var mseStart = e.control;
			
			    adjustBroadEndTime();
			}
			
			
			/*
			 * 마스크 에디터에서 value-change 이벤트 발생 시 호출.
			 * MaskEditor의 value의 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onMseRunValueChange( /* cpr.events.CValueChangeEvent */ e) {
			    /** 
			     * @type cpr.controls.MaskEditor
			     */
			    var mseRun = e.control;
			
			    adjustBroadEndTime();
			
			}
			
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbxMtrlSchValueChange( /* cpr.events.CValueChangeEvent */ e) {
			    /** 
			     * @type cpr.controls.CheckBox
			     */
			    var cbxMtrlSch = e.control;
			
			    if (cbxMtrlSch.value == "Y") {
			        app.lookup("grpCt").getLayout().setColumnVisible(1, true);
			    } else {
			        app.lookup("grpCt").getLayout().setColumnVisible(1, false);
			    }
			
			}
			
			
			/*
			 * 그리드에서 contextmenu 이벤트 발생 시 호출.
			 * 마우스의 오른쪽 버튼이 클릭되거나 컨텍스트 메뉴 키가 눌려지면 호출되는 이벤트.
			 */
			function onGrdSchContextmenu( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Grid
			     */
			    var grdSch = e.control;
			
			    e.preventDefault();
			    setContextMenu(grdSch.id);
			}
			
			
			/*
			 * 그리드에서 dblclick 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 더블 클릭할 때 발생하는 이벤트.
			 */
			function onGrdPlMtrlDblclick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Grid
			     */
			    var grdPlMtrl = e.control;
			    var vcMainGrid = app.lookup("grdSch");
			    var vcPlGrid = app.lookup("grdPlMtrl");
			    var selRowIdx = 0;
			
			    if (!vcMainGrid.getSelectedRow()) {
			        alert("소재를 넣을 Row를 선택하세요");
			    } else {
			        vcMainGrid.updateRow(vcMainGrid.getSelectedRow().getIndex(), vcPlGrid.getSelectedRow().getRowData());
			        vcMainGrid.getSelectedRow().setValue("playRun", vcPlGrid.getSelectedRow().getValue("duration"));
			        selRowIdx = vcMainGrid.getSelectedRow().getIndex();
			        vcMainGrid.selectRows(selRowIdx);
			        adjustBroadEndTime();
			    }
			
			}
			
			
			/*
			 * 그리드에서 dblclick 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 더블 클릭할 때 발생하는 이벤트.
			 */
			function onGrdPgmMtrlDblclick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Grid
			     */
			    var grdPgmMtrl = e.control;
			    var vcMainGrid = app.lookup("grdSch");
			    var vcPlGrid = app.lookup("grdPgmMtrl");
			    var selRowIdx = 0;
			
			    if (!vcMainGrid.getSelectedRow()) {
			        alert("소재를 넣을 Row를 선택하세요");
			    } else {
			        vcMainGrid.updateRow(vcMainGrid.getSelectedRow().getIndex(), vcPlGrid.getSelectedRow().getRowData());
			        vcMainGrid.getSelectedRow().setValue("playRun", vcPlGrid.getSelectedRow().getValue("duration"));
			        selRowIdx = vcMainGrid.getSelectedRow().getIndex();
			        vcMainGrid.selectRows(selRowIdx);
			        adjustBroadEndTime();
			    }
			
			}
			
			
			/*
			 * 그리드에서 dblclick 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 더블 클릭할 때 발생하는 이벤트.
			 */
			function onGrdCmMtrlDblclick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Grid
			     */
			    var grdCmMtrl = e.control;
			    var vcMainGrid = app.lookup("grdSch");
			    var vcPlGrid = app.lookup("grdCmMtrl");
			    var selRowIdx = 0;
			
			    if (!vcMainGrid.getSelectedRow()) {
			        alert("소재를 넣을 Row를 선택하세요");
			    } else {
			        vcMainGrid.updateRow(vcMainGrid.getSelectedRow().getIndex(), vcPlGrid.getSelectedRow().getRowData());
			        vcMainGrid.getSelectedRow().setValue("playRun", vcPlGrid.getSelectedRow().getValue("duration"));
			        selRowIdx = vcMainGrid.getSelectedRow().getIndex();
			        vcMainGrid.selectRows(selRowIdx);
			        adjustBroadEndTime();
			    }
			}
			
			
			/*
			 * 그리드에서 paste 이벤트 발생 시 호출.
			 * Grid에서 ctrl + v 로 붙여넣기시 발생하는 이벤트.
			 */
			function onGrdSchPaste( /* cpr.events.CGridEvent */ e) {
			    /** 
			     * @type cpr.controls.Grid
			     */
			    var grdSch = e.control;
			    var targetGrid = app.lookup("grdSch");
			    var vnRowIndex = targetGrid.getSelectedRowIndex();
			    var vsStartTime = targetGrid.getSelectedRow().getValue("playTime24");
			
			    targetGrid.getRow(vnRowIndex).setRowData(voGridRowData);
			    targetGrid.setCellValue(vnRowIndex, 1, vsStartTime);
			    targetGrid.selectRows(vnRowIndex);
			    adjustBroadEndTime();
			}
			
			
			/*
			 * "저장" 버튼(btnMainSave)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMainSaveClick( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var btnFileSave = e.control;
			    var dsChanId = app.lookup("dsPlayList").getValue(0, "chanId");
			    var dsPlayYmd = app.lookup("dsPlayList").getValue(0, "playYmd");
			    var dsPlayNo = app.lookup("dsPlayList").getValue(0, "playNo");
			
			    app.openDialog("app/popup/SaveConfirm", {
			        width: 400,
			        height: 200
			    }, function(dialog) {
			        dialog.ready(function(dialogApp) {
			            dialog.headerTitle = "운행표저장";
			        });
			    }).then(function(returnData) {
			        if (returnData) {
			            /** @type {{boolVal : boolean}} */
			            var returnData = returnData;
			
			            if (returnData == "true") {
			
			                app.lookup("dsInsertList").clear(false);
			                app.lookup("dmSaveAssist").setValue("chanId", dsChanId);
			                app.lookup("dmSaveAssist").setValue("playYmd", dsPlayYmd);
			                app.lookup("dmSaveAssist").setValue("playNo", dsPlayNo);
			
			                for (var i = 0; i < app.lookup("grdSch").getRowCount(); i++) {
			                    app.lookup("dsInsertList").addRowData(app.lookup("grdSch").getRow(i).getRowData());
			                }
			
			                util.Submit.send(app, "smsPlayListSave", function(pbSuccess) {
			                    if (pbSuccess) {
			                        app.lookup("grdSch").redraw();
			                    }
			                });
			            }
			        }
			    });
			
			    //	for (var i = 0; i < app.lookup("dsPlayList").getRowCount(); i++) {
			    //		console.log(app.lookup("dsPlayList").getValue(i, "mtrlClf"));
			    //	}
			
			}
			
			
			/*
			 * "잘라내기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6( /* cpr.events.CMouseEvent */ e) {
			    /** 
			     * @type cpr.controls.Button
			     */
			    var button = e.control;
			
			}
			
			/**
			 * 2020.05.15 소재구분을 입력하면 프로그램 , 광고, 서브 이벤트로 구분하여 반환
			 * @param {String} mtrlClf(소재구분)
			 * @return {"ZP" | "CM" | "SE"} [ZP] : 프로그램, [CM] : 광고, [SE] 서브 이벤트
			 */
			function classifyMtr(mtrlClf) {
			
			
			    var paramValue = ""; //소재구분의 앞 두 글자
			    var returnValue = ""; //ZP, CM, SE 중의 값을 반환
			
			    paramValue = mtrlClf.substring(0, 2);
			
			    switch (paramValue) {
			        case "ZP":
			            returnValue = "ZP"; // 프로그램
			            break;
			        case "CM":
			            returnValue = "CM"; // 광고
			            break;
			        case "AG":
			            returnValue = "AG"; // 등급고지
			            break;
			        case "ID":
			            returnValue = "ID"; // ID
			            break;
			        case "ZZ":
			            returnValue = "ZZ"; // 기타
			            break;
			        case "SP":
			            returnValue = "SP"; // SPOT
			            break;
			        case "PM":
			            returnValue = "PM"; // 프로모션
			            break;
			        case "PT":
			            returnValue = "PT"; // 전타
			            break;
			        case "ZT":
			            returnValue = "ZT"; // 후타
			            break;
			        case "QT":
			            returnValue = "QT"; // 큐톤
			            break;
			        case "NX":
			            returnValue = "NX"; // 
			            break;
			        case "IN":
			            returnValue = "IN"; // 
			            break;
			        case "FL":
			            returnValue = "FL"; // 
			            break;
			        case "CA":
			            returnValue = "CA"; // 
			            break;
			        default:
			            returnValue = "SE" // 세컨더리 이벤트
			            break;
			    }
			
			    return returnValue;
			}
			
			/**
			 * 2020.05.15 소재구분을 입력하면 프로그램 , 광고, 서브 이벤트로 구분하여 반환
			 * @param {cpr.controls.Grid} grid
			 * @param {Number} (현재 선택행 rowIndex) 
			 * @return {cpr.controls.provider.GridRow} 입력받은 rowindex 이전 행중 서브이벤트행을 제외한 그리드 Row
			 */
			function findRowExcludeSE( /* cpr.controls.Grid */ grid, /* Number */ rowIndex) {
			
			
			    var gridRow = null; //입력받은 rowIndex이전의 행들을 전달받은 변수
			    var returnRow = null; //서브이벤트 행을 제외한 가장 가까운 이전행
			    var rowMtrlClf = null; //row의 mtrlClf 저장할 변수
			
			    //이전 row중 subEvent행을 제외하고 가장 가까운 row를 찾는다.
			    for (var i = 1, length = rowIndex; i < length; i++) {
			        gridRow = grid.getRow(rowIndex - i);
			        rowMtrlClf = gridRow.getString("mtrlClf");
			
			        if (classifyMtr(rowMtrlClf) !== "SE") {
			            returnRow = gridRow;
			            break;
			        }
			    }
				debugger;
			    return returnRow;
			}
			
			/*
			 * 그리드에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrdSchKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdSch = e.control;
				
				if(e.ctrlKey && e.keyCode == "X") {
					
			//		app.lookup("grdCmMtrl").
				}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsPlayList");
			dataSet_1.parseData({
				"columns": [
					{"name": "companyCd"},
					{"name": "chanId"},
					{"name": "mediaCd"},
					{"name": "playYmd"},
					{"name": "playClf"},
					{"name": "playNo"},
					{"name": "playSeq"},
					{"name": "playSubSeq"},
					{"name": "playTime24"},
					{"name": "playRun"},
					{"name": "compute"},
					{"name": "eventTyp"},
					{"name": "startTyp"},
					{"name": "gpiId1"},
					{"name": "gpiId2"},
					{"name": "gpiMtrlYn"},
					{"name": "mtrlClf"},
					{"name": "mtrlId"},
					{"name": "mtrlNm"},
					{"name": "mtrlInfo"},
					{"name": "logoId"},
					{"name": "cgId"},
					{"name": "deviceId"},
					{"name": "brdType"},
					{"name": "eventCtrl"},
					{"name": "broadHm"},
					{"name": "pgmCd"},
					{"name": "pgmNm"},
					{"name": "episodeNo"},
					{"name": "delibGrade"},
					{"name": "delibTopicYn"},
					{"name": "delibLanguageYn"},
					{"name": "delibCopyYn"},
					{"name": "delibViolenceYn"},
					{"name": "delibSexualYn"},
					{"name": "episodeNm"},
					{"name": "broadRun"},
					{"name": "broadClf"},
					{"name": "firstClf"},
					{"name": "captionYn"},
					{"name": "signLangYn"},
					{"name": "dvsYn"},
					{"name": "childYn"},
					{"name": "cmYn"},
					{"name": "cmNotCd"},
					{"name": "duration"},
					{"name": "som"},
					{"name": "videoClf"},
					{"name": "audioClf"},
					{"name": "clipYn1"},
					{"name": "clipYn2"},
					{"name": "clipYn3"},
					{"name": "clipYn4"},
					{"name": "eventOut"},
					{"name": "eventTrns"},
					{"name": "eventRate"},
					{"name": "keepYn"},
					{"name": "tapeNo"},
					{"name": "assetId"},
					{"name": "subAutoYn"},
					{"name": "regUserId"},
					{"name": "regDt"},
					{"name": "updUserId"},
					{"name": "updDt"},
					{"name": "cmClf"},
					{"name": "preNxtClf"},
					{"name": "vsFlag"},
					{"name": "color"}
				],
				"rows": [{"companyCd": "companyCd1", "chanId": "chanId1", "mediaCd": "mediaCd1", "playYmd": "playYmd1", "playClf": "playClf1", "playNo": "playNo1", "playSeq": "playSeq1", "playSubSeq": "playSubSeq1", "playTime24": "playTime241", "playRun": "playRun1", "compute": "compute1", "eventTyp": "eventTyp1", "startTyp": "startTyp1", "gpiId1": "gpiId11", "gpiId2": "gpiId21", "gpiMtrlYn": "gpiMtrlYn1", "mtrlClf": "mtrlClf1", "mtrlId": "mtrlId1", "mtrlNm": "mtrlNm1", "mtrlInfo": "mtrlInfo1", "logoId": "logoId1", "cgId": "cgId1", "deviceId": "deviceId1", "brdType": "brdType1", "eventCtrl": "eventCtrl1", "broadHm": "broadHm1", "pgmCd": "pgmCd1", "pgmNm": "pgmNm1", "episodeNo": "episodeNo1", "delibGrade": "delibGrade1", "delibTopicYn": "delibTopicYn1", "delibLanguageYn": "delibLanguageYn1", "delibCopyYn": "delibCopyYn1", "delibViolenceYn": "delibViolenceYn1", "delibSexualYn": "delibSexualYn1", "episodeNm": "episodeNm1", "broadRun": "broadRun1", "broadClf": "broadClf1", "firstClf": "firstClf1", "captionYn": "captionYn1", "signLangYn": "signLangYn1", "dvsYn": "dvsYn1", "childYn": "childYn1", "cmYn": "cmYn1", "cmNotCd": "cmNotCd1", "duration": "duration1", "som": "som1", "videoClf": "videoClf1", "audioClf": "audioClf1", "clipYn1": "clipYn11", "clipYn2": "clipYn21", "clipYn3": "clipYn31", "clipYn4": "clipYn41", "eventOut": "eventOut1", "eventTrns": "eventTrns1", "eventRate": "eventRate1", "keepYn": "keepYn1", "tapeNo": "tapeNo1", "assetId": "assetId1", "subAutoYn": "subAutoYn1", "regUserId": "regUserId1", "regDt": "regDt1", "updUserId": "updUserId1", "updDt": "updDt1", "cmClf": "cmClf1", "preNxtClf": "preNxtClf1", "vsFlag": "vsFlag1", "color": "color1"}]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsmtr");
			dataSet_2.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsChannel");
			dataSet_3.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "chanNm"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsMtrllist");
			dataSet_4.parseData({
				"columns": [
					{"name": "companyCd"},
					{"name": "chnlCd"},
					{"name": "mediaCd"},
					{"name": "playYmd"},
					{"name": "playClf"},
					{"name": "playNo"},
					{"name": "playSeq"},
					{"name": "playSubSeq"},
					{"name": "playTime24"},
					{"name": "playTime"},
					{"name": "playRun"},
					{"name": "realPlayYmd"},
					{"name": "realPlayTime"},
					{"name": "mtrlId"},
					{"name": "mtrlNm"},
					{"name": "mtrlInfo"},
					{"name": "mtrlClf"},
					{"name": "mtrlClf2"},
					{"name": "tapeId"},
					{"name": "assetId"},
					{"name": "som"},
					{"name": "duration"},
					{"name": "clipYn"},
					{"name": "serverInfo"},
					{"name": "arcYn"},
					{"name": "cmYn"},
					{"name": "cmNotCd"},
					{"name": "cmNotStime"},
					{"name": "cmNotEtime"},
					{"name": "broadYmd"},
					{"name": "broadHm"},
					{"name": "viewHm"},
					{"name": "broadRun"},
					{"name": "broadClf"},
					{"name": "firstClf"},
					{"name": "keepYn"},
					{"name": "pgmCd"},
					{"name": "pgmNm"},
					{"name": "delibGrade"},
					{"name": "delibTopic"},
					{"name": "delibLanguage"},
					{"name": "delibCopy"},
					{"name": "delibViolence"},
					{"name": "delibSexual"},
					{"name": "captionYn"},
					{"name": "dvsYn"},
					{"name": "deviceId"},
					{"name": "startType"},
					{"name": "logoId"},
					{"name": "cgId"},
					{"name": "gpiYn"},
					{"name": "gpiId"},
					{"name": "audioClf"},
					{"name": "eventSom"},
					{"name": "eventOut"},
					{"name": "eventTyp"},
					{"name": "eventCtrl"},
					{"name": "eventTrns"},
					{"name": "eventRate"},
					{"name": "eventSize"},
					{"name": "uuid"},
					{"name": "regUserId"},
					{"name": "regTime"},
					{"name": "Thumbnail"}
				],
				"rows": []
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsChannelSub");
			dataSet_5.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "chanNm"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsEventTyp");
			dataSet_6.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("dsStartTyp");
			dataSet_7.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("dsGpiId1");
			dataSet_8.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_8);
			
			var dataSet_9 = new cpr.data.DataSet("dsMtrlClf");
			dataSet_9.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_9);
			
			var dataSet_10 = new cpr.data.DataSet("dsDeviceId");
			dataSet_10.parseData({
				"columns" : []
			});
			app.register(dataSet_10);
			
			var dataSet_11 = new cpr.data.DataSet("dsBrdType");
			dataSet_11.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_11);
			
			var dataSet_12 = new cpr.data.DataSet("dsEventCtrl");
			dataSet_12.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_12);
			
			var dataSet_13 = new cpr.data.DataSet("dsDelibGrade");
			dataSet_13.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_13);
			
			var dataSet_14 = new cpr.data.DataSet("dsBroadClf");
			dataSet_14.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_14);
			
			var dataSet_15 = new cpr.data.DataSet("dsFirstClf");
			dataSet_15.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_15);
			
			var dataSet_16 = new cpr.data.DataSet("dsCmNotCd");
			dataSet_16.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_16);
			
			var dataSet_17 = new cpr.data.DataSet("dsVideoClf");
			dataSet_17.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_17);
			
			var dataSet_18 = new cpr.data.DataSet("dsAudioClf");
			dataSet_18.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_18);
			
			var dataSet_19 = new cpr.data.DataSet("dsEventOut");
			dataSet_19.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_19);
			
			var dataSet_20 = new cpr.data.DataSet("dsEventTrns");
			dataSet_20.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_20);
			
			var dataSet_21 = new cpr.data.DataSet("dsEventRate");
			dataSet_21.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_21);
			
			var dataSet_22 = new cpr.data.DataSet("dsPlMtrlList");
			dataSet_22.parseData({
				"columns": [
					{"name": "chanId"},
					{"name": "mtrlClf"},
					{"name": "mtrlId"},
					{"name": "mtrlNm"},
					{"name": "broadRun"},
					{"name": "broadMYn"},
					{"name": "broadBYn"},
					{"name": "midYn"},
					{"name": "productYn"},
					{"name": "archYn"},
					{"name": "mtrlInfo"},
					{"name": "useBeginYmd"},
					{"name": "useEndYmd"},
					{"name": "duration"},
					{"name": "useYn"},
					{"name": "clipYn1"},
					{"name": "clipYn2"},
					{"name": "clipYn3"},
					{"name": "clipYn4"},
					{"name": "som"}
				],
				"rows": [{"chanId": "chanId1", "mtrlClf": "mtrlClf1", "mtrlId": "mtrlId1", "mtrlNm": "mtrlNm1", "broadRun": "broadRun1", "broadMYn": "broadMYn1", "broadBYn": "broadBYn1", "midYn": "midYn1", "productYn": "productYn1", "archYn": "archYn1", "mtrlInfo": "mtrlInfo1", "useBeginYmd": "useBeginYmd1", "useEndYmd": "useEndYmd1", "duration": "duration1", "useYn": "useYn1", "clipYn1": "clipYn11", "clipYn2": "clipYn21", "clipYn3": "clipYn31", "clipYn4": "clipYn41", "som": "som1"}]
			});
			app.register(dataSet_22);
			
			var dataSet_23 = new cpr.data.DataSet("dsPgmMtrlList");
			dataSet_23.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "chanNm"},
					{"name": "pgmNm"},
					{"name": "episodeNo"},
					{"name": "episodeNm"},
					{"name": "mtrlClf"},
					{"name": "mtrlId"},
					{"name": "mtrlNm"},
					{"name": "duration"},
					{"name": "clipYn"},
					{"name": "clipYn1"},
					{"name": "clipYn2"},
					{"name": "clipYn3"},
					{"name": "arcYn"},
					{"name": "pgmCd"},
					{"name": "delibGrade"},
					{"name": "delibTopicYn"},
					{"name": "delibLanguageYn"},
					{"name": "delibCopyYn"},
					{"name": "delibViolenceYn"},
					{"name": "delibSexualYn"},
					{"name": "captionYn"},
					{"name": "signLangYn"},
					{"name": "dvsYn"},
					{"name": "videoClf"}
				]
			});
			app.register(dataSet_23);
			
			var dataSet_24 = new cpr.data.DataSet("dsCmMtrlList");
			dataSet_24.parseData({
				"columns" : [
					{"name": "cmClf"},
					{"name": "pibClf"},
					{"name": "cmSeq"},
					{"name": "custNm"},
					{"name": "mtrlId"},
					{"name": "mtrlNm"},
					{"name": "cmmSec"},
					{"name": "duration"},
					{"name": "clipYn"},
					{"name": "clipYn1"},
					{"name": "clipYn2"},
					{"name": "clipYn3"},
					{"name": "clipArch"},
					{"name": "som"},
					{"name": "cmYn"}
				]
			});
			app.register(dataSet_24);
			
			var dataSet_25 = new cpr.data.DataSet("dsMtrlClf1");
			dataSet_25.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_25);
			
			var dataSet_26 = new cpr.data.DataSet("dsCmClf");
			dataSet_26.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_26);
			
			var dataSet_27 = new cpr.data.DataSet("dsPibClf");
			dataSet_27.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_27);
			
			var dataSet_28 = new cpr.data.DataSet("dsPlayNo");
			dataSet_28.parseData({
				"columns" : [
					{"name": "dname"},
					{"name": "dcode"}
				]
			});
			app.register(dataSet_28);
			
			var dataSet_29 = new cpr.data.DataSet("dsConfirm");
			dataSet_29.parseData({
				"columns" : [
					{"name": "cnfYn"},
					{"name": "totalRun"},
					{"name": "selRun"},
					{"name": "cmRun"},
					{"name": "cnfUserId"},
					{"name": "confirmedYn"},
					{"name": "cnfDt"}
				]
			});
			app.register(dataSet_29);
			
			var dataSet_30 = new cpr.data.DataSet("dsInsertList");
			dataSet_30.parseData({
				"columns": [
					{"name": "companyCd"},
					{"name": "chanId"},
					{"name": "mediaCd"},
					{"name": "playYmd"},
					{"name": "playClf"},
					{"name": "playNo"},
					{"name": "playSeq"},
					{"name": "playSubSeq"},
					{"name": "playTime24"},
					{"name": "playRun"},
					{"name": "compute"},
					{"name": "eventTyp"},
					{"name": "startTyp"},
					{"name": "gpiId1"},
					{"name": "gpiMtrlYn"},
					{"name": "mtrlClf"},
					{"name": "mtrlId"},
					{"name": "mtrlNm"},
					{"name": "mtrlInfo"},
					{"name": "logoId"},
					{"name": "cgId"},
					{"name": "deviceId"},
					{"name": "brdType"},
					{"name": "eventCtrl"},
					{"name": "broadHm"},
					{"name": "pgmCd"},
					{"name": "pgmNm"},
					{"name": "episodeNo"},
					{"name": "delibGrade"},
					{"name": "delibTopicYn"},
					{"name": "delibLanguageYn"},
					{"name": "delibCopyYn"},
					{"name": "delibViolenceYn"},
					{"name": "delibSexualYn"},
					{"name": "episodeNm"},
					{"name": "broadRun"},
					{"name": "broadClf"},
					{"name": "firstClf"},
					{"name": "captionYn"},
					{"name": "signLangYn"},
					{"name": "dvsYn"},
					{"name": "childYn"},
					{"name": "cmYn"},
					{"name": "cmNotCd"},
					{"name": "duration"},
					{"name": "som"},
					{"name": "videoClf"},
					{"name": "audioClf"},
					{"name": "clipYn1"},
					{"name": "clipYn2"},
					{"name": "clipYn3"},
					{"name": "clipYn4"},
					{"name": "eventOut"},
					{"name": "eventTrns"},
					{"name": "eventRate"},
					{"name": "keepYn"},
					{"name": "tapeNo"},
					{"name": "assetId"},
					{"name": "regUserId"},
					{"name": "regDt"},
					{"name": "updUserId"},
					{"name": "updDt"}
				],
				"rows": []
			});
			app.register(dataSet_30);
			var dataMap_1 = new cpr.data.DataMap("dmDailySearch");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "chanId",
						"defaultValue": "CH_1"
					},
					{
						"name": "playYmd",
						"defaultValue": ""
					},
					{
						"name": "playNo",
						"dataType": "string",
						"defaultValue": "1"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmPlMtrlInfo");
			dataMap_2.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "mtrlClf1"},
					{"name": "mtrlNm"},
					{"name": "mtrlInfo"},
					{"name": "mtrlId"},
					{"name": "useBeginYmd"},
					{"name": "useEndYmd"},
					{"name": "regBeginYmd"},
					{"name": "regEndYmd"}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmPgmMtrlInfo");
			dataMap_3.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "allNm"},
					{"name": "mtrlNm"},
					{"name": "mtrlId"},
					{"name": "episodeNo"},
					{"name": "pgmCd"}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmCmMtrlInfo");
			dataMap_4.parseData({
				"columns" : [
					{"name": "broadYmd"},
					{"name": "broadHm"},
					{"name": "pgmCd"},
					{"name": "pgmNm"},
					{"name": "chanId"},
					{"name": "planNo"}
				]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmDailyCopy");
			dataMap_5.parseData({
				"columns" : [
					{"name": "sourceChanId"},
					{"name": "sourceBroadYmd"},
					{"name": "sourcePlanNo"},
					{"name": "targetChanId"},
					{"name": "targetBroadYmd"},
					{"name": "targetPlanNo"}
				]
			});
			app.register(dataMap_5);
			
			var dataMap_6 = new cpr.data.DataMap("dmSearch");
			dataMap_6.parseData({
				"columns" : [
					{"name": "strCh"},
					{"name": "strDate"},
					{"name": "strNo"},
					{"name": "systemClf"},
					{"name": "weekYn"},
					{"name": "dayClf"},
					{"name": "outDs"}
				]
			});
			app.register(dataMap_6);
			
			var dataMap_7 = new cpr.data.DataMap("dmDailyCreate");
			dataMap_7.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "playYmd"},
					{"name": "playNo"},
					{"name": "mtrlClf"},
					{"name": "playSeq"}
				]
			});
			app.register(dataMap_7);
			
			var dataMap_8 = new cpr.data.DataMap("dmDailyCmCreate");
			dataMap_8.parseData({});
			app.register(dataMap_8);
			
			var dataMap_9 = new cpr.data.DataMap("dmSaveAssist");
			dataMap_9.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "playYmd"},
					{"name": "playNo"}
				]
			});
			app.register(dataMap_9);
			
			var dataMap_10 = new cpr.data.DataMap("dmCmCreate");
			dataMap_10.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "playYmd"},
					{"name": "playNo"},
					{"name": "playClf"},
					{"name": "deleteYn"},
					{"name": "broadHm"}
				]
			});
			app.register(dataMap_10);
			
			var dataMap_11 = new cpr.data.DataMap("dmSeCreate");
			dataMap_11.parseData({
				"columns" : [
					{"name": "chanId"},
					{"name": "playYmd"},
					{"name": "playNo"}
				]
			});
			app.register(dataMap_11);
			var submission_1 = new cpr.protocols.Submission("smsPlayListSet");
			submission_1.action = "aaa.json";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("smsChannelSet");
			submission_2.action = "/EXB/ChannelCodeList.do";
			submission_2.addResponseData(dataSet_3, false);
			if(typeof onSmsChannelSetSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSmsChannelSetSubmitSuccess);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("smsPlMtrlSet");
			submission_3.action = "/EXB/dailyPlMtrList.do";
			submission_3.addRequestData(dataMap_2);
			submission_3.addResponseData(dataSet_22, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("smsPgmMtrlSet");
			submission_4.action = "/EXB/pgmMtrList.do";
			submission_4.addRequestData(dataMap_3);
			submission_4.addResponseData(dataSet_23, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("smsCmMtrlSet");
			submission_5.action = "/EXB/cmMtrList.do";
			submission_5.addRequestData(dataMap_4);
			submission_5.addResponseData(dataSet_24, false);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("smsPlayListSave");
			submission_6.action = "/EXB/playListSave.do";
			submission_6.addRequestData(dataSet_1);
			submission_6.addRequestData(dataMap_9);
			submission_6.addRequestData(dataSet_30);
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("smsDailyCopy");
			submission_7.action = "/EXB/DailySchlCopyToList.do";
			submission_7.addRequestData(dataMap_5);
			submission_7.addResponseData(dataSet_1, false);
			app.register(submission_7);
			
			var submission_8 = new cpr.protocols.Submission("smsDailyCreate");
			submission_8.action = "/EXB/DailySchlCreateToList.do";
			submission_8.addRequestData(dataMap_7);
			submission_8.addResponseData(dataSet_1, false);
			app.register(submission_8);
			
			var submission_9 = new cpr.protocols.Submission("smsDailyCmCreate");
			submission_9.action = "/EXB/CmSchlCreateToList.do";
			submission_9.addRequestData(dataMap_10);
			submission_9.addResponseData(dataSet_1, false);
			app.register(submission_9);
			
			var submission_10 = new cpr.protocols.Submission("smsSelectConfirmedList");
			submission_10.action = "/EXB/ConfirmedList.do";
			submission_10.addRequestData(dataMap_6);
			submission_10.addResponseData(dataSet_29, false);
			app.register(submission_10);
			
			var submission_11 = new cpr.protocols.Submission("smsDailySeCreate");
			submission_11.action = "/EXB/SeCreateToList.do";
			submission_11.addRequestData(dataMap_11);
			submission_11.addResponseData(dataSet_1, false);
			app.register(submission_11);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-image" : "none",
				"background-color" : "#ffffff",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpSchBox");
			group_1.style.setClasses(["search-box"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "10px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "10px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.verticalSpacing = "3px";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setColumnMinWidth(0, 355);
			formLayout_1.setColumnMinWidth(1, 450);
			formLayout_1.setRows(["24px", "24px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grpSchFrist");
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.rightMargin = "0px";
				formLayout_2.leftMargin = "0px";
				formLayout_2.setColumns(["80px", "150px", "50px", "80px", "120px", "30px", "30px", "30px", "60px", "270px", "60px", "60px", "1fr"]);
				formLayout_2.setRows(["24px"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "채널";
					output_1.style.setClasses(["text-right"]);
					output_1.style.css({
						"font-size" : "10pt",
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"topSpacing": 0,
						"bottomSpacing": 0
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "운행일자";
					output_2.style.setClasses(["text-right"]);
					output_2.style.css({
						"font-size" : "10pt",
						"text-align" : "center"
					});
					container.addChild(output_2, {
						"colIndex": 3,
						"rowIndex": 0,
						"topSpacing": 0,
						"bottomSpacing": 0
					});
					var button_1 = new cpr.controls.Button("btnMainSearch");
					button_1.value = "";
					button_1.style.setClasses(["btn-search"]);
					if(typeof onButtonClick == "function") {
						button_1.addEventListener("click", onButtonClick);
					}
					container.addChild(button_1, {
						"colIndex": 10,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1,
						"topSpacing": 0,
						"bottomSpacing": 0,
						"leftSpacing": 15
					});
					var comboBox_1 = new cpr.controls.ComboBox("cmbChan");
					comboBox_1.style.css({
						"font-size" : "10pt"
					});
					comboBox_1.bind("value").toDataMap(app.lookup("dmDailySearch"), "chanId");
					(function(comboBox_1){
						comboBox_1.setItemSet(app.lookup("dsChannel"), {
							"label": "chanNm",
							"value": "chanId"
						});
					})(comboBox_1);
					container.addChild(comboBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"topSpacing": 0,
						"bottomSpacing": 0
					});
					var dateInput_1 = new cpr.controls.DateInput("dtiDaily");
					dateInput_1.style.css({
						"font-size" : "10pt"
					});
					dateInput_1.bind("value").toDataMap(app.lookup("dmDailySearch"), "playYmd");
					if(typeof onDtiDailyValueChange == "function") {
						dateInput_1.addEventListener("value-change", onDtiDailyValueChange);
					}
					container.addChild(dateInput_1, {
						"colIndex": 4,
						"rowIndex": 0,
						"topSpacing": 0,
						"bottomSpacing": 0
					});
					var output_3 = new cpr.controls.Output("opbDayOfTheWeek");
					output_3.style.setClasses(["text-center"]);
					container.addChild(output_3, {
						"colIndex": 5,
						"rowIndex": 0
					});
					var button_2 = new cpr.controls.Button();
					button_2.value = "<";
					button_2.style.setClasses(["text-center"]);
					if(typeof onButtonClick2 == "function") {
						button_2.addEventListener("click", onButtonClick2);
					}
					container.addChild(button_2, {
						"colIndex": 6,
						"rowIndex": 0
					});
					var button_3 = new cpr.controls.Button();
					button_3.value = ">";
					button_3.style.setClasses(["text-center"]);
					if(typeof onButtonClick3 == "function") {
						button_3.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_3, {
						"colIndex": 7,
						"rowIndex": 0
					});
					var comboBox_2 = new cpr.controls.ComboBox("cmbPlayNo");
					comboBox_2.bind("value").toDataMap(app.lookup("dmDailySearch"), "playNo");
					(function(comboBox_2){
						comboBox_2.setItemSet(app.lookup("dsPlayNo"), {
							"label": "dname",
							"value": "dcode"
						});
					})(comboBox_2);
					container.addChild(comboBox_2, {
						"colIndex": 8,
						"rowIndex": 0
					});
					var output_4 = new cpr.controls.Output("opbConfirm");
					output_4.style.setClasses(["text-left-pad"]);
					container.addChild(output_4, {
						"colIndex": 9,
						"rowIndex": 0
					});
					var button_4 = new cpr.controls.Button("btnMainSave");
					button_4.value = "";
					button_4.style.setClasses(["btn-save"]);
					if(typeof onBtnMainSaveClick == "function") {
						button_4.addEventListener("click", onBtnMainSaveClick);
					}
					container.addChild(button_4, {
						"colIndex": 11,
						"rowIndex": 0,
						"leftSpacing": 15
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 2,
					"rowSpan": 1
				});
				var group_3 = new cpr.controls.Container("grpSchSecLeft");
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.scrollable = false;
				formLayout_3.setColumns(["1fr", "100px", "100px", "80px", "80px", "90px", "80px", "90px", "90px"]);
				formLayout_3.setColumnAutoSizing(1, true);
				formLayout_3.setColumnAutoSizing(2, true);
				formLayout_3.setColumnAutoSizing(3, true);
				formLayout_3.setRows(["24px"]);
				group_3.setLayout(formLayout_3);
				(function(container){
					var button_5 = new cpr.controls.Button("btnScheduleCreate");
					button_5.value = "운행표 작성";
					if(typeof onBtnScheduleCreateClick == "function") {
						button_5.addEventListener("click", onBtnScheduleCreateClick);
					}
					container.addChild(button_5, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var button_6 = new cpr.controls.Button("btnCmCreate");
					button_6.value = "광고생성";
					if(typeof onBtnCmCreateClick == "function") {
						button_6.addEventListener("click", onBtnCmCreateClick);
					}
					container.addChild(button_6, {
						"colIndex": 3,
						"rowIndex": 0
					});
					var button_7 = new cpr.controls.Button("btnSeCreate");
					button_7.value = "S/E 생성";
					if(typeof onBtnSeCreateClick == "function") {
						button_7.addEventListener("click", onBtnSeCreateClick);
					}
					container.addChild(button_7, {
						"colIndex": 4,
						"rowIndex": 0
					});
					var button_8 = new cpr.controls.Button("btnVerify");
					button_8.value = "검증";
					if(typeof onBtnVerifyClick == "function") {
						button_8.addEventListener("click", onBtnVerifyClick);
					}
					container.addChild(button_8, {
						"colIndex": 6,
						"rowIndex": 0
					});
					var button_9 = new cpr.controls.Button("btnConfirm");
					button_9.value = "확정";
					if(typeof onBtnConfirmClick == "function") {
						button_9.addEventListener("click", onBtnConfirmClick);
					}
					container.addChild(button_9, {
						"colIndex": 7,
						"rowIndex": 0
					});
					var button_10 = new cpr.controls.Button("btnFileSave");
					button_10.value = "파일저장";
					container.addChild(button_10, {
						"colIndex": 8,
						"rowIndex": 0
					});
					var button_11 = new cpr.controls.Button("btnSource");
					button_11.value = "소스지정";
					if(typeof onBtnSourceClick == "function") {
						button_11.addEventListener("click", onBtnSourceClick);
					}
					container.addChild(button_11, {
						"colIndex": 5,
						"rowIndex": 0
					});
					var checkBox_1 = new cpr.controls.CheckBox("cbxMtrlSch");
					checkBox_1.trueValue = "Y";
					checkBox_1.falseValue = "N";
					checkBox_1.text = "소재검색";
					if(typeof onCbxMtrlSchValueChange == "function") {
						checkBox_1.addEventListener("value-change", onCbxMtrlSchValueChange);
					}
					container.addChild(checkBox_1, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_3);
				container.addChild(group_3, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var group_4 = new cpr.controls.Container("grpSchSecRight");
				// Layout
				var formLayout_4 = new cpr.controls.layouts.FormLayout();
				formLayout_4.scrollable = false;
				formLayout_4.rightMargin = "0px";
				formLayout_4.leftMargin = "0px";
				formLayout_4.horizontalSpacing = "5px";
				formLayout_4.verticalSpacing = "5px";
				formLayout_4.setColumns(["80px", "110px", "110px"]);
				formLayout_4.setRows(["24px"]);
				group_4.setLayout(formLayout_4);
				(function(container){
					var button_12 = new cpr.controls.Button("btnMtrlChange");
					button_12.value = "소재 변경";
					if(typeof onBtnMtrlChangeClick == "function") {
						button_12.addEventListener("click", onBtnMtrlChangeClick);
					}
					container.addChild(button_12, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var button_13 = new cpr.controls.Button("btnCmTimeCheck");
					button_13.value = "광고시간 확인";
					if(typeof onBtnCmTimeCheckClick == "function") {
						button_13.addEventListener("click", onBtnCmTimeCheckClick);
					}
					container.addChild(button_13, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var button_14 = new cpr.controls.Button("btnBroadMtrl");
					button_14.value = "방송소재 확인";
					if(typeof onBtnBroadMtrlClick == "function") {
						button_14.addEventListener("click", onBtnBroadMtrlClick);
					}
					container.addChild(button_14, {
						"colIndex": 2,
						"rowIndex": 0
					});
				})(group_4);
				container.addChild(group_4, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "5px",
				"right": "5px",
				"left": "5px",
				"height": "71px"
			});
			
			var group_5 = new cpr.controls.Container("grpCt");
			// Layout
			var formLayout_5 = new cpr.controls.layouts.FormLayout();
			formLayout_5.setColumns(["3fr", "2fr"]);
			formLayout_5.setRows(["1fr"]);
			group_5.setLayout(formLayout_5);
			(function(container){
				var grid_1 = new cpr.controls.Grid("grdSch");
				grid_1.fieldLabel = "일일운행리스트";
				grid_1.init({
					"dataSet": app.lookup("dsPlayList"),
					"columnMovable": true,
					"autoFit": "8, 9, 10, 11, 21, 27, 28, 29, 30, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50",
					"resizableColumns": "all",
					"showDeletedRow": false,
					"columns": [
						{"width": "40px"},
						{"width": "120px"},
						{"width": "120px"},
						{"width": "120px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "100px"},
						{"width": "60px"},
						{"width": "100px"},
						{"width": "150px"},
						{"width": "220px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "80px"},
						{"width": "100px"},
						{"width": "120px"},
						{"width": "200px"},
						{"width": "60px"},
						{"width": "100px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "100px"},
						{"width": "80px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "80px"},
						{"width": "60px"},
						{"width": "60px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "80px"},
						{"width": "100px"},
						{"width": "110px"},
						{"width": "100px"},
						{"width": "80px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "28"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "No";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "시작시각";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "운행길이";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.text = "종료시각";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.text = "Type";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.text = "시작";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.text = "큐톤신호";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.text = "큐톤";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.text = "소재구분";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.text = "소재 ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.text = "소재명";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.text = "소재정보";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.text = "LOGO ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.text = "CG ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.text = "송출소스";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.text = "송출구분";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.text = "Control";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.text = "편성시각";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.text = "프로그램코드";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.text = "화수";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.text = "심의등급";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 22},
								"configurator": function(cell){
									cell.text = "주제";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 23},
								"configurator": function(cell){
									cell.text = "언어";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 24},
								"configurator": function(cell){
									cell.text = "모방";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 25},
								"configurator": function(cell){
									cell.text = "폭력";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 26},
								"configurator": function(cell){
									cell.text = "선정";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 27},
								"configurator": function(cell){
									cell.text = "부제";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 28},
								"configurator": function(cell){
									cell.text = "길이";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 29},
								"configurator": function(cell){
									cell.text = "방송구분";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 30},
								"configurator": function(cell){
									cell.text = "초방구분";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 31},
								"configurator": function(cell){
									cell.text = "자막";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 32},
								"configurator": function(cell){
									cell.text = "수화";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 33},
								"configurator": function(cell){
									cell.text = "화면해설";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 34},
								"configurator": function(cell){
									cell.text = "E/I";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 35},
								"configurator": function(cell){
									cell.text = "광고";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 36},
								"configurator": function(cell){
									cell.text = "광고불가";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 37},
								"configurator": function(cell){
									cell.text = "Duration";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 38},
								"configurator": function(cell){
									cell.text = "SOM";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 39},
								"configurator": function(cell){
									cell.text = "화질";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 40},
								"configurator": function(cell){
									cell.text = "AUDIO";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 41},
								"configurator": function(cell){
									cell.text = "서버1";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 42},
								"configurator": function(cell){
									cell.text = "서버2";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 43},
								"configurator": function(cell){
									cell.text = "서버3";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 44},
								"configurator": function(cell){
									cell.text = "서버4";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 45},
								"configurator": function(cell){
									cell.text = "OUTPUT";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 46},
								"configurator": function(cell){
									cell.text = "TRANSITION";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 47},
								"configurator": function(cell){
									cell.text = "RATE";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 48},
								"configurator": function(cell){
									cell.text = "연속방송";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 49},
								"configurator": function(cell){
									cell.text = "테이프코드";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 50},
								"configurator": function(cell){
									cell.text = "ASSET ID";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.text = "프로그램명";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "30"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "playTime24";
									cell.control = (function(){
										var maskEditor_1 = new cpr.controls.MaskEditor("mseStart");
										maskEditor_1.mask = "00:00:00:00";
										maskEditor_1.style.setClasses(["text-center"]);
										maskEditor_1.bind("readOnly").toExpression("rowIndex != 0");
										if(typeof onMseStartValueChange == "function") {
											maskEditor_1.addEventListener("value-change", onMseStartValueChange);
										}
										maskEditor_1.bind("value").toDataColumn("playTime24");
										return maskEditor_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "playRun";
									cell.control = (function(){
										var maskEditor_2 = new cpr.controls.MaskEditor("mseRun");
										maskEditor_2.mask = "00:00:00:00";
										maskEditor_2.style.setClasses(["text-center"]);
										if(typeof onMseRunValueChange == "function") {
											maskEditor_2.addEventListener("value-change", onMseRunValueChange);
										}
										maskEditor_2.bind("value").toDataColumn("playRun");
										return maskEditor_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "compute";
									cell.control = (function(){
										var maskEditor_3 = new cpr.controls.MaskEditor("mseEnd");
										maskEditor_3.readOnly = true;
										maskEditor_3.mask = "00:00:00:00";
										maskEditor_3.style.setClasses(["text-center"]);
										maskEditor_3.bind("value").toExpression("calBroadEndTime(getValue(\"playTime24\").substring(0, 2), getValue(\"playTime24\").substring(2, 4), getValue(\"playTime24\").substring(4, 6), getValue(\"playTime24\").substring(6, 8), getValue(\"playRun\").substring(0, 2), getValue(\"playRun\").substring(2, 4), getValue(\"playRun\").substring(4, 6), getValue(\"playRun\").substring(6, 8))");
										return maskEditor_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "eventTyp";
									cell.control = (function(){
										var comboBox_3 = new cpr.controls.ComboBox("cmb2");
										comboBox_3.style.setClasses(["text-center"]);
										(function(comboBox_3){
											comboBox_3.addItem(new cpr.controls.Item("", ""));
											comboBox_3.setItemSet(app.lookup("dsEventTyp"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_3);
										comboBox_3.bind("value").toDataColumn("eventTyp");
										return comboBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "startTyp";
									cell.control = (function(){
										var comboBox_4 = new cpr.controls.ComboBox("cmb3");
										comboBox_4.style.setClasses(["text-center"]);
										(function(comboBox_4){
											comboBox_4.addItem(new cpr.controls.Item("", ""));
											comboBox_4.setItemSet(app.lookup("dsStartTyp"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_4);
										comboBox_4.bind("value").toDataColumn("startTyp");
										return comboBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "gpiId1";
									cell.control = (function(){
										var comboBox_5 = new cpr.controls.ComboBox("cmb4");
										comboBox_5.style.setClasses(["text-center"]);
										(function(comboBox_5){
											comboBox_5.addItem(new cpr.controls.Item("", ""));
											comboBox_5.setItemSet(app.lookup("dsGpiId1"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_5);
										comboBox_5.bind("value").toDataColumn("gpiId1");
										return comboBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "gpiMtrlYn";
									cell.control = (function(){
										var checkBox_2 = new cpr.controls.CheckBox("cbx2");
										checkBox_2.trueValue = "Y";
										checkBox_2.falseValue = "N";
										checkBox_2.style.setClasses(["text-center"]);
										checkBox_2.bind("value").toDataColumn("gpiMtrlYn");
										return checkBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "mtrlClf";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "mtrlId";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("ipb2");
										inputBox_1.style.setClasses(["text-center"]);
										inputBox_1.bind("value").toDataColumn("mtrlId");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "mtrlNm";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("ipb3");
										inputBox_2.style.setClasses(["text-left-pad"]);
										inputBox_2.bind("value").toDataColumn("mtrlNm");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 11},
								"configurator": function(cell){
									cell.columnName = "mtrlInfo";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("ipb4");
										inputBox_3.style.setClasses(["text-left-pad"]);
										inputBox_3.bind("value").toDataColumn("mtrlInfo");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 12},
								"configurator": function(cell){
									cell.columnName = "logoId";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("ipb5");
										inputBox_4.style.setClasses(["text-center"]);
										inputBox_4.bind("value").toDataColumn("logoId");
										return inputBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 13},
								"configurator": function(cell){
									cell.columnName = "cgId";
									cell.control = (function(){
										var inputBox_5 = new cpr.controls.InputBox("ipb6");
										inputBox_5.style.setClasses(["text-center"]);
										inputBox_5.bind("value").toDataColumn("cgId");
										return inputBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 14},
								"configurator": function(cell){
									cell.columnName = "deviceId";
									cell.control = (function(){
										var comboBox_6 = new cpr.controls.ComboBox("cmb9");
										comboBox_6.style.setClasses(["text-center"]);
										(function(comboBox_6){
											comboBox_6.addItem(new cpr.controls.Item("", ""));
										})(comboBox_6);
										comboBox_6.bind("value").toDataColumn("deviceId");
										return comboBox_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 15},
								"configurator": function(cell){
									cell.columnName = "brdType";
									cell.control = (function(){
										var comboBox_7 = new cpr.controls.ComboBox("cmb10");
										comboBox_7.style.setClasses(["text-center"]);
										(function(comboBox_7){
											comboBox_7.addItem(new cpr.controls.Item("", ""));
											comboBox_7.setItemSet(app.lookup("dsBrdType"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_7);
										comboBox_7.bind("value").toDataColumn("brdType");
										return comboBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 16},
								"configurator": function(cell){
									cell.columnName = "eventCtrl";
									cell.control = (function(){
										var comboBox_8 = new cpr.controls.ComboBox("cmb11");
										comboBox_8.style.setClasses(["text-center"]);
										(function(comboBox_8){
											comboBox_8.addItem(new cpr.controls.Item("", ""));
											comboBox_8.setItemSet(app.lookup("dsEventCtrl"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_8);
										comboBox_8.bind("value").toDataColumn("eventCtrl");
										return comboBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 17},
								"configurator": function(cell){
									cell.columnName = "broadHm";
									cell.control = (function(){
										var maskEditor_4 = new cpr.controls.MaskEditor("mse4");
										maskEditor_4.mask = "00:00";
										maskEditor_4.style.setClasses(["text-center"]);
										maskEditor_4.bind("value").toDataColumn("broadHm");
										return maskEditor_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 18},
								"configurator": function(cell){
									cell.columnName = "pgmCd";
									cell.control = (function(){
										var inputBox_6 = new cpr.controls.InputBox("ipb7");
										inputBox_6.style.setClasses(["text-center"]);
										inputBox_6.bind("value").toDataColumn("pgmCd");
										return inputBox_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 20},
								"configurator": function(cell){
									cell.columnName = "episodeNo";
									cell.control = (function(){
										var inputBox_7 = new cpr.controls.InputBox("ipb8");
										inputBox_7.style.setClasses(["text-center"]);
										inputBox_7.bind("value").toDataColumn("episodeNo");
										return inputBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 21},
								"configurator": function(cell){
									cell.columnName = "delibGrade";
									cell.control = (function(){
										var comboBox_9 = new cpr.controls.ComboBox("cmb12");
										comboBox_9.style.setClasses(["text-center"]);
										(function(comboBox_9){
											comboBox_9.addItem(new cpr.controls.Item("", ""));
											comboBox_9.setItemSet(app.lookup("dsDelibGrade"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_9);
										comboBox_9.bind("value").toDataColumn("delibGrade");
										return comboBox_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 22},
								"configurator": function(cell){
									cell.columnName = "delibTopicYn";
									cell.control = (function(){
										var checkBox_3 = new cpr.controls.CheckBox("cbx3");
										checkBox_3.trueValue = "Y";
										checkBox_3.falseValue = "N";
										checkBox_3.style.setClasses(["text-center"]);
										checkBox_3.bind("value").toDataColumn("delibTopicYn");
										return checkBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 23},
								"configurator": function(cell){
									cell.columnName = "delibLanguageYn";
									cell.control = (function(){
										var checkBox_4 = new cpr.controls.CheckBox("cbx4");
										checkBox_4.trueValue = "Y";
										checkBox_4.falseValue = "N";
										checkBox_4.style.setClasses(["text-center"]);
										checkBox_4.bind("value").toDataColumn("delibLanguageYn");
										return checkBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 24},
								"configurator": function(cell){
									cell.columnName = "delibCopyYn";
									cell.control = (function(){
										var checkBox_5 = new cpr.controls.CheckBox("cbx5");
										checkBox_5.trueValue = "Y";
										checkBox_5.falseValue = "N";
										checkBox_5.style.setClasses(["text-center"]);
										checkBox_5.bind("value").toDataColumn("delibCopyYn");
										return checkBox_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 25},
								"configurator": function(cell){
									cell.columnName = "delibViolenceYn";
									cell.control = (function(){
										var checkBox_6 = new cpr.controls.CheckBox("cbx6");
										checkBox_6.trueValue = "Y";
										checkBox_6.falseValue = "N";
										checkBox_6.style.setClasses(["text-center"]);
										checkBox_6.bind("value").toDataColumn("delibViolenceYn");
										return checkBox_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 26},
								"configurator": function(cell){
									cell.columnName = "delibSexualYn";
									cell.control = (function(){
										var checkBox_7 = new cpr.controls.CheckBox("cbx7");
										checkBox_7.trueValue = "Y";
										checkBox_7.falseValue = "N";
										checkBox_7.style.setClasses(["text-center"]);
										checkBox_7.bind("value").toDataColumn("delibSexualYn");
										return checkBox_7;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 27},
								"configurator": function(cell){
									cell.columnName = "episodeNm";
									cell.control = (function(){
										var inputBox_8 = new cpr.controls.InputBox("ipb9");
										inputBox_8.style.setClasses(["text-left-pad"]);
										inputBox_8.bind("value").toDataColumn("episodeNm");
										return inputBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 28},
								"configurator": function(cell){
									cell.columnName = "broadRun";
									cell.control = (function(){
										var inputBox_9 = new cpr.controls.InputBox("ipb10");
										inputBox_9.style.setClasses(["text-center"]);
										inputBox_9.bind("value").toDataColumn("broadRun");
										return inputBox_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 29},
								"configurator": function(cell){
									cell.columnName = "broadClf";
									cell.control = (function(){
										var comboBox_10 = new cpr.controls.ComboBox("cmb13");
										comboBox_10.style.setClasses(["text-center"]);
										(function(comboBox_10){
											comboBox_10.addItem(new cpr.controls.Item("", ""));
											comboBox_10.setItemSet(app.lookup("dsBroadClf"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_10);
										comboBox_10.bind("value").toDataColumn("broadClf");
										return comboBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 30},
								"configurator": function(cell){
									cell.columnName = "firstClf";
									cell.control = (function(){
										var comboBox_11 = new cpr.controls.ComboBox("cmb14");
										comboBox_11.style.setClasses(["text-center"]);
										(function(comboBox_11){
											comboBox_11.addItem(new cpr.controls.Item("", ""));
											comboBox_11.setItemSet(app.lookup("dsFirstClf"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_11);
										comboBox_11.bind("value").toDataColumn("firstClf");
										return comboBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 31},
								"configurator": function(cell){
									cell.columnName = "captionYn";
									cell.control = (function(){
										var checkBox_8 = new cpr.controls.CheckBox("cbx8");
										checkBox_8.trueValue = "Y";
										checkBox_8.falseValue = "N";
										checkBox_8.style.setClasses(["text-center"]);
										checkBox_8.bind("value").toDataColumn("captionYn");
										return checkBox_8;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 32},
								"configurator": function(cell){
									cell.columnName = "signLangYn";
									cell.control = (function(){
										var checkBox_9 = new cpr.controls.CheckBox("cbx9");
										checkBox_9.trueValue = "Y";
										checkBox_9.falseValue = "N";
										checkBox_9.style.setClasses(["text-center"]);
										checkBox_9.bind("value").toDataColumn("signLangYn");
										return checkBox_9;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 33},
								"configurator": function(cell){
									cell.columnName = "dvsYn";
									cell.control = (function(){
										var checkBox_10 = new cpr.controls.CheckBox("cbx10");
										checkBox_10.trueValue = "Y";
										checkBox_10.falseValue = "N";
										checkBox_10.style.setClasses(["text-center"]);
										checkBox_10.bind("value").toDataColumn("dvsYn");
										return checkBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 34},
								"configurator": function(cell){
									cell.columnName = "childYn";
									cell.control = (function(){
										var checkBox_11 = new cpr.controls.CheckBox("cbx11");
										checkBox_11.trueValue = "Y";
										checkBox_11.falseValue = "N";
										checkBox_11.style.setClasses(["text-center"]);
										checkBox_11.bind("value").toDataColumn("childYn");
										return checkBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 35},
								"configurator": function(cell){
									cell.columnName = "cmYn";
									cell.control = (function(){
										var checkBox_12 = new cpr.controls.CheckBox("cbx12");
										checkBox_12.trueValue = "Y";
										checkBox_12.falseValue = "N";
										checkBox_12.style.setClasses(["text-center"]);
										checkBox_12.bind("value").toDataColumn("cmYn");
										return checkBox_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 36},
								"configurator": function(cell){
									cell.columnName = "cmNotCd";
									cell.control = (function(){
										var comboBox_12 = new cpr.controls.ComboBox("cmb15");
										comboBox_12.style.setClasses(["text-center"]);
										(function(comboBox_12){
											comboBox_12.addItem(new cpr.controls.Item("", ""));
											comboBox_12.setItemSet(app.lookup("dsCmNotCd"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_12);
										comboBox_12.bind("value").toDataColumn("cmNotCd");
										return comboBox_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 37},
								"configurator": function(cell){
									cell.columnName = "duration";
									cell.control = (function(){
										var maskEditor_5 = new cpr.controls.MaskEditor("mse5");
										maskEditor_5.mask = "00:00:00:00";
										maskEditor_5.style.setClasses(["text-center"]);
										maskEditor_5.bind("value").toDataColumn("duration");
										return maskEditor_5;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 38},
								"configurator": function(cell){
									cell.columnName = "som";
									cell.control = (function(){
										var maskEditor_6 = new cpr.controls.MaskEditor("mse6");
										maskEditor_6.mask = "00:00:00:00";
										maskEditor_6.style.setClasses(["text-center"]);
										maskEditor_6.bind("value").toDataColumn("som");
										return maskEditor_6;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 39},
								"configurator": function(cell){
									cell.columnName = "videoClf";
									cell.control = (function(){
										var comboBox_13 = new cpr.controls.ComboBox("cmb16");
										comboBox_13.style.setClasses(["text-center"]);
										(function(comboBox_13){
											comboBox_13.addItem(new cpr.controls.Item("", ""));
											comboBox_13.setItemSet(app.lookup("dsVideoClf"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_13);
										comboBox_13.bind("value").toDataColumn("videoClf");
										return comboBox_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 40},
								"configurator": function(cell){
									cell.columnName = "audioClf";
									cell.control = (function(){
										var comboBox_14 = new cpr.controls.ComboBox("cmb17");
										comboBox_14.style.setClasses(["text-center"]);
										(function(comboBox_14){
											comboBox_14.addItem(new cpr.controls.Item("", ""));
											comboBox_14.setItemSet(app.lookup("dsAudioClf"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_14);
										comboBox_14.bind("value").toDataColumn("audioClf");
										return comboBox_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 41},
								"configurator": function(cell){
									cell.columnName = "clipYn1";
									cell.control = (function(){
										var checkBox_13 = new cpr.controls.CheckBox("cbx13");
										checkBox_13.trueValue = "Y";
										checkBox_13.falseValue = "N";
										checkBox_13.style.setClasses(["text-center"]);
										checkBox_13.bind("value").toDataColumn("clipYn1");
										return checkBox_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 42},
								"configurator": function(cell){
									cell.columnName = "clipYn2";
									cell.control = (function(){
										var checkBox_14 = new cpr.controls.CheckBox("cbx14");
										checkBox_14.trueValue = "Y";
										checkBox_14.falseValue = "N";
										checkBox_14.style.setClasses(["text-center"]);
										checkBox_14.bind("value").toDataColumn("clipYn2");
										return checkBox_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 43},
								"configurator": function(cell){
									cell.columnName = "clipYn3";
									cell.control = (function(){
										var checkBox_15 = new cpr.controls.CheckBox("cbx15");
										checkBox_15.trueValue = "Y";
										checkBox_15.falseValue = "N";
										checkBox_15.style.setClasses(["text-center"]);
										checkBox_15.bind("value").toDataColumn("clipYn3");
										return checkBox_15;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 44},
								"configurator": function(cell){
									cell.columnName = "clipYn4";
									cell.control = (function(){
										var checkBox_16 = new cpr.controls.CheckBox("cbx16");
										checkBox_16.trueValue = "Y";
										checkBox_16.falseValue = "N";
										checkBox_16.style.setClasses(["text-center"]);
										checkBox_16.bind("value").toDataColumn("clipYn4");
										return checkBox_16;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 45},
								"configurator": function(cell){
									cell.columnName = "eventOut";
									cell.control = (function(){
										var comboBox_15 = new cpr.controls.ComboBox("cmb18");
										comboBox_15.style.setClasses(["text-center"]);
										(function(comboBox_15){
											comboBox_15.addItem(new cpr.controls.Item("", ""));
											comboBox_15.setItemSet(app.lookup("dsEventOut"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_15);
										comboBox_15.bind("value").toDataColumn("eventOut");
										return comboBox_15;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 46},
								"configurator": function(cell){
									cell.columnName = "eventTrns";
									cell.control = (function(){
										var comboBox_16 = new cpr.controls.ComboBox("cmb19");
										comboBox_16.style.setClasses(["text-center"]);
										(function(comboBox_16){
											comboBox_16.addItem(new cpr.controls.Item("", ""));
											comboBox_16.setItemSet(app.lookup("dsEventTrns"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_16);
										comboBox_16.bind("value").toDataColumn("eventTrns");
										return comboBox_16;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 47},
								"configurator": function(cell){
									cell.columnName = "eventRate";
									cell.control = (function(){
										var comboBox_17 = new cpr.controls.ComboBox("cmb20");
										comboBox_17.style.setClasses(["text-center"]);
										(function(comboBox_17){
											comboBox_17.addItem(new cpr.controls.Item("", ""));
											comboBox_17.setItemSet(app.lookup("dsEventRate"), {
												"label": "dname",
												"value": "dcode"
											});
										})(comboBox_17);
										comboBox_17.bind("value").toDataColumn("eventRate");
										return comboBox_17;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 48},
								"configurator": function(cell){
									cell.columnName = "keepYn";
									cell.control = (function(){
										var checkBox_17 = new cpr.controls.CheckBox("cbx17");
										checkBox_17.trueValue = "Y";
										checkBox_17.falseValue = "N";
										checkBox_17.style.setClasses(["text-center"]);
										checkBox_17.bind("value").toDataColumn("keepYn");
										return checkBox_17;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 49},
								"configurator": function(cell){
									cell.columnName = "tapeNo";
									cell.control = (function(){
										var inputBox_10 = new cpr.controls.InputBox("ipb11");
										inputBox_10.style.setClasses(["text-center"]);
										inputBox_10.bind("value").toDataColumn("tapeNo");
										return inputBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 50},
								"configurator": function(cell){
									cell.columnName = "assetId";
									cell.control = (function(){
										var inputBox_11 = new cpr.controls.InputBox("ipb12");
										inputBox_11.style.setClasses(["text-center"]);
										inputBox_11.bind("value").toDataColumn("assetId");
										return inputBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 19},
								"configurator": function(cell){
									cell.columnName = "pgmNm";
									cell.control = (function(){
										var inputBox_12 = new cpr.controls.InputBox();
										inputBox_12.style.setClasses(["text-left-pad"]);
										inputBox_12.bind("value").toDataColumn("pgmNm");
										return inputBox_12;
									})();
								}
							}
						]
					}
				});
				grid_1.style.row.bind("background-color").toExpression("color == \"YELLOW\" ? \"red !important\" :\"\"");
				grid_1.style.row.setClasses(["gridtyperow-1"]);
				if(typeof onGrdSchContextmenu == "function") {
					grid_1.addEventListener("contextmenu", onGrdSchContextmenu);
				}
				if(typeof onGrdSchPaste == "function") {
					grid_1.addEventListener("paste", onGrdSchPaste);
				}
				if(typeof onGrdSchKeydown == "function") {
					grid_1.addEventListener("keydown", onGrdSchKeydown);
				}
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"rightSpacing": 5,
					"bottomSpacing": 5,
					"leftSpacing": 5
				});
				var tabFolder_1 = new cpr.controls.TabFolder("tfSearch");
				tabFolder_1.headerArrowPosition = "none";
				
				var tabItem_1 = (function(tabFolder){
					var tabItem_1 = new cpr.controls.TabItem();
					tabItem_1.text = "운행소재";
					var group_6 = new cpr.controls.Container("grpMtrl");
					// Layout
					var xYLayout_2 = new cpr.controls.layouts.XYLayout();
					group_6.setLayout(xYLayout_2);
					(function(container){
						var group_7 = new cpr.controls.Container();
						// Layout
						var formLayout_6 = new cpr.controls.layouts.FormLayout();
						formLayout_6.topMargin = "5px";
						formLayout_6.rightMargin = "5px";
						formLayout_6.bottomMargin = "5px";
						formLayout_6.leftMargin = "5px";
						formLayout_6.setColumns(["80px", "1fr", "80px", "1fr"]);
						formLayout_6.setRows(["24px", "24px", "24px", "24px"]);
						group_7.setLayout(formLayout_6);
						(function(container){
							var output_5 = new cpr.controls.Output();
							output_5.value = "소재구분";
							output_5.style.setClasses(["text-right"]);
							container.addChild(output_5, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_6 = new cpr.controls.Output();
							output_6.value = "소재명";
							output_6.style.setClasses(["text-right"]);
							container.addChild(output_6, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var output_7 = new cpr.controls.Output();
							output_7.value = "소재정보";
							output_7.style.setClasses(["text-right"]);
							container.addChild(output_7, {
								"colIndex": 0,
								"rowIndex": 2
							});
							var output_8 = new cpr.controls.Output();
							output_8.value = "소재ID";
							output_8.style.setClasses(["text-right"]);
							container.addChild(output_8, {
								"colIndex": 0,
								"rowIndex": 3
							});
							var output_9 = new cpr.controls.Output();
							output_9.value = "APC 검색";
							output_9.style.setClasses(["text-right"]);
							container.addChild(output_9, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var output_10 = new cpr.controls.Output();
							output_10.value = "Duration";
							output_10.style.setClasses(["text-right"]);
							container.addChild(output_10, {
								"colIndex": 2,
								"rowIndex": 1
							});
							var output_11 = new cpr.controls.Output();
							output_11.value = "사용기간";
							output_11.style.setClasses(["text-right"]);
							container.addChild(output_11, {
								"colIndex": 2,
								"rowIndex": 2
							});
							var output_12 = new cpr.controls.Output();
							output_12.value = "등록일";
							output_12.style.setClasses(["text-right"]);
							container.addChild(output_12, {
								"colIndex": 2,
								"rowIndex": 3
							});
							var comboBox_18 = new cpr.controls.ComboBox("cmb6");
							comboBox_18.bind("value").toDataMap(app.lookup("dmPlMtrlInfo"), "mtrlClf1");
							(function(comboBox_18){
								comboBox_18.setItemSet(app.lookup("dsMtrlClf1"), {
									"label": "dname",
									"value": "dcode"
								});
							})(comboBox_18);
							container.addChild(comboBox_18, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var inputBox_13 = new cpr.controls.InputBox("ipb1");
							inputBox_13.bind("value").toDataMap(app.lookup("dmPlMtrlInfo"), "mtrlNm");
							container.addChild(inputBox_13, {
								"colIndex": 1,
								"rowIndex": 1
							});
							var inputBox_14 = new cpr.controls.InputBox("ipb13");
							inputBox_14.bind("value").toDataMap(app.lookup("dmPlMtrlInfo"), "mtrlInfo");
							container.addChild(inputBox_14, {
								"colIndex": 1,
								"rowIndex": 2
							});
							var group_8 = new cpr.controls.Container();
							// Layout
							var formLayout_7 = new cpr.controls.layouts.FormLayout();
							formLayout_7.setColumns(["1fr", "40px", "40px"]);
							formLayout_7.setRows(["1fr"]);
							group_8.setLayout(formLayout_7);
							(function(container){
								var inputBox_15 = new cpr.controls.InputBox("ipb14");
								inputBox_15.bind("value").toDataMap(app.lookup("dmPlMtrlInfo"), "mtrlId");
								container.addChild(inputBox_15, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var checkBox_18 = new cpr.controls.CheckBox("cbx18");
								checkBox_18.trueValue = "Y";
								checkBox_18.falseValue = "N";
								checkBox_18.text = "사용";
								container.addChild(checkBox_18, {
									"colIndex": 1,
									"rowIndex": 0
								});
								var checkBox_19 = new cpr.controls.CheckBox("cbx19");
								checkBox_19.value = "Y";
								checkBox_19.trueValue = "Y";
								checkBox_19.falseValue = "N";
								checkBox_19.text = "서버";
								container.addChild(checkBox_19, {
									"colIndex": 2,
									"rowIndex": 0
								});
							})(group_8);
							container.addChild(group_8, {
								"colIndex": 1,
								"rowIndex": 3
							});
							var checkBox_20 = new cpr.controls.CheckBox("cbx20");
							checkBox_20.text = "";
							container.addChild(checkBox_20, {
								"colIndex": 3,
								"rowIndex": 0
							});
							var group_9 = new cpr.controls.Container();
							// Layout
							var formLayout_8 = new cpr.controls.layouts.FormLayout();
							formLayout_8.setColumns(["1fr", "10px", "1fr"]);
							formLayout_8.setRows(["1fr"]);
							group_9.setLayout(formLayout_8);
							(function(container){
								var maskEditor_7 = new cpr.controls.MaskEditor("mse7");
								maskEditor_7.mask = "00:00:00";
								maskEditor_7.style.setClasses(["text-center"]);
								container.addChild(maskEditor_7, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var maskEditor_8 = new cpr.controls.MaskEditor("mse8");
								maskEditor_8.mask = "00:00:00";
								maskEditor_8.style.setClasses(["text-center"]);
								container.addChild(maskEditor_8, {
									"colIndex": 2,
									"rowIndex": 0
								});
								var output_13 = new cpr.controls.Output();
								output_13.value = "~";
								container.addChild(output_13, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_9);
							container.addChild(group_9, {
								"colIndex": 3,
								"rowIndex": 1
							});
							var group_10 = new cpr.controls.Container();
							// Layout
							var formLayout_9 = new cpr.controls.layouts.FormLayout();
							formLayout_9.setColumns(["1fr", "10px", "1fr"]);
							formLayout_9.setRows(["1fr"]);
							group_10.setLayout(formLayout_9);
							(function(container){
								var maskEditor_9 = new cpr.controls.MaskEditor("mse9");
								maskEditor_9.mask = "0000:00:00";
								maskEditor_9.style.setClasses(["text-center"]);
								maskEditor_9.bind("value").toDataMap(app.lookup("dmPlMtrlInfo"), "useBeginYmd");
								container.addChild(maskEditor_9, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var maskEditor_10 = new cpr.controls.MaskEditor("mse10");
								maskEditor_10.mask = "0000:00:00";
								maskEditor_10.style.setClasses(["text-center"]);
								maskEditor_10.bind("value").toDataMap(app.lookup("dmPlMtrlInfo"), "useEndYmd");
								container.addChild(maskEditor_10, {
									"colIndex": 2,
									"rowIndex": 0
								});
								var output_14 = new cpr.controls.Output();
								output_14.value = "~";
								container.addChild(output_14, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_10);
							container.addChild(group_10, {
								"colIndex": 3,
								"rowIndex": 2
							});
							var group_11 = new cpr.controls.Container();
							// Layout
							var formLayout_10 = new cpr.controls.layouts.FormLayout();
							formLayout_10.setColumns(["1fr", "10px", "1fr"]);
							formLayout_10.setRows(["1fr"]);
							group_11.setLayout(formLayout_10);
							(function(container){
								var maskEditor_11 = new cpr.controls.MaskEditor("mse11");
								maskEditor_11.mask = "0000:00:00";
								maskEditor_11.style.setClasses(["text-center"]);
								maskEditor_11.bind("value").toDataMap(app.lookup("dmPlMtrlInfo"), "regBeginYmd");
								container.addChild(maskEditor_11, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var maskEditor_12 = new cpr.controls.MaskEditor("mse12");
								maskEditor_12.mask = "0000:00:00";
								maskEditor_12.style.setClasses(["text-center"]);
								maskEditor_12.bind("value").toDataMap(app.lookup("dmPlMtrlInfo"), "regEndYmd");
								container.addChild(maskEditor_12, {
									"colIndex": 2,
									"rowIndex": 0
								});
								var output_15 = new cpr.controls.Output();
								output_15.value = "~";
								container.addChild(output_15, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_11);
							container.addChild(group_11, {
								"colIndex": 3,
								"rowIndex": 3
							});
						})(group_7);
						container.addChild(group_7, {
							"top": "50px",
							"right": "10px",
							"left": "10px",
							"height": "121px"
						});
						var group_12 = new cpr.controls.Container("grpGridBtns");
						// Layout
						var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
						flowLayout_1.horizontalAlign = "right";
						group_12.setLayout(flowLayout_1);
						(function(container){
							var button_15 = new cpr.controls.Button("btnPlMtrlSearch");
							button_15.tooltip = "검색";
							button_15.style.setClasses(["btn-search"]);
							if(typeof onBtnPlMtrlSearchClick == "function") {
								button_15.addEventListener("click", onBtnPlMtrlSearchClick);
							}
							container.addChild(button_15, {
								"autoSize": "none",
								"width": "25px",
								"height": "30px"
							});
						})(group_12);
						container.addChild(group_12, {
							"top": "10px",
							"right": "10px",
							"left": "10px",
							"height": "35px"
						});
						var grid_2 = new cpr.controls.Grid("grdPlMtrl");
						grid_2.init({
							"dataSet": app.lookup("dsPlMtrlList"),
							"autoFit": "1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13",
							"columns": [
								{"width": "100px"},
								{"width": "100px"},
								{"width": "100px"},
								{"width": "350px"},
								{"width": "100px"},
								{"width": "100px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "100px"},
								{"width": "100px"},
								{"width": "100px"}
							],
							"header": {
								"rows": [{"height": "28"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.text = "채널";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "소재구분";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.text = "소재ID";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.text = "소재명";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.text = "Duration";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.text = "송출M";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.text = "송출B";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.text = "중앙";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.text = "제작";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.text = "ARCH";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.text = "소재정보";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.text = "사용시작일";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.text = "사용종료일";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.text = "SOM";
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "30"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnName = "chanId";
											cell.control = (function(){
												var output_16 = new cpr.controls.Output();
												output_16.value = "Output";
												output_16.style.setClasses(["text-center"]);
												output_16.bind("value").toDataColumn("chanId");
												return output_16;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.columnName = "mtrlClf";
											cell.control = (function(){
												var comboBox_19 = new cpr.controls.ComboBox("cmb7");
												comboBox_19.style.setClasses(["text-center"]);
												(function(comboBox_19){
													comboBox_19.addItem(new cpr.controls.Item("", ""));
													comboBox_19.setItemSet(app.lookup("dsMtrlClf1"), {
														"label": "dname",
														"value": "dcode"
													});
												})(comboBox_19);
												comboBox_19.bind("value").toDataColumn("mtrlClf");
												return comboBox_19;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnName = "mtrlId";
											cell.control = (function(){
												var output_17 = new cpr.controls.Output();
												output_17.value = "Output";
												output_17.style.setClasses(["text-center"]);
												output_17.bind("value").toDataColumn("mtrlId");
												return output_17;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "mtrlNm";
											cell.control = (function(){
												var output_18 = new cpr.controls.Output();
												output_18.value = "Output";
												output_18.style.setClasses(["text-left-pad"]);
												output_18.bind("value").toDataColumn("mtrlNm");
												return output_18;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "duration";
											cell.control = (function(){
												var maskEditor_13 = new cpr.controls.MaskEditor("mse13");
												maskEditor_13.mask = "00:00:00:00";
												maskEditor_13.style.setClasses(["text-center"]);
												maskEditor_13.bind("value").toDataColumn("duration");
												return maskEditor_13;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "clipYn1";
											cell.control = (function(){
												var checkBox_21 = new cpr.controls.CheckBox("cbx21");
												checkBox_21.trueValue = "Y";
												checkBox_21.falseValue = "N";
												checkBox_21.style.setClasses(["text-center"]);
												checkBox_21.bind("value").toDataColumn("clipYn1");
												return checkBox_21;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.columnName = "clipYn2";
											cell.control = (function(){
												var checkBox_22 = new cpr.controls.CheckBox("cbx22");
												checkBox_22.trueValue = "Y";
												checkBox_22.falseValue = "N";
												checkBox_22.style.setClasses(["text-center"]);
												checkBox_22.bind("value").toDataColumn("clipYn2");
												return checkBox_22;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.columnName = "clipYn3";
											cell.control = (function(){
												var checkBox_23 = new cpr.controls.CheckBox("cbx23");
												checkBox_23.trueValue = "Y";
												checkBox_23.falseValue = "N";
												checkBox_23.style.setClasses(["text-center"]);
												checkBox_23.bind("value").toDataColumn("clipYn3");
												return checkBox_23;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.columnName = "clipYn4";
											cell.control = (function(){
												var checkBox_24 = new cpr.controls.CheckBox("cbx24");
												checkBox_24.trueValue = "Y";
												checkBox_24.falseValue = "N";
												checkBox_24.style.setClasses(["text-center"]);
												checkBox_24.bind("value").toDataColumn("clipYn4");
												return checkBox_24;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.columnName = "archYn";
											cell.control = (function(){
												var checkBox_25 = new cpr.controls.CheckBox("cbx25");
												checkBox_25.trueValue = "Y";
												checkBox_25.falseValue = "N";
												checkBox_25.style.setClasses(["text-center"]);
												checkBox_25.bind("value").toDataColumn("archYn");
												return checkBox_25;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.columnName = "mtrlInfo";
											cell.control = (function(){
												var output_19 = new cpr.controls.Output();
												output_19.style.setClasses(["text-center"]);
												output_19.bind("value").toDataSet(app.lookup("dsPlMtrlList"), "mtrlInfo", 0);
												return output_19;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.columnName = "useBeginYmd";
											cell.control = (function(){
												var dateInput_2 = new cpr.controls.DateInput("dti1");
												dateInput_2.mask = "YYYY.MM.DD";
												dateInput_2.bind("value").toDataColumn("useBeginYmd");
												return dateInput_2;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.columnName = "useEndYmd";
											cell.control = (function(){
												var dateInput_3 = new cpr.controls.DateInput("dti2");
												dateInput_3.mask = "YYYY.MM.DD";
												dateInput_3.bind("value").toDataColumn("useEndYmd");
												return dateInput_3;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "som";
											cell.control = (function(){
												var maskEditor_14 = new cpr.controls.MaskEditor("mse1");
												maskEditor_14.mask = "00:00:00:00";
												maskEditor_14.style.setClasses(["text-center"]);
												maskEditor_14.bind("value").toDataColumn("som");
												return maskEditor_14;
											})();
										}
									}
								]
							}
						});
						if(typeof onGrdPlMtrlDblclick == "function") {
							grid_2.addEventListener("dblclick", onGrdPlMtrlDblclick);
						}
						container.addChild(grid_2, {
							"top": "176px",
							"right": "10px",
							"bottom": "10px",
							"left": "10px"
						});
					})(group_6);
					tabItem_1.content = group_6;
					return tabItem_1;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_1);
				
				var tabItem_2 = (function(tabFolder){
					var tabItem_2 = new cpr.controls.TabItem();
					tabItem_2.text = "프로그램";
					var group_13 = new cpr.controls.Container("grpPgm");
					// Layout
					var xYLayout_3 = new cpr.controls.layouts.XYLayout();
					group_13.setLayout(xYLayout_3);
					(function(container){
						var group_14 = new cpr.controls.Container();
						// Layout
						var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
						flowLayout_2.horizontalAlign = "right";
						group_14.setLayout(flowLayout_2);
						(function(container){
							var button_16 = new cpr.controls.Button("btnPgmMtrlSearch");
							button_16.tooltip = "검색";
							button_16.style.setClasses(["btn-search"]);
							if(typeof onBtnPgmMtrlSearchClick == "function") {
								button_16.addEventListener("click", onBtnPgmMtrlSearchClick);
							}
							container.addChild(button_16, {
								"autoSize": "none",
								"width": "25px",
								"height": "30px"
							});
						})(group_14);
						container.addChild(group_14, {
							"top": "10px",
							"right": "10px",
							"left": "10px",
							"height": "35px"
						});
						var group_15 = new cpr.controls.Container();
						// Layout
						var formLayout_11 = new cpr.controls.layouts.FormLayout();
						formLayout_11.topMargin = "5px";
						formLayout_11.rightMargin = "5px";
						formLayout_11.bottomMargin = "5px";
						formLayout_11.leftMargin = "5px";
						formLayout_11.setColumns(["80px", "1fr", "100px", "1fr", "40px", "60px"]);
						formLayout_11.setRows(["24px", "24px", "24px", "24px"]);
						group_15.setLayout(formLayout_11);
						(function(container){
							var output_20 = new cpr.controls.Output();
							output_20.value = "전체";
							output_20.style.setClasses(["text-right"]);
							container.addChild(output_20, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_21 = new cpr.controls.Output();
							output_21.value = "소재명";
							output_21.style.setClasses(["text-right"]);
							container.addChild(output_21, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var output_22 = new cpr.controls.Output();
							output_22.value = "부제";
							output_22.style.setClasses(["text-right"]);
							container.addChild(output_22, {
								"colIndex": 0,
								"rowIndex": 2
							});
							var output_23 = new cpr.controls.Output();
							output_23.value = "프로그램";
							output_23.style.setClasses(["text-right"]);
							container.addChild(output_23, {
								"colIndex": 0,
								"rowIndex": 3
							});
							var output_24 = new cpr.controls.Output();
							output_24.value = "테이프코드";
							output_24.style.setClasses(["text-right"]);
							container.addChild(output_24, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var output_25 = new cpr.controls.Output();
							output_25.value = "소재 ID";
							output_25.style.setClasses(["text-right"]);
							container.addChild(output_25, {
								"colIndex": 2,
								"rowIndex": 1
							});
							var output_26 = new cpr.controls.Output();
							output_26.value = "소재구분";
							output_26.style.setClasses(["text-right"]);
							container.addChild(output_26, {
								"colIndex": 2,
								"rowIndex": 2
							});
							var output_27 = new cpr.controls.Output();
							output_27.value = "서버";
							container.addChild(output_27, {
								"colIndex": 4,
								"rowIndex": 0
							});
							var output_28 = new cpr.controls.Output();
							output_28.value = "화수";
							container.addChild(output_28, {
								"colIndex": 4,
								"rowIndex": 1
							});
							var inputBox_16 = new cpr.controls.InputBox("ipb15");
							inputBox_16.bind("value").toDataMap(app.lookup("dmPgmMtrlInfo"), "allNm");
							container.addChild(inputBox_16, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var inputBox_17 = new cpr.controls.InputBox("ipb16");
							inputBox_17.bind("value").toDataMap(app.lookup("dmPgmMtrlInfo"), "mtrlNm");
							container.addChild(inputBox_17, {
								"colIndex": 1,
								"rowIndex": 1
							});
							var inputBox_18 = new cpr.controls.InputBox("ipb17");
							container.addChild(inputBox_18, {
								"colIndex": 1,
								"rowIndex": 2
							});
							var inputBox_19 = new cpr.controls.InputBox("ipb18");
							container.addChild(inputBox_19, {
								"colIndex": 3,
								"rowIndex": 0
							});
							var inputBox_20 = new cpr.controls.InputBox("ipb19");
							inputBox_20.bind("value").toDataMap(app.lookup("dmPgmMtrlInfo"), "mtrlId");
							container.addChild(inputBox_20, {
								"colIndex": 3,
								"rowIndex": 1
							});
							var inputBox_21 = new cpr.controls.InputBox("ipb20");
							inputBox_21.bind("value").toDataMap(app.lookup("dmPgmMtrlInfo"), "episodeNo");
							container.addChild(inputBox_21, {
								"colIndex": 5,
								"rowIndex": 1
							});
							var inputBox_22 = new cpr.controls.InputBox("ipb21");
							inputBox_22.bind("value").toDataMap(app.lookup("dmPgmMtrlInfo"), "pgmCd");
							container.addChild(inputBox_22, {
								"colIndex": 1,
								"rowIndex": 3
							});
							var inputBox_23 = new cpr.controls.InputBox("ipb22");
							container.addChild(inputBox_23, {
								"colIndex": 2,
								"rowIndex": 3,
								"colSpan": 4,
								"rowSpan": 1
							});
							var comboBox_20 = new cpr.controls.ComboBox("cmb8");
							(function(comboBox_20){
							})(comboBox_20);
							container.addChild(comboBox_20, {
								"colIndex": 3,
								"rowIndex": 2
							});
							var checkBox_26 = new cpr.controls.CheckBox("cbx26");
							checkBox_26.text = "";
							container.addChild(checkBox_26, {
								"colIndex": 5,
								"rowIndex": 0
							});
						})(group_15);
						container.addChild(group_15, {
							"top": "50px",
							"right": "10px",
							"left": "10px",
							"height": "121px"
						});
						var grid_3 = new cpr.controls.Grid("grdPgmMtrl");
						grid_3.init({
							"dataSet": app.lookup("dsPgmMtrlList"),
							"autoFit": "1, 5",
							"columns": [
								{"width": "100px"},
								{"width": "200px"},
								{"width": "60px"},
								{"width": "100px"},
								{"width": "80px"},
								{"width": "120px"},
								{"width": "220px"},
								{"width": "100px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "100px"},
								{"width": "100px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "80px"},
								{"width": "80px"}
							],
							"header": {
								"rows": [{"height": "28"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.text = "채널";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "프로그램제목";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.text = "화수";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.text = "부제";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.text = "구분";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.text = "소재ID";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.text = "소재명";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.text = "Duration";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.text = "프로그램코드";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 14},
										"configurator": function(cell){
											cell.text = "심의등급";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 20},
										"configurator": function(cell){
											cell.text = "자막";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 21},
										"configurator": function(cell){
											cell.text = "수화";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 22},
										"configurator": function(cell){
											cell.text = "화면해설";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.text = "ARCH";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.text = "제작";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.text = "중앙";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.text = "송출B";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.text = "송출M";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 19},
										"configurator": function(cell){
											cell.text = "선정";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 18},
										"configurator": function(cell){
											cell.text = "폭력";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 17},
										"configurator": function(cell){
											cell.text = "모방";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 16},
										"configurator": function(cell){
											cell.text = "언어";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 15},
										"configurator": function(cell){
											cell.text = "주제";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 23},
										"configurator": function(cell){
											cell.text = "화질";
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "30"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnName = "chanNm";
											cell.control = (function(){
												var output_29 = new cpr.controls.Output();
												output_29.style.setClasses(["text-center"]);
												output_29.bind("value").toDataColumn("chanNm");
												return output_29;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.columnName = "pgmNm";
											cell.control = (function(){
												var output_30 = new cpr.controls.Output();
												output_30.value = "Output";
												output_30.style.setClasses(["text-left-pad"]);
												output_30.bind("value").toDataColumn("pgmNm");
												return output_30;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnName = "episodeNo";
											cell.control = (function(){
												var output_31 = new cpr.controls.Output();
												output_31.value = "Output";
												output_31.style.setClasses(["text-center"]);
												output_31.bind("value").toDataColumn("episodeNo");
												return output_31;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "episodeNm";
											cell.control = (function(){
												var output_32 = new cpr.controls.Output();
												output_32.value = "Output";
												output_32.style.setClasses(["text-center"]);
												output_32.bind("value").toDataColumn("episodeNm");
												return output_32;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "mtrlClf";
											cell.control = (function(){
												var comboBox_21 = new cpr.controls.ComboBox("cmb21");
												comboBox_21.style.setClasses(["text-center"]);
												(function(comboBox_21){
													comboBox_21.addItem(new cpr.controls.Item("", ""));
													comboBox_21.setItemSet(app.lookup("dsMtrlClf1"), {
														"label": "dname",
														"value": "dcode"
													});
												})(comboBox_21);
												comboBox_21.bind("value").toDataColumn("mtrlClf");
												return comboBox_21;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "mtrlId";
											cell.control = (function(){
												var output_33 = new cpr.controls.Output();
												output_33.value = "Output";
												output_33.style.setClasses(["text-center"]);
												output_33.bind("value").toDataColumn("mtrlId");
												return output_33;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "mtrlNm";
											cell.control = (function(){
												var output_34 = new cpr.controls.Output();
												output_34.value = "Output";
												output_34.style.setClasses(["text-left-pad"]);
												output_34.bind("value").toDataColumn("mtrlNm");
												return output_34;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.columnName = "duration";
											cell.control = (function(){
												var maskEditor_15 = new cpr.controls.MaskEditor("mse14");
												maskEditor_15.mask = "00:00:00:00";
												maskEditor_15.style.setClasses(["text-center"]);
												maskEditor_15.bind("value").toDataColumn("duration");
												return maskEditor_15;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.columnName = "pgmCd";
											cell.control = (function(){
												var output_35 = new cpr.controls.Output();
												output_35.value = "Output";
												output_35.style.setClasses(["text-center"]);
												output_35.bind("value").toDataColumn("pgmCd");
												return output_35;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 14},
										"configurator": function(cell){
											cell.columnName = "delibGrade";
											cell.control = (function(){
												var comboBox_22 = new cpr.controls.ComboBox("cmb22");
												comboBox_22.style.setClasses(["text-center"]);
												(function(comboBox_22){
													comboBox_22.addItem(new cpr.controls.Item("", ""));
													comboBox_22.setItemSet(app.lookup("dsDelibGrade"), {
														"label": "dname",
														"value": "dcode"
													});
												})(comboBox_22);
												comboBox_22.bind("value").toDataColumn("delibGrade");
												return comboBox_22;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 20},
										"configurator": function(cell){
											cell.columnName = "captionYn";
											cell.control = (function(){
												var checkBox_27 = new cpr.controls.CheckBox("cbx27");
												checkBox_27.trueValue = "Y";
												checkBox_27.falseValue = "N";
												checkBox_27.style.setClasses(["text-center"]);
												checkBox_27.bind("value").toDataColumn("captionYn");
												return checkBox_27;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 21},
										"configurator": function(cell){
											cell.columnName = "signLangYn";
											cell.control = (function(){
												var checkBox_28 = new cpr.controls.CheckBox("cbx28");
												checkBox_28.trueValue = "Y";
												checkBox_28.falseValue = "N";
												checkBox_28.style.setClasses(["text-center"]);
												checkBox_28.bind("value").toDataColumn("signLangYn");
												return checkBox_28;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 22},
										"configurator": function(cell){
											cell.columnName = "dvsYn";
											cell.control = (function(){
												var checkBox_29 = new cpr.controls.CheckBox("cbx29");
												checkBox_29.trueValue = "Y";
												checkBox_29.falseValue = "N";
												checkBox_29.style.setClasses(["text-center"]);
												checkBox_29.bind("value").toDataColumn("dvsYn");
												return checkBox_29;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.columnName = "arcYn";
											cell.control = (function(){
												var checkBox_30 = new cpr.controls.CheckBox("cbx34");
												checkBox_30.trueValue = "Y";
												checkBox_30.falseValue = "N";
												checkBox_30.style.setClasses(["text-center"]);
												checkBox_30.bind("value").toDataColumn("arcYn");
												return checkBox_30;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.columnName = "clipYn3";
											cell.control = (function(){
												var checkBox_31 = new cpr.controls.CheckBox("cbx33");
												checkBox_31.trueValue = "Y";
												checkBox_31.falseValue = "N";
												checkBox_31.style.setClasses(["text-center"]);
												checkBox_31.bind("value").toDataColumn("clipYn3");
												return checkBox_31;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.columnName = "clipYn2";
											cell.control = (function(){
												var checkBox_32 = new cpr.controls.CheckBox("cbx32");
												checkBox_32.trueValue = "Y";
												checkBox_32.falseValue = "N";
												checkBox_32.style.setClasses(["text-center"]);
												checkBox_32.bind("value").toDataColumn("clipYn2");
												return checkBox_32;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.columnName = "clipYn1";
											cell.control = (function(){
												var checkBox_33 = new cpr.controls.CheckBox("cbx31");
												checkBox_33.trueValue = "Y";
												checkBox_33.falseValue = "N";
												checkBox_33.style.setClasses(["text-center"]);
												checkBox_33.bind("value").toDataColumn("clipYn1");
												return checkBox_33;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.columnName = "clipYn";
											cell.control = (function(){
												var checkBox_34 = new cpr.controls.CheckBox("cbx30");
												checkBox_34.trueValue = "Y";
												checkBox_34.falseValue = "N";
												checkBox_34.style.setClasses(["text-center"]);
												checkBox_34.bind("value").toDataColumn("clipYn");
												return checkBox_34;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 19},
										"configurator": function(cell){
											cell.columnName = "delibSexualYn";
											cell.control = (function(){
												var checkBox_35 = new cpr.controls.CheckBox("cbx39");
												checkBox_35.trueValue = "Y";
												checkBox_35.falseValue = "N";
												checkBox_35.style.setClasses(["text-center"]);
												checkBox_35.bind("value").toDataColumn("delibSexualYn");
												return checkBox_35;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 18},
										"configurator": function(cell){
											cell.columnName = "delibViolenceYn";
											cell.control = (function(){
												var checkBox_36 = new cpr.controls.CheckBox("cbx38");
												checkBox_36.trueValue = "Y";
												checkBox_36.falseValue = "N";
												checkBox_36.style.setClasses(["text-center"]);
												checkBox_36.bind("value").toDataColumn("delibViolenceYn");
												return checkBox_36;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 17},
										"configurator": function(cell){
											cell.columnName = "delibCopyYn";
											cell.control = (function(){
												var checkBox_37 = new cpr.controls.CheckBox("cbx37");
												checkBox_37.trueValue = "Y";
												checkBox_37.falseValue = "N";
												checkBox_37.style.setClasses(["text-center"]);
												checkBox_37.bind("value").toDataColumn("delibCopyYn");
												return checkBox_37;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 16},
										"configurator": function(cell){
											cell.columnName = "delibLanguageYn";
											cell.control = (function(){
												var checkBox_38 = new cpr.controls.CheckBox("cbx36");
												checkBox_38.trueValue = "Y";
												checkBox_38.falseValue = "N";
												checkBox_38.style.setClasses(["text-center"]);
												checkBox_38.bind("value").toDataColumn("delibLanguageYn");
												return checkBox_38;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 15},
										"configurator": function(cell){
											cell.columnName = "delibTopicYn";
											cell.control = (function(){
												var checkBox_39 = new cpr.controls.CheckBox("cbx35");
												checkBox_39.trueValue = "Y";
												checkBox_39.falseValue = "N";
												checkBox_39.style.setClasses(["text-center"]);
												checkBox_39.bind("value").toDataColumn("delibTopicYn");
												return checkBox_39;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 23},
										"configurator": function(cell){
											cell.columnName = "videoClf";
											cell.control = (function(){
												var comboBox_23 = new cpr.controls.ComboBox("cmb23");
												comboBox_23.style.setClasses(["text-center"]);
												(function(comboBox_23){
													comboBox_23.addItem(new cpr.controls.Item("", ""));
													comboBox_23.setItemSet(app.lookup("dsVideoClf"), {
														"label": "dname",
														"value": "dcode"
													});
												})(comboBox_23);
												comboBox_23.bind("value").toDataColumn("videoClf");
												return comboBox_23;
											})();
										}
									}
								]
							}
						});
						if(typeof onGrdPgmMtrlDblclick == "function") {
							grid_3.addEventListener("dblclick", onGrdPgmMtrlDblclick);
						}
						container.addChild(grid_3, {
							"top": "176px",
							"right": "10px",
							"bottom": "10px",
							"left": "10px"
						});
					})(group_13);
					tabItem_2.content = group_13;
					return tabItem_2;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_2);
				
				var tabItem_3 = (function(tabFolder){
					var tabItem_3 = new cpr.controls.TabItem();
					tabItem_3.text = "광고운행";
					var group_16 = new cpr.controls.Container("grpCm");
					// Layout
					var xYLayout_4 = new cpr.controls.layouts.XYLayout();
					group_16.setLayout(xYLayout_4);
					(function(container){
						var group_17 = new cpr.controls.Container();
						// Layout
						var flowLayout_3 = new cpr.controls.layouts.FlowLayout();
						flowLayout_3.horizontalAlign = "right";
						group_17.setLayout(flowLayout_3);
						(function(container){
							var button_17 = new cpr.controls.Button("btnCmMtrlSearch");
							button_17.tooltip = "검색";
							button_17.style.setClasses(["btn-search"]);
							if(typeof onBtnCmMtrlSearchClick == "function") {
								button_17.addEventListener("click", onBtnCmMtrlSearchClick);
							}
							container.addChild(button_17, {
								"autoSize": "none",
								"width": "25px",
								"height": "30px"
							});
						})(group_17);
						container.addChild(group_17, {
							"top": "10px",
							"right": "10px",
							"left": "10px",
							"height": "35px"
						});
						var group_18 = new cpr.controls.Container();
						// Layout
						var formLayout_12 = new cpr.controls.layouts.FormLayout();
						formLayout_12.topMargin = "5px";
						formLayout_12.rightMargin = "5px";
						formLayout_12.bottomMargin = "5px";
						formLayout_12.leftMargin = "5px";
						formLayout_12.setColumns(["100px", "1fr", "100px", "1fr"]);
						formLayout_12.setRows(["24px", "24px", "24px", "24px"]);
						group_18.setLayout(formLayout_12);
						(function(container){
							var output_36 = new cpr.controls.Output();
							output_36.value = "방송일시";
							output_36.style.setClasses(["text-right"]);
							container.addChild(output_36, {
								"colIndex": 0,
								"rowIndex": 0
							});
							var output_37 = new cpr.controls.Output();
							output_37.value = "프로그램";
							output_37.style.setClasses(["text-right"]);
							container.addChild(output_37, {
								"colIndex": 0,
								"rowIndex": 1
							});
							var group_19 = new cpr.controls.Container();
							// Layout
							var formLayout_13 = new cpr.controls.layouts.FormLayout();
							formLayout_13.setColumns(["150px", "10px", "100px"]);
							formLayout_13.setRows(["1fr"]);
							group_19.setLayout(formLayout_13);
							(function(container){
								var output_38 = new cpr.controls.Output();
								output_38.value = "~";
								output_38.style.setClasses(["text-center"]);
								container.addChild(output_38, {
									"colIndex": 1,
									"rowIndex": 0
								});
								var maskEditor_16 = new cpr.controls.MaskEditor("mse16");
								maskEditor_16.mask = "00:00";
								maskEditor_16.style.setClasses(["text-center"]);
								maskEditor_16.bind("value").toDataMap(app.lookup("dmCmMtrlInfo"), "broadHm");
								container.addChild(maskEditor_16, {
									"colIndex": 2,
									"rowIndex": 0
								});
								var dateInput_4 = new cpr.controls.DateInput("dti3");
								dateInput_4.bind("value").toDataMap(app.lookup("dmCmMtrlInfo"), "broadYmd");
								container.addChild(dateInput_4, {
									"colIndex": 0,
									"rowIndex": 0
								});
							})(group_19);
							container.addChild(group_19, {
								"colIndex": 1,
								"rowIndex": 0,
								"colSpan": 2,
								"rowSpan": 1
							});
							var group_20 = new cpr.controls.Container();
							// Layout
							var formLayout_14 = new cpr.controls.layouts.FormLayout();
							formLayout_14.setColumns(["150px", "250px"]);
							formLayout_14.setRows(["1fr"]);
							group_20.setLayout(formLayout_14);
							(function(container){
								var inputBox_24 = new cpr.controls.InputBox("ipb23");
								inputBox_24.bind("value").toDataMap(app.lookup("dmCmMtrlInfo"), "pgmCd");
								container.addChild(inputBox_24, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var inputBox_25 = new cpr.controls.InputBox("ipb24");
								inputBox_25.bind("value").toDataMap(app.lookup("dmCmMtrlInfo"), "pgmNm");
								container.addChild(inputBox_25, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_20);
							container.addChild(group_20, {
								"colIndex": 1,
								"rowIndex": 1,
								"colSpan": 3,
								"rowSpan": 1
							});
							var group_21 = new cpr.controls.Container("grpCmInfo");
							// Layout
							var formLayout_15 = new cpr.controls.layouts.FormLayout();
							formLayout_15.topMargin = "2px";
							formLayout_15.rightMargin = "0px";
							formLayout_15.bottomMargin = "2px";
							formLayout_15.leftMargin = "0px";
							formLayout_15.verticalSpacing = "1px";
							formLayout_15.setColumns(["1fr", "1fr", "1fr", "1fr", "1fr", "1fr"]);
							formLayout_15.setRows(["24px", "24px"]);
							group_21.setLayout(formLayout_15);
							(function(container){
								var output_39 = new cpr.controls.Output();
								output_39.value = "총광고초수";
								output_39.style.setClasses(["text-center"]);
								container.addChild(output_39, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var output_40 = new cpr.controls.Output();
								output_40.value = "전CM초수";
								output_40.style.setClasses(["text-center"]);
								container.addChild(output_40, {
									"colIndex": 1,
									"rowIndex": 0
								});
								var output_41 = new cpr.controls.Output();
								output_41.value = "후CM초수";
								output_41.style.setClasses(["text-center"]);
								container.addChild(output_41, {
									"colIndex": 4,
									"rowIndex": 0
								});
								var output_42 = new cpr.controls.Output();
								output_42.value = "총광고갯수";
								output_42.style.setClasses(["text-center"]);
								container.addChild(output_42, {
									"colIndex": 5,
									"rowIndex": 0
								});
								var output_43 = new cpr.controls.Output("opbTotalCmSec");
								output_43.value = "";
								output_43.style.setClasses(["text-center"]);
								container.addChild(output_43, {
									"colIndex": 0,
									"rowIndex": 1
								});
								var output_44 = new cpr.controls.Output("opbBcmSec");
								output_44.value = "";
								output_44.style.setClasses(["text-center"]);
								container.addChild(output_44, {
									"colIndex": 1,
									"rowIndex": 1
								});
								var output_45 = new cpr.controls.Output("opbMcmSec");
								output_45.value = "";
								output_45.style.setClasses(["text-center"]);
								container.addChild(output_45, {
									"colIndex": 2,
									"rowIndex": 1
								});
								var output_46 = new cpr.controls.Output("opbBandCnt");
								output_46.value = "";
								output_46.style.setClasses(["text-center"]);
								container.addChild(output_46, {
									"colIndex": 3,
									"rowIndex": 1
								});
								var output_47 = new cpr.controls.Output("opbAcmSec");
								output_47.value = "";
								output_47.style.setClasses(["text-center"]);
								container.addChild(output_47, {
									"colIndex": 4,
									"rowIndex": 1
								});
								var output_48 = new cpr.controls.Output("opbTotalCmCnt");
								output_48.value = "";
								output_48.style.setClasses(["text-center"]);
								container.addChild(output_48, {
									"colIndex": 5,
									"rowIndex": 1
								});
								var output_49 = new cpr.controls.Output();
								output_49.value = "중CM초수";
								output_49.style.setClasses(["text-center"]);
								container.addChild(output_49, {
									"colIndex": 2,
									"rowIndex": 0
								});
								var output_50 = new cpr.controls.Output();
								output_50.value = "밴드수";
								output_50.style.setClasses(["text-center"]);
								container.addChild(output_50, {
									"colIndex": 3,
									"rowIndex": 0
								});
							})(group_21);
							container.addChild(group_21, {
								"colIndex": 0,
								"rowIndex": 2,
								"colSpan": 4,
								"rowSpan": 2
							});
						})(group_18);
						container.addChild(group_18, {
							"top": "50px",
							"right": "10px",
							"left": "10px",
							"height": "121px"
						});
						var grid_4 = new cpr.controls.Grid("grdCmMtrl");
						grid_4.init({
							"dataSet": app.lookup("dsCmMtrlList"),
							"autoFit": "2, 4, 7",
							"columns": [
								{"width": "40px"},
								{"width": "100px"},
								{"width": "100px"},
								{"width": "60px"},
								{"width": "100px"},
								{"width": "200px"},
								{"width": "120px"},
								{"width": "60px"},
								{"width": "100px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "60px"},
								{"width": "100px"},
								{"width": "80px"}
							],
							"header": {
								"rows": [{"height": "28"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.text = "No";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.text = "광고구분";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.text = "광고위치";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.text = "#";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.text = "광고주";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.text = "소재 ID";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.text = "소재명";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.text = "초수";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.text = "송출M";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.text = "송출B";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.text = "중앙";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.text = "제작";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.text = "ARCH";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.text = "duration";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 15},
										"configurator": function(cell){
											cell.text = "광고여부";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 14},
										"configurator": function(cell){
											cell.text = "SOM";
										}
									}
								]
							},
							"detail": {
								"rows": [{"height": "30"}],
								"cells": [
									{
										"constraint": {"rowIndex": 0, "colIndex": 0},
										"configurator": function(cell){
											cell.columnType = "rowindex";
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 1},
										"configurator": function(cell){
											cell.columnName = "cmClf";
											cell.control = (function(){
												var comboBox_24 = new cpr.controls.ComboBox("cmb24");
												comboBox_24.style.setClasses(["text-center"]);
												(function(comboBox_24){
													comboBox_24.addItem(new cpr.controls.Item("", ""));
													comboBox_24.setItemSet(app.lookup("dsCmClf"), {
														"label": "dname",
														"value": "dcode"
													});
												})(comboBox_24);
												comboBox_24.bind("value").toDataColumn("cmClf");
												return comboBox_24;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 2},
										"configurator": function(cell){
											cell.columnName = "pibClf";
											cell.control = (function(){
												var comboBox_25 = new cpr.controls.ComboBox("cmb25");
												comboBox_25.style.setClasses(["text-center"]);
												(function(comboBox_25){
													comboBox_25.addItem(new cpr.controls.Item("", ""));
													comboBox_25.setItemSet(app.lookup("dsPibClf"), {
														"label": "dname",
														"value": "dcode"
													});
												})(comboBox_25);
												comboBox_25.bind("value").toDataColumn("pibClf");
												return comboBox_25;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 3},
										"configurator": function(cell){
											cell.columnName = "cmSeq";
											cell.control = (function(){
												var inputBox_26 = new cpr.controls.InputBox("ipb25");
												inputBox_26.style.setClasses(["text-center"]);
												inputBox_26.bind("value").toDataColumn("cmSeq");
												return inputBox_26;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 4},
										"configurator": function(cell){
											cell.columnName = "custNm";
											cell.control = (function(){
												var inputBox_27 = new cpr.controls.InputBox("ipb26");
												inputBox_27.style.setClasses(["text-center"]);
												inputBox_27.bind("value").toDataColumn("custNm");
												return inputBox_27;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 5},
										"configurator": function(cell){
											cell.columnName = "mtrlId";
											cell.control = (function(){
												var inputBox_28 = new cpr.controls.InputBox("ipb27");
												inputBox_28.style.setClasses(["text-left-pad"]);
												inputBox_28.bind("value").toDataColumn("mtrlId");
												return inputBox_28;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 6},
										"configurator": function(cell){
											cell.columnName = "mtrlNm";
											cell.control = (function(){
												var inputBox_29 = new cpr.controls.InputBox("ipb28");
												inputBox_29.style.setClasses(["text-left-pad"]);
												inputBox_29.bind("value").toDataColumn("mtrlNm");
												return inputBox_29;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 7},
										"configurator": function(cell){
											cell.columnName = "cmmSec";
											cell.control = (function(){
												var inputBox_30 = new cpr.controls.InputBox("ipb29");
												inputBox_30.style.setClasses(["text-center"]);
												inputBox_30.bind("value").toDataColumn("cmmSec");
												return inputBox_30;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 9},
										"configurator": function(cell){
											cell.columnName = "clipYn";
											cell.control = (function(){
												var checkBox_40 = new cpr.controls.CheckBox("cbx40");
												checkBox_40.trueValue = "Y";
												checkBox_40.falseValue = "N";
												checkBox_40.style.setClasses(["text-center"]);
												checkBox_40.bind("value").toDataColumn("clipYn");
												return checkBox_40;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 10},
										"configurator": function(cell){
											cell.columnName = "clipYn1";
											cell.control = (function(){
												var checkBox_41 = new cpr.controls.CheckBox("cbx41");
												checkBox_41.trueValue = "Y";
												checkBox_41.falseValue = "N";
												checkBox_41.style.setClasses(["text-center"]);
												checkBox_41.bind("value").toDataColumn("clipYn1");
												return checkBox_41;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 11},
										"configurator": function(cell){
											cell.columnName = "clipYn2";
											cell.control = (function(){
												var checkBox_42 = new cpr.controls.CheckBox("cbx42");
												checkBox_42.trueValue = "Y";
												checkBox_42.falseValue = "N";
												checkBox_42.style.setClasses(["text-center"]);
												checkBox_42.bind("value").toDataColumn("clipYn2");
												return checkBox_42;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 12},
										"configurator": function(cell){
											cell.columnName = "clipYn3";
											cell.control = (function(){
												var checkBox_43 = new cpr.controls.CheckBox("cbx43");
												checkBox_43.trueValue = "Y";
												checkBox_43.falseValue = "N";
												checkBox_43.style.setClasses(["text-center"]);
												checkBox_43.bind("value").toDataColumn("clipYn3");
												return checkBox_43;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 13},
										"configurator": function(cell){
											cell.columnName = "clipArch";
											cell.control = (function(){
												var checkBox_44 = new cpr.controls.CheckBox("cbx44");
												checkBox_44.trueValue = "Y";
												checkBox_44.falseValue = "N";
												checkBox_44.style.setClasses(["text-center"]);
												checkBox_44.bind("value").toDataColumn("clipArch");
												return checkBox_44;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 8},
										"configurator": function(cell){
											cell.columnName = "duration";
											cell.control = (function(){
												var maskEditor_17 = new cpr.controls.MaskEditor("mse2");
												maskEditor_17.mask = "00:00:00:00";
												maskEditor_17.style.setClasses(["text-center"]);
												maskEditor_17.bind("value").toDataColumn("duration");
												return maskEditor_17;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 15},
										"configurator": function(cell){
											cell.columnName = "cmYn";
											cell.control = (function(){
												var checkBox_45 = new cpr.controls.CheckBox("cbx1");
												checkBox_45.trueValue = "Y";
												checkBox_45.falseValue = "N";
												checkBox_45.style.setClasses(["text-center"]);
												checkBox_45.bind("value").toDataColumn("cmYn");
												return checkBox_45;
											})();
										}
									},
									{
										"constraint": {"rowIndex": 0, "colIndex": 14},
										"configurator": function(cell){
											cell.columnName = "som";
											cell.control = (function(){
												var maskEditor_18 = new cpr.controls.MaskEditor("mse3");
												maskEditor_18.mask = "00:00:00:00";
												maskEditor_18.style.setClasses(["text-center"]);
												maskEditor_18.bind("value").toDataColumn("som");
												return maskEditor_18;
											})();
										}
									}
								]
							}
						});
						if(typeof onGrdCmMtrlDblclick == "function") {
							grid_4.addEventListener("dblclick", onGrdCmMtrlDblclick);
						}
						container.addChild(grid_4, {
							"top": "176px",
							"right": "10px",
							"bottom": "10px",
							"left": "10px"
						});
					})(group_16);
					tabItem_3.content = group_16;
					return tabItem_3;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_3);
				
				var tabItem_4 = (function(tabFolder){
					var tabItem_4 = new cpr.controls.TabItem();
					tabItem_4.text = "오류체크";
					var group_22 = new cpr.controls.Container("grpErrorCheck");
					// Layout
					var xYLayout_5 = new cpr.controls.layouts.XYLayout();
					group_22.setLayout(xYLayout_5);
					(function(container){
						var textArea_1 = new cpr.controls.TextArea("txa1");
						container.addChild(textArea_1, {
							"top": "10px",
							"bottom": "10px",
							"left": "10px",
							"width": "573px"
						});
					})(group_22);
					tabItem_4.content = group_22;
					return tabItem_4;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_4);
				
				var tabItem_5 = (function(tabFolder){
					var tabItem_5 = new cpr.controls.TabItem();
					tabItem_5.text = "프로그램별 광고시간";
					var group_23 = new cpr.controls.Container("grpCmTime");
					// Layout
					var xYLayout_6 = new cpr.controls.layouts.XYLayout();
					group_23.setLayout(xYLayout_6);
					(function(container){
						var textArea_2 = new cpr.controls.TextArea("txa2");
						container.addChild(textArea_2, {
							"top": "10px",
							"right": "10px",
							"bottom": "10px",
							"left": "10px"
						});
					})(group_23);
					tabItem_5.content = group_23;
					return tabItem_5;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_5);
				tabFolder_1.setSelectedTabItem(tabItem_1);
				container.addChild(tabFolder_1, {
					"colIndex": 1,
					"rowIndex": 0,
					"rightSpacing": 5,
					"bottomSpacing": 5
				});
			})(group_5);
			container.addChild(group_5, {
				"top": "81px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "일일운행표(완)";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 202005/Embedded
 * Source Location: 202005/Embedded.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202005/Embedded", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Embedded.js
			 * Created at 2020. 5. 19. 오후 5:47:19.
			 *
			 * @author LHS_0212
			 ************************************************/
			
			
			
			/*
			 * 데이터셋에서 insert 이벤트 발생 시 호출.
			 * row가 추가되는 경우 발생하는 이벤트. 발생 메소드 : addRow, addRowData, insertRow, insertRowData
			 */
			function onDs1Insert(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = e.control;
				
				console.log("데이터 셋 Insert 이벤트 발생!");
			}
			
			
			/*
			 * 데이터셋에서 delete 이벤트 발생 시 호출.
			 * 로우가 삭제되는 경우 발생하는 이벤트. 발생 메소드 : deleteRow
			 */
			function onDs1Delete(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = e.control;
				
				console.log("데이터 셋 Delete 이벤트 발생!");
			}
			
			
			/*
			 * 데이터셋에서 update 이벤트 발생 시 호출.
			 * 데이터가 수정되는 경우 발생하는 이벤트. 발생 메소드 : setValue, updateRow
			 */
			function onDs1Update(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataSet
				 */
				var ds1 = e.control;
				
				console.log("데이터 셋 Update 이벤트 발생!");
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"}
				],
				"rows": [
					{"column1": "컬럼1-1", "column2": "컬럼2-1", "column3": "컬럼3-1"},
					{"column1": "컬럼1-2", "column2": "컬럼2-2", "column3": "컬럼3-2"},
					{"column1": "컬럼1-3", "column2": "컬럼2-3", "column3": "컬럼3-3"}
				]
			});
			if(typeof onDs1Insert == "function") {
				dataSet_1.addEventListener("insert", onDs1Insert);
			}
			if(typeof onDs1Update == "function") {
				dataSet_1.addEventListener("update", onDs1Update);
			}
			if(typeof onDs1Delete == "function") {
				dataSet_1.addEventListener("delete", onDs1Delete);
			}
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			if(typeof onEa1Load == "function") {
				embeddedApp_1.addEventListener("load", onEa1Load);
			}
			if(typeof onEa1Init == "function") {
				embeddedApp_1.addEventListener("init", onEa1Init);
			}
			cpr.core.App.load("202005/Embedded-child1", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "0px",
				"left": "20px",
				"width": "800px",
				"height": "768px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columns": [
					{"width": "50px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "row";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "rowindex";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "20px",
				"left": "830px",
				"width": "800px",
				"height": "300px"
			});
		}
	});
	app.title = "Embedded";
	cpr.core.Platform.INSTANCE.register(app);
})();

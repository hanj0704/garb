/*
 * App URI: 202005/tester
 * Source Location: 202005/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202005/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			////jQuery~~~
			////			var aaa = $("#uuid-"+app.lookup("grd2").uuid);
			////			var bbb = aaa.find(".cl-grid-row");
			////			var c = bbb.toArray();
			////			c.forEach(function(/*HTMLElement*/each){
			////				console.log(each);	
			//
			///**
			// * @param {Object} data
			// * @return {cpr.controls.Container} group
			// */
			//function createDragSourceFeedback(data) {
			//
			//    //폼 레이아웃을 만들어놓는다.
			//    var feedback = new cpr.controls.layouts.FormLayout();
			//    feedback.horizontalSpacing = "5px";
			//    feedback.verticalSpacing = "0px";
			//    feedback.setColumns(["1fr", "1fr", "1fr", "1fr", "1fr"]);
			//    feedback.setRows(["40px", "40px"]);
			//    feedback.setColumnAutoSizing(1, true);
			//    var group = new cpr.controls.Container();
			//    group.setLayout(feedback);
			//
			//    group.style.css({
			//        "opacity": "0.95",
			//        "background": "#fff",
			//        "border": "1px solid black"
			//    });
			//
			//    //이미지
			//    var vcImage = new cpr.controls.Image();
			//    vcImage.src = data["Thumbnail"];
			//
			//    group.addChild(vcImage, {
			//        "colIndex": 0,
			//        "rowIndex": 0,
			//        "colSpan": 1,
			//        "rowSpan": 2
			//    });
			//
			//    //콘텐츠 명
			//    var vcContentsName = new cpr.controls.Output();
			//    vcContentsName.value = data["mtrlNm"];
			//
			//    group.addChild(vcContentsName, {
			//        "colIndex": 1,
			//        "rowIndex": 0,
			//        "colSpan": 4,
			//        "rowSpan": 1
			//    });
			//
			//    //콘텐츠ID
			//    var vcContentsID = new cpr.controls.Output();
			//    vcContentsID.ellipsis = true;
			//    vcContentsID.value = data["mtrlId"];
			//    group.addChild(vcContentsID, {
			//        "colIndex": 1,
			//        "rowIndex": 1
			//    });
			//
			//    //플레이 시간
			//    var vcDuration = new cpr.controls.Output();
			//    vcDuration.dataType = "date";
			//    vcDuration.dateValueFormat = "HHmmssSSS";
			//    vcDuration.format = "HH:mm:ss:SS";
			//    vcDuration.value = data["playRun"];
			//    group.addChild(vcDuration, {
			//        "colIndex": 2,
			//        "rowIndex": 1
			//    });
			//
			//    //제작일시
			//    var vcImageQuality = new cpr.controls.Output();
			//    vcImageQuality.dataType = "date";
			//    vcImageQuality.dateValueFormat = "YYYYMMDD";
			//    vcImageQuality.format = "YYYY-MM-DD";
			//    vcImageQuality.value = data["playYmd"];
			//    group.addChild(vcImageQuality, {
			//        "colIndex": 3,
			//        "rowIndex": 1
			//    });
			//
			//    return group;
			//}
			//
			///*
			// * Body에서 load 이벤트 발생 시 호출.
			// * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			// */
			//function onBodyLoad( /* cpr.events.CEvent */ e) {
			//    //	var ab= e.control;
			//
			//    var a = moment("20200518");
			//    var b = moment("20200514");
			//
			//    var c = moment.duration(a.diff(b)).asDays();
			//
			//
			//}
			//
			//
			///*
			// * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onBtn1Click( /* cpr.events.CMouseEvent */ e) {
			//    /** 
			//     * @type cpr.controls.Button
			//     */
			//    var btn1 = e.control;
			//
			//
			//    //	var allRow = app.lookup("grd1").findAllRow();
			//    //	
			//    //	var a = app.lookup("grd1").getRow(0);
			//    //	
			//    //	console.log(allRow);
			//    ////	allRow.forEach(function(each){
			//    ////		
			//    ////		console.log(each.getValue("column2")-a.getValue("column2"));
			//    ////		a = each;
			//    ////		
			//    ////	});	
			//    //	console.log(app.lookup("grd1").getRow(0).getRowData().column1);
			//    //	var a = [1,2,3,45];
			//    //	console.log(a.shift());
			//    //	var q = app.lookup("grd1").findAllRow("getStateString() =='I'");
			//    //	console.log(q);
			//
			//    var a = app.lookup("grd1").findAllRow("getIndex() > 0");
			//    console.log(a);
			//}
			//
			//
			///*
			// * "Button" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onBtn2Click( /* cpr.events.CMouseEvent */ e) {
			//    /** 
			//     * @type cpr.controls.Button
			//     */
			//    var btn2 = e.control;
			//
			//    //  app.lookup("grd1").insertRowData(0ee);
			//}
			//
			//
			///*
			// * 데이터셋에서 update 이벤트 발생 시 호출.
			// * 데이터가 수정되는 경우 발생하는 이벤트. 발생 메소드 : setValue, updateRow
			// */
			//function onDsPlanUpdate( /* cpr.events.CDataEvent */ e) {
			//    /** 
			//     * @type cpr.data.DataSet
			//     */
			//    var dsPlan = e.control;
			//
			//
			//    e.row.setValue("sortSEQ", e.row.getIndex())
			//}
			//
			//
			///*
			// * "Button" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onBtn3Click( /* cpr.events.CMouseEvent */ e) {
			//    /** 
			//     * @type cpr.controls.Button
			//     */
			//    var btn3 = e.control;
			//
			//    console.log(app.lookup("dsPlan").getRowDataRanged(0, 1));
			//
			//}
			//
			//
			///*
			// * "Button" 버튼(btn4)에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onBtn4Click( /* cpr.events.CMouseEvent */ e) {
			//    /** 
			//     * @type cpr.controls.Button
			//     */
			//    var btn4 = e.control;
			//
			//    var a = 5;
			//
			//    if (a > 2) {
			//        console.log("ㅁㅁ");
			//    } else if (a > 3) {
			//        console.log("ff");
			//    }
			//
			//}
			//
			//
			///*
			// * "Button" 버튼(btn6)에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onBtn6Click( /* cpr.events.CMouseEvent */ e) {
			//    /** 
			//     * @type cpr.controls.Button
			//     */
			//    var btn6 = e.control;
			//
			//    //	console.log(calBroadEndTime("02", "06", "57", "10", "00", "02", "09", "29"))
			//    hansTest("02090929", "00010500");
			//}
			//
			///**
			// * 
			// * @param {String} ps1
			// * @param {String} ps2
			// */
			//function hansTest(ps1, ps2) {
			//    var str1 = Number(ps1.substring(0, 2));
			//    var str2 = Number(ps1.substring(2, 4)) + (str1 * 60);
			//    var str3 = Number(ps1.substring(4, 6));
			//    var str4 = Number(ps1.substring(6, 8));
			//
			//    var str5 = Number(ps2.substring(0, 2));
			//    var str6 = Number(ps2.substring(2, 4)) + (str5 * 60);
			//    var str7 = Number(ps2.substring(4, 6));
			//    var str8 = Number(ps2.substring(6, 8));
			//
			//    var ical1 = str2 * 1800 + str2 / 10 * 2 + str3 * 30 + str4 + 1;
			//    var ical2 = str6 * 1800 + str6 / 10 * 2 + str7 * 30 + str8 + 1;
			//    console.log("ical1: " + ical1);
			//    console.log("ical2 : " + ical2);
			//    var ical = ical1 + ical2 - 1;
			//    var im = ical / 1800;
			//
			//    var rev = im / 10 * 2;
			//    console.log(ical % 1800);
			//    ical = ical % 1800 - rev - 1;
			//    console.log(rev - 1);
			//
			//    console.log(ical.toFixed(0));
			//
			//    var res1 = (im / 60).toFixed(0);
			//    var res2 = (im % 60).toFixed(0);
			//    var res3 = (ical / 30) / 1;
			//    var res4 = (ical % 30).toFixed(0);
			//    res3 = res3 - res3 % 1;
			//
			//    console.log(han1(res1.toString()) + han1(res2.toString()) + han1(res3.toString()) + han1(res4.toString()));
			//
			//}
			//
			//function han1(ps1) {
			//
			//    var a = "";
			//    for (var i = ps1.length; i < 2; i++) {
			//
			//        a += "0";
			//    };
			//    return a + ps1;
			//}
			//
			//function calBroadEndTime(psBroadHour, psBroadMin, psBroadSec, psBroadFrm, psBroadRunHour, psBroadRunMin, psBroadRunSec, psBroadRunFrm) {
			//    var vnBroadHour = Number(psBroadHour) + Number(psBroadRunHour); // 12:30:40:20
			//    var vnBroadMin = Number(psBroadMin) + Number(psBroadRunMin); // 4:40:30:20
			//    var vnBroadSec = Number(psBroadSec) + Number(psBroadRunSec); // 17:11:11:10
			//    var vnBroadFrm = Number(psBroadFrm) + Number(psBroadRunFrm);
			//    vnBroadHour = vnBroadHour + Math.floor(vnBroadMin / 60);
			//    vnBroadMin = (vnBroadMin % 60) + Math.floor(vnBroadSec / 60);
			//    vnBroadSec = (vnBroadSec % 60) + Math.floor(vnBroadFrm / 30);
			//    vnBroadFrm = (vnBroadFrm % 30);
			//
			//    var vsResult = "";
			//    if (vnBroadHour < 10) {
			//        vsResult += "0" + vnBroadHour;
			//    } else {
			//        vsResult += String(vnBroadHour);
			//    }
			//    if (vnBroadMin < 10) {
			//        vsResult += "0" + vnBroadMin;
			//    } else {
			//        vsResult += String(vnBroadMin);
			//    }
			//    if (vnBroadSec < 10) {
			//        vsResult += "0" + vnBroadSec;
			//    } else {
			//        vsResult += String(vnBroadSec);
			//    }
			//    if (vnBroadFrm < 10) {
			//        vsResult += "0" + vnBroadFrm;
			//    } else {
			//        vsResult += String(vnBroadFrm);
			//    }
			//
			//    return vsResult;
			//}
			//
			///*
			// * "Button" 버튼(btn7)에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onBtn7Click( /* cpr.events.CMouseEvent */ e) {
			//    /** 
			//     * @type cpr.controls.Button
			//     */
			//    var btn7 = e.control;
			//
			//    app.lookup("sms2").send();
			//
			//    //	var buttons = new cpr.controls.Button();
			//    //	
			//    //	app.getContainer().floatControl(buttons,{
			//    //		"top" : "100px",
			//    //		"left" : "calc(50%)",
			//    //		"width" :"100px",
			//    //		"height" : "30px"
			//    //	});
			//}
			//
			///*
			// * "Button" 버튼(btn5)에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onBtn5Click( /* cpr.events.CMouseEvent */ e) {
			//    /** 
			//     * @type cpr.controls.Button
			//     */
			//    var btn5 = e.control;
			//    //	app.lookup("grd1").insert
			//    //	console.log(app.lookup("cbx1").checked);
			//    //	app.lookup("ipb4").putValue("asdasdadsadasd");
			//    app.lookup("ipb4").value = "감a놔b라";
			//
			//    //	app.lookup("ipb4").
			//
			//}
			//
			//
			///*
			// * "Button" 버튼(btn8)에서 click 이벤트 발생 시 호출.
			// * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			// */
			//function onBtn8Click( /* cpr.events.CMouseEvent */ e) {
			//    /** 
			//     * @type cpr.controls.Button
			//     */
			//    var btn8 = e.control;
			//
			//    app.lookup("btn10").value = "asd";
			//}
			
			
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				app.lookup("mdi1").setSelectedTabItem(app.lookup("mdi1").getTabItems()[0]);
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				app.lookup("mdi1").hideHeader = true;
			}
			
			
			/*
			 * "Button" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
				app.getContainer().updateConstraint(app.lookup("grp2"), {
					"top" : "30px"
				});
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click3(/* cpr.events.CMouseEvent */ e){
				
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				var a = app.lookup("grd1").getExportData({
					exceptStyle : true,
					applyFormat : true
				});
				console.log(a);
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"sortCondition": "",
				"columns": [
					{
						"name": "column1",
						"dataType": "string",
						"info": "aaaa"
					},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{
						"name": "column1",
						"dataType": "string"
					},
					{
						"name": "column2",
						"dataType": "number"
					}
				],
				"rows": [
					{"column1": "q", "column2": "1"},
					{"column1": "w", "column2": "2"},
					{"column1": "e", "column2": "4"},
					{"column1": "r", "column2": "7"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds3");
			dataSet_3.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21"},
					{"column1": "column12", "column2": "column22"},
					{"column1": "column13", "column2": "column23"},
					{"column1": "column14", "column2": "column24"},
					{"column1": "column15", "column2": "column25"},
					{"column1": "column16", "column2": "column26"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsPlan");
			dataSet_4.parseData({
				"alterColumnLayout": "server",
				"columns": [
					{"name": "rowNum"},
					{"name": "totCnt"},
					{"name": "schId"}
				],
				"rows": [
					{"rowNum": "ㅁ나운미ㅏㄷ;ㅎ루;ㅇ니훙ㄴㄹ휘ㅏㅇ너ㅜㅍㅊ을누ㅠㅏ러후ㅠㅣ호ㅜㅡㅗ", "totCnt": "totCnt1", "schId": "schId1"},
					{"rowNum": "rowNum2", "totCnt": "totCnt2", "schId": "schId2"},
					{"rowNum": "rowNum3", "totCnt": "totCnt3", "schId": "schId3"},
					{"rowNum": "rowNum4", "totCnt": "totCnt4", "schId": "schId4"},
					{"rowNum": "rowNum5", "totCnt": "totCnt5", "schId": "schId5"},
					{"rowNum": "rowNum6", "totCnt": "totCnt6", "schId": "schId6"}
				]
			});
			if(typeof onDsPlanLoad == "function") {
				dataSet_4.addEventListener("load", onDsPlanLoad);
			}
			if(typeof onDsPlanUpdate == "function") {
				dataSet_4.addEventListener("update", onDsPlanUpdate);
			}
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("ds4");
			dataSet_5.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"},
					{"name": "column12"},
					{"name": "column13"},
					{"name": "column14"},
					{"name": "column15"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61", "column7": "column71", "column8": "column81", "column9": "column91", "column10": "column101", "column11": "column111", "column12": "column121", "column13": "column131", "column14": "column141", "column15": "column151"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62", "column7": "column72", "column8": "column82", "column9": "column92", "column10": "column102", "column11": "column112", "column12": "column122", "column13": "column132", "column14": "column142", "column15": "column152"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "column63", "column7": "column73", "column8": "column83", "column9": "column93", "column10": "column103", "column11": "column113", "column12": "column123", "column13": "column133", "column14": "column143", "column15": "column153"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "column64", "column7": "column74", "column8": "column84", "column9": "column94", "column10": "column104", "column11": "column114", "column12": "column124", "column13": "column134", "column14": "column144", "column15": "column154"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55", "column6": "column65", "column7": "column75", "column8": "column85", "column9": "column95", "column10": "column105", "column11": "column115", "column12": "column125", "column13": "column135", "column14": "column145", "column15": "column155"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("ds5");
			dataSet_6.parseData({
				"columns": [
					{"name": "column1"},
					{
						"name": "column2",
						"dataType": "number"
					}
				],
				"rows": [
					{"column1": "가나다라 \\n 마바사아자"},
					{"column1": "column12", "column2": ""},
					{"column1": "column13", "column2": ""},
					{"column1": "column14", "column2": ""},
					{"column1": "column15", "column2": ""},
					{"column1": "column16", "column2": ""},
					{"column1": "column17", "column2": ""},
					{"column1": "column18", "column2": ""},
					{"column1": "column19", "column2": ""},
					{"column1": "column110", "column2": ""},
					{"column1": "column111", "column2": ""}
				]
			});
			app.register(dataSet_6);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [{
					"name": "column1",
					"dataType": "string",
					"defaultValue": "가나다라마\\n바사아자"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dm2");
			dataMap_2.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "/cisweb/getList.do";
			submission_1.addResponseData(dataSet_4, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.action = "/cisweb/encode.do";
			submission_2.mediaType = "application/json";
			if(typeof onSms2SubmitDone == "function") {
				submission_2.addEventListener("submit-done", onSms2SubmitDone);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms3");
			submission_3.action = "datas/dataDtl.json";
			submission_3.addRequestData(dataMap_2);
			app.register(submission_3);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			(function(comboBox_1){
				comboBox_1.setItemSet(app.lookup("ds5"), {
					"label": "column1",
					"value": "column2"
				});
			})(comboBox_1);
			container.addChild(comboBox_1, {
				"top": "86px",
				"left": "233px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click3 == "function") {
				button_1.addEventListener("click", onBtn1Click3);
			}
			container.addChild(button_1, {
				"top": "130px",
				"left": "233px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds5"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor("nbe2");
									numberEditor_1.bind("value").toDataColumn("column2");
									return numberEditor_1;
								})();
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "116px",
				"left": "404px",
				"width": "400px",
				"height": "200px"
			});
			
			var numberEditor_2 = new cpr.controls.NumberEditor("nbe1");
			container.addChild(numberEditor_2, {
				"top": "198px",
				"left": "207px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

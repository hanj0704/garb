/*
 * App URI: 201909/notificationcenter
 * Source Location: 201909/notificationcenter.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("201909/notificationcenter", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * notificationcenter.js
			 * Created at 2019. 4. 3. 오전 10:41:20.
			 *
			 * @author tomato
			 ************************************************/
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				var msg = "레퍼런스";
				/*글로벌 객체이기 때문에 브라우저 갱신 하지 않으면 정보가 사라지지 않습니다. 
				중복으로 추가하지 않도록 유의 하세요.*/
			//	cpr.core.NotificationCenter.INSTANCE.unsubcribeAllTopic(app);
				
				cpr.core.NotificationCenter.INSTANCE.subscribe("button-click", app, function(data){
					console.log(this); //target을 app을 지정함으로 함수가 app으로 바인드 됩니다.
					console.log(data.msg);
					console.log("버튼을 눌렀습니다.",data); //data는 post에서 전달되는 payload가 됩니다.
				});
				cpr.core.NotificationCenter.INSTANCE.subscribe("load", app, function(data){
					console.log(this); //target을 app을 지정함으로 함수가 app으로 바인드 됩니다.
					console.log(data.msg);
					console.log("로드가 되었습니다.",data); //data는 post에서 전달되는 payload가 됩니다.
				});
				cpr.core.NotificationCenter.INSTANCE.subscribe("selection-change", app, function(data) {
					console.log(this);//target을 app으로 지정함으로 함수가 app으로 바인드 됩니다.
					console.log("selection : " + data.selection);
					console.log("선택행이 변경되었습니다.",data);
				});
			}
			
			
			/*
			 * "메세지 발송" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPostClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				//구독자에게 알립니다.
				cpr.core.NotificationCenter.INSTANCE.post("button-click", {
					text:"test1",
					msg :"Button > Event > Click"
				});
																			
			}
			
			
			/*
			 * "메시지 삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnUnsubscribeClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				//구독을 하지 않습니다.
				cpr.core.NotificationCenter.INSTANCE.unsubscribe(app, "button-click");
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				cpr.core.NotificationCenter.INSTANCE.post("load", {
					text:"load-test1",
					msg : "AppInstance > Event > Load"
				});
			}
			
			
			
			
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrd1SelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				
				cpr.core.NotificationCenter.INSTANCE.post("selection-change",{
					text :"selection-test",
					selection : grd1.getSelectedRowIndex()
				});
			}
			
			
			/*
			 * "메세지 전체 삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnUnsubscribeAllTopicClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				cpr.core.NotificationCenter.INSTANCE.unsubcribeAllTopic(app);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "column4": "column46", "column5": "column56"},
					{"column1": "column17", "column2": "column27", "column3": "column37", "column4": "column47", "column5": "column57"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btnPost");
			button_1.value = "메시지 발송";
			if(typeof onBtnPostClick == "function") {
				button_1.addEventListener("click", onBtnPostClick);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button("btnUnsubscribe");
			button_2.value = "메시지 삭제";
			if(typeof onBtnUnsubscribeClick == "function") {
				button_2.addEventListener("click", onBtnUnsubscribeClick);
			}
			container.addChild(button_2, {
				"top": "20px",
				"left": "130px",
				"width": "100px",
				"height": "20px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.readOnly = false;
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columnMovable": false,
				"resizableColumns": "none",
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "column4";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "column5";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column5";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						}
					]
				}
			});
			if(typeof onGrd1SelectionChange == "function") {
				grid_1.addEventListener("selection-change", onGrd1SelectionChange);
			}
			container.addChild(grid_1, {
				"top": "60px",
				"left": "20px",
				"width": "797px",
				"height": "410px"
			});
			
			var button_3 = new cpr.controls.Button("btnUnsubscribeAllTopic");
			button_3.value = "메세지 전체 삭제";
			if(typeof onBtnUnsubscribeAllTopicClick == "function") {
				button_3.addEventListener("click", onBtnUnsubscribeAllTopicClick);
			}
			container.addChild(button_3, {
				"top": "20px",
				"left": "240px",
				"width": "126px",
				"height": "20px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "notificationcenter";
	cpr.core.Platform.INSTANCE.register(app);
})();

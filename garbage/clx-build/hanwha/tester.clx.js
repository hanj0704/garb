/*
 * App URI: hanwha/tester
 * Source Location: hanwha/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("hanwha/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tester.js
			 * Created at 2020. 3. 2. 오후 4:31:38.
			 *
			 * @author HANS
			 ************************************************/
			
			var objs = {};
			var filtered;
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				app.lookup("sms4").send();
			}
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSms4SubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms4 = e.control;
				var dsList = app.lookup("dsList");
					for(var i  = 0 ; i < dsList.getRowCount() ; i++) {
					var button = new cpr.controls.Button();
					var random = Math.random();
					if(random < 0.5) {
						
					button.value = dsList.getValue(i, "value");
					}else {
					button.bind("value").toExpression("' '");
					button.style.css({"background" :"tomato"})
					}
					
					app.getContainer().addChild(button, {
						"with" : "100px",
						"height" : "20px",
						"autoSize" : "none"
					});
				}
				
			 filtered = app.getContainer().getAllRecursiveChildren().filter(function(each){
					if(each.getBindInfo("value") ===undefined) {
						return each;
					}
				});
			
				filtered.forEach(function(each,idx){
					objs[idx] = each.value;
				});
			}
			
			
			/*
			 * 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				var size = Object.keys(objs).length-1;
				filtered.forEach(function(each,idx){
					each.value = objs[size-idx];
				});	
				
				app.getContainer().redraw();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({"alterColumnLayout": "server"});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsList");
			dataSet_2.parseData({
				"columns" : [
					{
						"name": "key",
						"dataType": "number"
					},
					{"name": "value"}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [{"name": "column1"}]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "/cisweb/build.do";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSms1SubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSms1SubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.action = "/cisweb/download.do";
			submission_2.mediaType = "application/x-www-form-urlencoded";
			submission_2.responseType = "filedownload";
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms3");
			submission_3.action = "/cisweb/test.do";
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sms4");
			submission_4.action = "datas/MOCK_DATA.json";
			submission_4.addResponseData(dataSet_2, false);
			if(typeof onSms4SubmitSuccess == "function") {
				submission_4.addEventListener("submit-success", onSms4SubmitSuccess);
			}
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			container.setLayout(flowLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.bind("value").toExpression("123");
			if(typeof onBtn1Click2 == "function") {
				button_1.addEventListener("click", onBtn1Click2);
			}
			container.addChild(button_1, {
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: hanwha/FloatExm
 * Source Location: hanwha/FloatExm.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("hanwha/FloatExm", {
		onPrepare: function(loader){
			loader.addCSS("hanwha/pub/pop.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Search.js
			 * Created at 2019. 10. 16. 오후 4:00:29.
			 *
			 * @author ryu
			 ************************************************/
			
			
			/**
			 * 검색조건을 플로팅합니다.
			 */
			function floatingSearchBox() {
				var vcEaContent = app.lookup("eaContent");
				
				var voEaAppIns = vcEaContent.getEmbeddedAppInstance();
				if (voEaAppIns){
					/** @type cpr.controls.Container */
					var vcSearchBox = voEaAppIns.lookup("grpSearch");
					
					var voSearchBoxLayout = vcSearchBox.getLayout();
					
					createBlank(voEaAppIns.getContainer(), vcSearchBox);
					
					voSearchBoxLayout.getRows().forEach(function(each, index){
						voSearchBoxLayout.setRowVisible(index, true);
					});
					
					cpr.core.DeferredUpdateManager.INSTANCE.update();
					
					var voActualRect = vcSearchBox.getActualRect();
					
					voEaAppIns.floatControl(vcSearchBox, {
						width : "100%",
						height : voActualRect.height + "px",
						top : "0px"
					});
				}
			}
			
			
			/**
			 * 
			 * @param {cpr.controls.Container} pcParentContainer
			 * @param {cpr.controls.Container} pcTargetControl
			 */
			function createBlank(pcParentContainer, pcTargetControl) {
				var vnBeforeHeight = pcTargetControl.getActualRect().height;
				
				cpr.core.DeferredUpdateManager.INSTANCE.asyncExec(function(e) {
					var vcBlank = new cpr.controls.Container("grpBlank");
					pcParentContainer.insertChild(0, vcBlank, {
						height : vnBeforeHeight + "px"
					});
				});
			}
			
			
			/**
			 * 검색조건을 다시 붙입니다.
			 */
			function removeFloatingSearchBox() {
				var vcEaContent = app.lookup("eaContent");
				
				var voEaAppIns = vcEaContent.getEmbeddedAppInstance();
				if (voEaAppIns){
					/** @type cpr.controls.Container */
					var vcSearchBox = voEaAppIns.lookup("grpSearch");
					var voSearchBoxLayout = vcSearchBox.getLayout();
					
					voSearchBoxLayout.getRows().forEach(function(each, index){
						var vsMustShowIdx = vcSearchBox.userAttr("must-show-index");
						var vaMustShowIdx = vsMustShowIdx != null && vsMustShowIdx != "" ? vsMustShowIdx.split(",") : null;
						
						voSearchBoxLayout.setRowVisible(index, false);
						
						if (vaMustShowIdx.length > 0 && vaMustShowIdx.indexOf(index.toString()) != -1){
							voSearchBoxLayout.setRowVisible(index, true);
						}
					});
					
					var vcContainer = voEaAppIns.getContainer();
					vcContainer.insertChild(0, vcSearchBox, {
						autoSize : "height"
					});
					
					vcContainer.removeChild(voEaAppIns.lookup("grpBlank"), true);
					
					vcContainer.redraw();
				}	
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				// 버튼이 토글되었을 때에 대한 스타일을 정의합니다.
				if (e.property == "isFloating"){
					var vaSearchOnCtrl = ["btnSearchDtl", "optTriangle", "optTriangleCover"];
					vaSearchOnCtrl.forEach(function(/* String */id){
						/** @type cpr.controls.UIControl */
						var vcCtrl = app.lookup(id);
						if (e.newValue){
							vcCtrl.style.addClass("on");
						} else {
							vcCtrl.style.removeClass("on");
						}
					});
				}
			}
			
			
			/*
			 * 버튼(btnSearchDtl)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchDtlClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnSearchDtl = e.control;
				
				// 버튼을 눌렀을 때 디테일 조건을 표시 여부를 적용합니다.
				app.setAppProperty("isFloating", !app.getAppProperty("isFloating"));
				
				if (app.getAppProperty("isFloating")){ // 플로팅 되었을 때
					floatingSearchBox();
				} else { // 플로팅 되지 않았을 때
					removeFloatingSearchBox();
				}
			}
			
			
			/*
			 * "X" 버튼(btnClose)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCloseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnClose = e.control;
				
				//TODO 해당 버튼이 클릭되었을 때 콜백을 정의합니다.
				
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("isFloating", false);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["pop-header"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output("optTitle");
				output_1.value = "심사리스트";
				output_1.style.setClasses(["pop-title"]);
				container.addChild(output_1, {
					"right": "20px",
					"left": "20px",
					"height": "25px",
					"top": "calc(50% - 12px)"
				});
				var button_1 = new cpr.controls.Button("btnSearchDtl");
				button_1.value = "";
				button_1.style.setClasses(["btn-search"]);
				if(typeof onBtnSearchDtlClick == "function") {
					button_1.addEventListener("click", onBtnSearchDtlClick);
				}
				container.addChild(button_1, {
					"top": "1px",
					"right": "50px",
					"bottom": "1px",
					"width": "35px"
				});
				var output_2 = new cpr.controls.Output("optLine");
				output_2.value = "";
				output_2.style.setClasses(["pop-line"]);
				container.addChild(output_2, {
					"top": "7px",
					"right": "40px",
					"width": "1px",
					"height": "20px"
				});
				var button_2 = new cpr.controls.Button("btnClose");
				button_2.value = "X";
				button_2.style.setClasses(["btn-close"]);
				if(typeof onBtnCloseClick == "function") {
					button_2.addEventListener("click", onBtnCloseClick);
				}
				container.addChild(button_2, {
					"top": "7px",
					"right": "10px",
					"width": "20px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"left": "0px",
				"height": "35px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("eaContent");
			cpr.core.App.load("hanwha/FloatPage", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "34px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var output_3 = new cpr.controls.Output("optTriangle");
			output_3.style.setClasses(["toggle-triangle", "cover"]);
			container.addChild(output_3, {
				"top": "34px",
				"right": "61px",
				"width": "12px",
				"height": "5px"
			});
			
			var output_4 = new cpr.controls.Output("optTriangleCover");
			output_4.style.setClasses(["toggle-triangle"]);
			container.addChild(output_4, {
				"top": "32px",
				"right": "62px",
				"width": "10px",
				"height": "5px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	app.title = "FloatExm";
	cpr.core.Platform.INSTANCE.register(app);
})();

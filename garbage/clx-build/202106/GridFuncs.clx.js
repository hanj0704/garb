/*
 * App URI: 202106/GridFuncs
 * Source Location: 202106/GridFuncs.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("202106/GridFuncs", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * GridFuncs.js
			 * Created at 2021. 6. 22. 오전 9:05:27.
			 *
			 * @author ryu
			 ************************************************/
			
			/************************************************
			 * 그리드 -> 오피스 복사/붙여넣기
			 ************************************************/
			
			/**
			 * 
			 * @param {cpr.controls.Grid} grd
			 * @param {"cell" | "row" | "column"} selUnit
			 * @parem {String} data
			 */
			function copyHtml(grd, selUnit, data) {
				var tagArr = null;
				switch(selUnit) {
					case "cell" : {
						tagArr = copyCellHtml(grd, data);
						break;
					}
					case "row" : {
						tagArr = copyRowHtml(grd, data);
					}
					case "column" : {
						tagArr = copyColumnHtml(grd, data);
					}
				}
				
				var clipTag = getClipboardNode();
				var tblTag = clipTag.firstElementChild;
				tblTag.innerHTML = tagArr.join("");
				tagArr = null;
				
				var selection = window.getSelection();
				selection.removeAllRanges();
				
				var isIE = (cpr.core.Platform.INSTANCE.browserInfo.name == "ie");
				if(isIE) {
					var range = document.createRange();
			    	range.selectNode(tblTag);
			    	selection.addRange(range);
				} else {
					selection.selectAllChildren(tblTag);
				}
				
				document.execCommand("copy");
				
				selection.removeAllRanges();
				
				/* 클립보드 태그 삭제 (스크롤 방지) */
				var clipTag = document.getElementById("gridClipboard");
				document.body.removeChild(clipTag);
			}
			
			function getClipboardNode() {
				var clipTag = document.getElementById("gridClipboard");
				if(!clipTag) {
					clipTag = document.createElement("div");
					clipTag.id = "gridClipboard";
					clipTag.style.width = "1px";
					clipTag.style.height = "1px";
					clipTag.style.overflow = "hidden";
					clipTag.style.position = "absolute";
					clipTag.style.left = "-1px";
					clipTag.style.top = "-1px";
					
					var tblTag = document.createElement("table");
					tblTag.style.border = "1px solid black";
					tblTag.style.borderCollapse = "collapse";
					clipTag.appendChild(tblTag);
					
					clipTag = document.body.appendChild(clipTag);
				}
				
				return clipTag;
			}
			
			function copyCellHtml(/* cpr.controls.Grid */ grd, data) {
				var htmlText = [];
				
				var rows = data.split("\n");
				for(var i = 0; i < rows.length - 1; i++){
					
					var datas = rows[i].split("\t");
					if(datas.length > 0) {
						htmlText[htmlText.length] = "<tr>";
						for(var j = 0; j < datas.length; j++){
							htmlText[htmlText.length] = "<td style='border-left: 1px solid #000000; "
							 + "border-right: 1px solid #000000; "
							 + "border-bottom: 1px solid #000000; "
							 + "border-top: 1px solid #000000;'>";
							htmlText[htmlText.length] = datas[j];
							htmlText[htmlText.length] = "</td>";
						}
						htmlText[htmlText.length] = "</tr>";
					}
				}
				
				return htmlText;
			}
			
			/**
			 * 행을 복사합니다.
			 * @param {cpr.controls.Grid} grd
			 * @param {String} data
			 */
			function copyRowHtml(grd, data) {
				var htmlText = [];
				var selectDataRowCount = grd.getSelectedRowIndices().length;
				var designRowCount = grd.detail.getRowHeights().length;
				var selectedRowCount = selectDataRowCount * designRowCount;
				
				var rows = data.split("\n");
				for(var i = 0; i < rows.length; i++){
					if(i >= selectedRowCount){
						break;
					}
					
					var datas = rows[i].split("\t");
					if(datas.length > 0) {
						htmlText[htmlText.length] = "<tr>";
						for(var j = 0; j < datas.length; j++){
							htmlText[htmlText.length] = "<td style='border-left: 1px solid #000000; "
							 + "border-right: 1px solid #000000; "
							 + "border-bottom: 1px solid #000000; "
							 + "border-top: 1px solid #000000;'>";
							htmlText[htmlText.length] = datas[j];
							htmlText[htmlText.length] = "</td>";
						}
						htmlText[htmlText.length] = "</tr>";
					}
				}
				
				return htmlText;
			}
			
			/**
			 * 열을 복사합니다.
			 * @param {cpr.controls.Grid} grd
			 * @param {String} data
			 */
			function copyColumnHtml(grd, data) {
				
				var htmlText = [];
				var totalDataRowCount = grd.getRowCount();
				var designRowCount = grd.detail.getRowHeights().length;
				var selectedRowCount = totalDataRowCount * designRowCount;
				
				var rows = data.split("\n");
				for(var i = 0; i < rows.length; i++){
					if(i >= selectedRowCount){
						break;
					}
					
					var datas = rows[i].split("\t");
					if(datas.length > 0) {
						htmlText[htmlText.length] = "<tr>";
						for(var j = 0; j < datas.length; j++){
							htmlText[htmlText.length] = "<td style='border-left: 1px solid #000000; "
							 + "border-right: 1px solid #000000; "
							 + "border-bottom: 1px solid #000000; "
							 + "border-top: 1px solid #000000;'>";
							htmlText[htmlText.length] = datas[j];
							htmlText[htmlText.length] = "</td>";
						}
						htmlText[htmlText.length] = "</tr>";
					}
				}
			
				return htmlText;
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				/* 데이터 조회 */
				app.lookup("subGroupingList").send().then(function(input){
					app.lookup("grdGrp").redraw();
				});
				
				app.lookup("subTreeList").send().then(function(input){
					app.lookup("grdTrc").redraw();
				});
				
				app.lookup("subStockList").send().then(function(input){
					app.lookup("grdExl").redraw();
				});
				
				app.lookup("subList").send().then(function(input){
					app.lookup("grdSplt").redraw();
				});
				
				/* 콤보박스 기본값 설정 */
				app.lookup("cmbSplt").selectItem(0);
				app.lookup("cmbCpPst").selectItem(0);
				
				/* 그리드 엑셀 관련 정보 */
				setColumnInfos();
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbSpltSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbSplt = e.control;
				
				var vcGrdSplt = app.lookup("grdSplt");
				
				var vcSlctItem = e.newSelection[0];
				var vsItemVal = vcSlctItem.value;
				
				/* 틀고정 초기화 */
				vcGrdSplt.leftSplit = 0;
				vcGrdSplt.rightSplit = 0;
				vcGrdSplt.topSplit = 0;
				vcGrdSplt.bottomSplit = 0;
				
				if (vsItemVal == "left"){
					vcGrdSplt.leftSplit = 2;
					vcGrdSplt.leftSplitWidth = 240;
				} else if (vsItemVal == "right") {
					vcGrdSplt.rightSplit = 1;
					vcGrdSplt.leftSplitWidth = 100;
				} else if (vsItemVal == "top") {
					vcGrdSplt.topSplit = 3;
					vcGrdSplt.topSplitHeight = parseInt(vcGrdSplt.getInitConfig().detail.rows[0].height) * 3 + 3;
				} else if (vsItemVal == "bottom") {
					vcGrdSplt.bottomSplit = 3;
					vcGrdSplt.bottomSplitHeight = parseInt(vcGrdSplt.getInitConfig().detail.rows[0].height) * 3 + 3;
				}
				
				vcGrdSplt.redraw();
			}
			
			
			/*
			 * 그리드에서 before-paste 이벤트 발생 시 호출.
			 * Grid에서 ctrl + v 로 붙여넣기시 붙여넣기 전에 발생하는 이벤트.
			 */
			function onGrdCpPstBeforePaste(/* cpr.events.CGridEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCpPst = e.control;
				
				var rowIndex = grdCpPst.getRowCount();
				var selectedCellIndices = grdCpPst.getSelectedCellIndices();
			
				if(selectedCellIndices != null && selectedCellIndices.length == 0) {
					var data = e.data.split("\n");
					var vnCount = data.length - 1;
					
					for(var idx = 0; idx < vnCount; idx++){
						grdCpPst.insertRow(0);
					}
					grdCpPst.redraw();
				}
			}
			
			
			/**
			 * 컬럼 정보를 담는다.
			 */
			function setColumnInfos() {
				var vcDsReq = app.lookup("dsReq");
				var vcGrdMst = app.lookup("grdExl");
				
				var vnCellCnt = vcGrdMst.detail.cellCount;
				
				for(var idx = 0; idx < vnCellCnt; idx++){
					var voHdCol = vcGrdMst.header.getColumn(idx);
					var voDtlCol = vcGrdMst.detail.getColumn(idx);
					
					if (voDtlCol == null){
						continue;
					}
					
					var vsColTxt = voHdCol.text;
					var vsColNm = voDtlCol.columnName;
					
					vcDsReq.addRowData({
						TXT : vsColTxt,
						COL_NM : vsColNm
					});
				}
			}
			
			
			/**
			 * 전날과 비교한 주식가격 차이에 대한 등락가의 퍼센트
			 * @param {Number} pnStock 주가
			 * @param {Number} pnFluctuation 등락가격
			 */
			function getFluctuations(pnStock, pnFluctuation) {
				// ((현재 주가 - 전일 주가) / 전일 주가) * 100 => 등락율
				var today = pnStock;
				var yesterday = today - pnFluctuation; // 12000 - 2000 = 10000
				var fluctuation = ((today - yesterday) / yesterday) * 100;
				
				return fluctuation;
			}
			exports.getFluctuations = getFluctuations;
			
			/*
			 * "가져오기" 버튼(btnImp)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnImpClick(/* cpr.events.CMouseEvent */ e){
				var vcFiExl = app.lookup("fiExl");
				vcFiExl.openFileChooser();
			}
			
			
			/*
			 * "내보내기" 버튼(btnExp)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnExpClick(/* cpr.events.CMouseEvent */ e){
				var vcSubExp = app.lookup("subExp");
				
				var vcGrdExl = app.lookup("grdExl");
				var voExpData = vcGrdExl.getExportData({
					exceptStyle: false,
					applyFormat: true,
					useFormat: true,
					rowDataHandler: function(/* {value:String,style:#css-color}[] */datas, /* Number */ rowIndex){
						datas.forEach(function(each){
							each.style["border-top-width"] = "1px";
							each.style["border-right-width"] = "1px";
							each.style["border-bottom-width"] = "1px";
							each.style["border-left-width"] = "1px";
							each.style["border-top-style"] = "solid";
							each.style["border-right-style"] = "solid";
							each.style["border-bottom-style"] = "solid";
							each.style["border-left-style"] = "solid";
							each.style["border-top-color"] = "#babfc7";
							each.style["border-right-color"] = "#babfc7";
							each.style["border-bottom-color"] = "#babfc7";
							each.style["border-left-color"] = "#babfc7";
							
							if (each.style["color"] == null){ // text color exception
								each.style["color"] = "#4e5154";
							}
							
							if (rowIndex == 0){ // Header
								each.style["background-color"] = "#edf1f4";
								each.style["color"] = "#4e5154";
								each.style["font-weight"] = "500";
								each.style["text-align"] = "center";
							}
							
							if (rowIndex > vcGrdExl.getRowCount()){ // footer
								each.style["background-color"] = "#F6F8FA";
								each.style["font-weight"] = "500";
								each.style["text-align"] = "right";
							}
						});
					}
				});
				
				/* 시트 이름 설정 */
				voExpData["name"] = "stock";
				
				/*
				 * if (metadata != null) {
				 * 	exportData["metadata"] = {};
				 * 	if (metadata["password"] != null) {
				 * 		exportData["metadata"]["password"] = metadata["password"];
				 * 	}
				 * 	if (metadata["printPageOrientation"] != null) {
				 * 		exportData["metadata"]["printPageOrientation"] = metadata["printPageOrientation"];
				 * 	}
				 * }
				 */
				
				vcSubExp.setRequestObject(voExpData);
				vcSubExp.send();
			}
			
			
			/*
			 * "초기화" 버튼(btnRst)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRstClick(/* cpr.events.CMouseEvent */ e){
				app.lookup("grdExl").dataSet.clearData();
			}
			
			
			/*
			 * "초기화" 버튼(btnCpRst)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCpRstClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnCpRst = e.control;
				
				app.lookup("grdCpPst").dataSet.clearData();
			}
			
			
			/*
			 * "재조회" 버튼(btnRSch)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnRSchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnRSch = e.control;
				
				app.lookup("subStockList").send().then(function(input){
					app.lookup("grdCpPst").redraw();
				});
			}
			
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmbCpPstSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmbCpPst = e.control;
				
			}
			
			
			/*
			 * 그리드에서 copy 이벤트 발생 시 호출.
			 * Grid의 선택된 요소를 ctrl + c 로 복사했을 때 발생하는 이벤트.
			 */
			function onGrdCpPstCopy(/* cpr.events.CGridEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grdCpPst = e.control;
				
				var vsCpPstVal = app.lookup("cmbCpPst").value;
			
				if (vsCpPstVal == "office"){
					var selUnit = grdCpPst.selectionUnit;
					
					e.preventDefault();
					
					copyHtml(grdCpPst, selUnit, e.data);
				}
			}
			
			
			/*
			 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
			 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFiExlValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.FileInput
				 */
				var fiExl = e.control;
				
				var voFile = fiExl.file;
				
				var vcSubImp = app.lookup("subImp");
				vcSubImp.setFileParameters("dsStockExl", voFile);
				vcSubImp.addEventListenerOnce("submit-done", function(e){
					app.lookup("grdExl").redraw();
				});
				vcSubImp.send();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsGroupingList");
			dataSet_1.parseData({
				"columns": [
					{"name": "COMPANY"},
					{"name": "COUNTRY"},
					{
						"name": "Y_2012",
						"dataType": "number"
					},
					{
						"name": "Y_2013",
						"dataType": "number"
					},
					{
						"name": "Y_2014",
						"dataType": "number"
					},
					{
						"name": "Y_2015",
						"dataType": "number"
					},
					{
						"name": "Y_2016",
						"dataType": "number"
					},
					{
						"name": "TOTAL",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "Y_2012 + Y_2013 + Y_2014 + Y_2015 + Y_2016"
					}
				],
				"rows": [
					{"COMPANY": "COMPANY1", "COUNTRY": "COUNTRY1", "Y_2012": "1", "Y_2013": "1", "Y_2014": "1", "Y_2015": "1", "Y_2016": "1"},
					{"COMPANY": "COMPANY2", "COUNTRY": "COUNTRY2", "Y_2012": "2", "Y_2013": "2", "Y_2014": "2", "Y_2015": "2", "Y_2016": "2"},
					{"COMPANY": "COMPANY3", "COUNTRY": "COUNTRY3", "Y_2012": "3", "Y_2013": "3", "Y_2014": "3", "Y_2015": "3", "Y_2016": "3"},
					{"COMPANY": "COMPANY4", "COUNTRY": "COUNTRY4", "Y_2012": "4", "Y_2013": "4", "Y_2014": "4", "Y_2015": "4", "Y_2016": "4"},
					{"COMPANY": "COMPANY5", "COUNTRY": "COUNTRY5", "Y_2012": "5", "Y_2013": "5", "Y_2014": "5", "Y_2015": "5", "Y_2016": "5"},
					{"COMPANY": "COMPANY6", "COUNTRY": "COUNTRY6", "Y_2012": "6", "Y_2013": "6", "Y_2014": "6", "Y_2015": "6", "Y_2016": "6"},
					{"COMPANY": "COMPANY7", "COUNTRY": "COUNTRY7", "Y_2012": "7", "Y_2013": "7", "Y_2014": "7", "Y_2015": "7", "Y_2016": "7"},
					{"COMPANY": "COMPANY8", "COUNTRY": "COUNTRY8", "Y_2012": "8", "Y_2013": "8", "Y_2014": "8", "Y_2015": "8", "Y_2016": "8"},
					{"COMPANY": "COMPANY9", "COUNTRY": "COUNTRY9", "Y_2012": "9", "Y_2013": "9", "Y_2014": "9", "Y_2015": "9", "Y_2016": "9"},
					{"COMPANY": "COMPANY10", "COUNTRY": "COUNTRY10", "Y_2012": "10", "Y_2013": "10", "Y_2014": "10", "Y_2015": "10", "Y_2016": "10"},
					{"COMPANY": "COMPANY11", "COUNTRY": "COUNTRY11", "Y_2012": "11", "Y_2013": "11", "Y_2014": "11", "Y_2015": "11", "Y_2016": "11"},
					{"COMPANY": "COMPANY12", "COUNTRY": "COUNTRY12", "Y_2012": "12", "Y_2013": "12", "Y_2014": "12", "Y_2015": "12", "Y_2016": "12"},
					{"COMPANY": "COMPANY13", "COUNTRY": "COUNTRY13", "Y_2012": "13", "Y_2013": "13", "Y_2014": "13", "Y_2015": "13", "Y_2016": "13"},
					{"COMPANY": "COMPANY14", "COUNTRY": "COUNTRY14", "Y_2012": "14", "Y_2013": "14", "Y_2014": "14", "Y_2015": "14", "Y_2016": "14"},
					{"COMPANY": "COMPANY15", "COUNTRY": "COUNTRY15", "Y_2012": "15", "Y_2013": "15", "Y_2014": "15", "Y_2015": "15", "Y_2016": "15"},
					{"COMPANY": "COMPANY16", "COUNTRY": "COUNTRY16", "Y_2012": "16", "Y_2013": "16", "Y_2014": "16", "Y_2015": "16", "Y_2016": "16"},
					{"COMPANY": "COMPANY17", "COUNTRY": "COUNTRY17", "Y_2012": "17", "Y_2013": "17", "Y_2014": "17", "Y_2015": "17", "Y_2016": "17"},
					{"COMPANY": "COMPANY18", "COUNTRY": "COUNTRY18", "Y_2012": "18", "Y_2013": "18", "Y_2014": "18", "Y_2015": "18", "Y_2016": "18"},
					{"COMPANY": "COMPANY19", "COUNTRY": "COUNTRY19", "Y_2012": "19", "Y_2013": "19", "Y_2014": "19", "Y_2015": "19", "Y_2016": "19"},
					{"COMPANY": "COMPANY20", "COUNTRY": "COUNTRY20", "Y_2012": "20", "Y_2013": "20", "Y_2014": "20", "Y_2015": "20", "Y_2016": "20"},
					{"COMPANY": "COMPANY21", "COUNTRY": "COUNTRY21", "Y_2012": "21", "Y_2013": "21", "Y_2014": "21", "Y_2015": "21", "Y_2016": "21"},
					{"COMPANY": "COMPANY22", "COUNTRY": "COUNTRY22", "Y_2012": "22", "Y_2013": "22", "Y_2014": "22", "Y_2015": "22", "Y_2016": "22"},
					{"COMPANY": "COMPANY23", "COUNTRY": "COUNTRY23", "Y_2012": "23", "Y_2013": "23", "Y_2014": "23", "Y_2015": "23", "Y_2016": "23"},
					{"COMPANY": "COMPANY24", "COUNTRY": "COUNTRY24", "Y_2012": "24", "Y_2013": "24", "Y_2014": "24", "Y_2015": "24", "Y_2016": "24"},
					{"COMPANY": "COMPANY25", "COUNTRY": "COUNTRY25", "Y_2012": "25", "Y_2013": "25", "Y_2014": "25", "Y_2015": "25", "Y_2016": "25"},
					{"COMPANY": "COMPANY26", "COUNTRY": "COUNTRY26", "Y_2012": "26", "Y_2013": "26", "Y_2014": "26", "Y_2015": "26", "Y_2016": "26"},
					{"COMPANY": "COMPANY27", "COUNTRY": "COUNTRY27", "Y_2012": "27", "Y_2013": "27", "Y_2014": "27", "Y_2015": "27", "Y_2016": "27"},
					{"COMPANY": "COMPANY28", "COUNTRY": "COUNTRY28", "Y_2012": "28", "Y_2013": "28", "Y_2014": "28", "Y_2015": "28", "Y_2016": "28"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsTreeList");
			dataSet_2.parseData({
				"columns": [
					{"name": "TASK"},
					{"name": "DURATION"},
					{"name": "ASSIGNED_TO"},
					{"name": "DONE"},
					{"name": "LEVEL"}
				],
				"rows": [
					{"TASK": "TASK1", "DURATION": "DURATION1", "ASSIGNED_TO": "ASSIGNED_TO1", "DONE": "DONE1", "LEVEL": ""},
					{"TASK": "TASK2", "DURATION": "DURATION2", "ASSIGNED_TO": "ASSIGNED_TO2", "DONE": "DONE2", "LEVEL": ""},
					{"TASK": "TASK3", "DURATION": "DURATION3", "ASSIGNED_TO": "ASSIGNED_TO3", "DONE": "DONE3", "LEVEL": ""},
					{"TASK": "TASK4", "DURATION": "DURATION4", "ASSIGNED_TO": "ASSIGNED_TO4", "DONE": "DONE4", "LEVEL": ""},
					{"TASK": "TASK5", "DURATION": "DURATION5", "ASSIGNED_TO": "ASSIGNED_TO5", "DONE": "DONE5", "LEVEL": ""},
					{"TASK": "TASK6", "DURATION": "DURATION6", "ASSIGNED_TO": "ASSIGNED_TO6", "DONE": "DONE6", "LEVEL": ""},
					{"TASK": "TASK7", "DURATION": "DURATION7", "ASSIGNED_TO": "ASSIGNED_TO7", "DONE": "DONE7", "LEVEL": ""},
					{"TASK": "TASK8", "DURATION": "DURATION8", "ASSIGNED_TO": "ASSIGNED_TO8", "DONE": "DONE8", "LEVEL": ""},
					{"TASK": "TASK9", "DURATION": "DURATION9", "ASSIGNED_TO": "ASSIGNED_TO9", "DONE": "DONE9", "LEVEL": ""},
					{"TASK": "TASK10", "DURATION": "DURATION10", "ASSIGNED_TO": "ASSIGNED_TO10", "DONE": "DONE10", "LEVEL": ""},
					{"TASK": "TASK11", "DURATION": "DURATION11", "ASSIGNED_TO": "ASSIGNED_TO11", "DONE": "DONE11", "LEVEL": ""},
					{"TASK": "TASK12", "DURATION": "DURATION12", "ASSIGNED_TO": "ASSIGNED_TO12", "DONE": "DONE12", "LEVEL": ""},
					{"TASK": "TASK13", "DURATION": "DURATION13", "ASSIGNED_TO": "ASSIGNED_TO13", "DONE": "DONE13", "LEVEL": ""},
					{"TASK": "TASK14", "DURATION": "DURATION14", "ASSIGNED_TO": "ASSIGNED_TO14", "DONE": "DONE14", "LEVEL": ""},
					{"TASK": "TASK15", "DURATION": "DURATION15", "ASSIGNED_TO": "ASSIGNED_TO15", "DONE": "DONE15", "LEVEL": ""},
					{"TASK": "TASK16", "DURATION": "DURATION16", "ASSIGNED_TO": "ASSIGNED_TO16", "DONE": "DONE16", "LEVEL": ""},
					{"TASK": "TASK17", "DURATION": "DURATION17", "ASSIGNED_TO": "ASSIGNED_TO17", "DONE": "DONE17", "LEVEL": ""},
					{"TASK": "TASK18", "DURATION": "DURATION18", "ASSIGNED_TO": "ASSIGNED_TO18", "DONE": "DONE18", "LEVEL": ""},
					{"TASK": "TASK19", "DURATION": "DURATION19", "ASSIGNED_TO": "ASSIGNED_TO19", "DONE": "DONE19", "LEVEL": ""},
					{"TASK": "TASK20", "DURATION": "DURATION20", "ASSIGNED_TO": "ASSIGNED_TO20", "DONE": "DONE20", "LEVEL": ""},
					{"TASK": "TASK21", "DURATION": "DURATION21", "ASSIGNED_TO": "ASSIGNED_TO21", "DONE": "DONE21", "LEVEL": ""},
					{"TASK": "TASK22", "DURATION": "DURATION22", "ASSIGNED_TO": "ASSIGNED_TO22", "DONE": "DONE22", "LEVEL": ""},
					{"TASK": "TASK23", "DURATION": "DURATION23", "ASSIGNED_TO": "ASSIGNED_TO23", "DONE": "DONE23", "LEVEL": ""},
					{"TASK": "TASK24", "DURATION": "DURATION24", "ASSIGNED_TO": "ASSIGNED_TO24", "DONE": "DONE24", "LEVEL": ""},
					{"TASK": "TASK25", "DURATION": "DURATION25", "ASSIGNED_TO": "ASSIGNED_TO25", "DONE": "DONE25", "LEVEL": ""}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsStock");
			dataSet_3.parseData({
				"columns": [
					{"name": "ENTRPS_NM"},
					{"name": "INDUTY"},
					{
						"name": "STKPC",
						"dataType": "number"
					},
					{
						"name": "FLCTS_PC",
						"dataType": "number"
					},
					{
						"name": "FLCTS_BT",
						"dataType": "decimal"
					},
					{"name": "UPDT_DATE"}
				],
				"rows": [
					{"ENTRPS_NM": "ENTRPS_NM1", "INDUTY": "INDUTY1", "STKPC": "1", "FLCTS_PC": "1", "FLCTS_BT": "1", "UPDT_DATE": "UPDT_DATE1"},
					{"ENTRPS_NM": "ENTRPS_NM2", "INDUTY": "INDUTY2", "STKPC": "2", "FLCTS_PC": "2", "FLCTS_BT": "2", "UPDT_DATE": "UPDT_DATE2"},
					{"ENTRPS_NM": "ENTRPS_NM3", "INDUTY": "INDUTY3", "STKPC": "3", "FLCTS_PC": "3", "FLCTS_BT": "3", "UPDT_DATE": "UPDT_DATE3"},
					{"ENTRPS_NM": "ENTRPS_NM4", "INDUTY": "INDUTY4", "STKPC": "4", "FLCTS_PC": "4", "FLCTS_BT": "4", "UPDT_DATE": "UPDT_DATE4"},
					{"ENTRPS_NM": "ENTRPS_NM5", "INDUTY": "INDUTY5", "STKPC": "5", "FLCTS_PC": "5", "FLCTS_BT": "5", "UPDT_DATE": "UPDT_DATE5"},
					{"ENTRPS_NM": "ENTRPS_NM6", "INDUTY": "INDUTY6", "STKPC": "6", "FLCTS_PC": "6", "FLCTS_BT": "6", "UPDT_DATE": "UPDT_DATE6"},
					{"ENTRPS_NM": "ENTRPS_NM7", "INDUTY": "INDUTY7", "STKPC": "7", "FLCTS_PC": "7", "FLCTS_BT": "7", "UPDT_DATE": "UPDT_DATE7"},
					{"ENTRPS_NM": "ENTRPS_NM8", "INDUTY": "INDUTY8", "STKPC": "8", "FLCTS_PC": "8", "FLCTS_BT": "8", "UPDT_DATE": "UPDT_DATE8"},
					{"ENTRPS_NM": "ENTRPS_NM9", "INDUTY": "INDUTY9", "STKPC": "9", "FLCTS_PC": "9", "FLCTS_BT": "9", "UPDT_DATE": "UPDT_DATE9"},
					{"ENTRPS_NM": "ENTRPS_NM10", "INDUTY": "INDUTY10", "STKPC": "10", "FLCTS_PC": "10", "FLCTS_BT": "10", "UPDT_DATE": "UPDT_DATE10"},
					{"ENTRPS_NM": "ENTRPS_NM11", "INDUTY": "INDUTY11", "STKPC": "11", "FLCTS_PC": "11", "FLCTS_BT": "11", "UPDT_DATE": "UPDT_DATE11"},
					{"ENTRPS_NM": "ENTRPS_NM12", "INDUTY": "INDUTY12", "STKPC": "12", "FLCTS_PC": "12", "FLCTS_BT": "12", "UPDT_DATE": "UPDT_DATE12"},
					{"ENTRPS_NM": "ENTRPS_NM13", "INDUTY": "INDUTY13", "STKPC": "13", "FLCTS_PC": "13", "FLCTS_BT": "13", "UPDT_DATE": "UPDT_DATE13"},
					{"ENTRPS_NM": "ENTRPS_NM14", "INDUTY": "INDUTY14", "STKPC": "14", "FLCTS_PC": "14", "FLCTS_BT": "14", "UPDT_DATE": "UPDT_DATE14"},
					{"ENTRPS_NM": "ENTRPS_NM15", "INDUTY": "INDUTY15", "STKPC": "15", "FLCTS_PC": "15", "FLCTS_BT": "15", "UPDT_DATE": "UPDT_DATE15"},
					{"ENTRPS_NM": "ENTRPS_NM16", "INDUTY": "INDUTY16", "STKPC": "16", "FLCTS_PC": "16", "FLCTS_BT": "16", "UPDT_DATE": "UPDT_DATE16"},
					{"ENTRPS_NM": "ENTRPS_NM17", "INDUTY": "INDUTY17", "STKPC": "17", "FLCTS_PC": "17", "FLCTS_BT": "17", "UPDT_DATE": "UPDT_DATE17"},
					{"ENTRPS_NM": "ENTRPS_NM18", "INDUTY": "INDUTY18", "STKPC": "18", "FLCTS_PC": "18", "FLCTS_BT": "18", "UPDT_DATE": "UPDT_DATE18"},
					{"ENTRPS_NM": "ENTRPS_NM19", "INDUTY": "INDUTY19", "STKPC": "19", "FLCTS_PC": "19", "FLCTS_BT": "19", "UPDT_DATE": "UPDT_DATE19"},
					{"ENTRPS_NM": "ENTRPS_NM20", "INDUTY": "INDUTY20", "STKPC": "20", "FLCTS_PC": "20", "FLCTS_BT": "20", "UPDT_DATE": "UPDT_DATE20"},
					{"ENTRPS_NM": "ENTRPS_NM21", "INDUTY": "INDUTY21", "STKPC": "21", "FLCTS_PC": "21", "FLCTS_BT": "21", "UPDT_DATE": "UPDT_DATE21"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsStockExl");
			dataSet_4.parseData({
				"columns": [
					{"name": "ENTRPS_NM"},
					{"name": "INDUTY"},
					{
						"name": "STKPC",
						"dataType": "number"
					},
					{
						"name": "FLCTS_PC",
						"dataType": "number"
					},
					{
						"name": "FLCTS_BT",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "@getFluctuations(STKPC, FLCTS_PC).toFixed(2)"
					},
					{"name": "UPDT_DATE"}
				],
				"rows": [
					{"ENTRPS_NM": "ENTRPS_NM1", "INDUTY": "INDUTY1", "STKPC": "1", "FLCTS_PC": "1", "UPDT_DATE": "UPDT_DATE1"},
					{"ENTRPS_NM": "ENTRPS_NM2", "INDUTY": "INDUTY2", "STKPC": "2", "FLCTS_PC": "2", "UPDT_DATE": "UPDT_DATE2"},
					{"ENTRPS_NM": "ENTRPS_NM3", "INDUTY": "INDUTY3", "STKPC": "3", "FLCTS_PC": "3", "UPDT_DATE": "UPDT_DATE3"},
					{"ENTRPS_NM": "ENTRPS_NM4", "INDUTY": "INDUTY4", "STKPC": "4", "FLCTS_PC": "4", "UPDT_DATE": "UPDT_DATE4"},
					{"ENTRPS_NM": "ENTRPS_NM5", "INDUTY": "INDUTY5", "STKPC": "5", "FLCTS_PC": "5", "UPDT_DATE": "UPDT_DATE5"},
					{"ENTRPS_NM": "ENTRPS_NM6", "INDUTY": "INDUTY6", "STKPC": "6", "FLCTS_PC": "6", "UPDT_DATE": "UPDT_DATE6"},
					{"ENTRPS_NM": "ENTRPS_NM7", "INDUTY": "INDUTY7", "STKPC": "7", "FLCTS_PC": "7", "UPDT_DATE": "UPDT_DATE7"},
					{"ENTRPS_NM": "ENTRPS_NM8", "INDUTY": "INDUTY8", "STKPC": "8", "FLCTS_PC": "8", "UPDT_DATE": "UPDT_DATE8"},
					{"ENTRPS_NM": "ENTRPS_NM9", "INDUTY": "INDUTY9", "STKPC": "9", "FLCTS_PC": "9", "UPDT_DATE": "UPDT_DATE9"},
					{"ENTRPS_NM": "ENTRPS_NM10", "INDUTY": "INDUTY10", "STKPC": "10", "FLCTS_PC": "10", "UPDT_DATE": "UPDT_DATE10"},
					{"ENTRPS_NM": "ENTRPS_NM11", "INDUTY": "INDUTY11", "STKPC": "11", "FLCTS_PC": "11", "UPDT_DATE": "UPDT_DATE11"},
					{"ENTRPS_NM": "ENTRPS_NM12", "INDUTY": "INDUTY12", "STKPC": "12", "FLCTS_PC": "12", "UPDT_DATE": "UPDT_DATE12"},
					{"ENTRPS_NM": "ENTRPS_NM13", "INDUTY": "INDUTY13", "STKPC": "13", "FLCTS_PC": "13", "UPDT_DATE": "UPDT_DATE13"},
					{"ENTRPS_NM": "ENTRPS_NM14", "INDUTY": "INDUTY14", "STKPC": "14", "FLCTS_PC": "14", "UPDT_DATE": "UPDT_DATE14"},
					{"ENTRPS_NM": "ENTRPS_NM15", "INDUTY": "INDUTY15", "STKPC": "15", "FLCTS_PC": "15", "UPDT_DATE": "UPDT_DATE15"},
					{"ENTRPS_NM": "ENTRPS_NM16", "INDUTY": "INDUTY16", "STKPC": "16", "FLCTS_PC": "16", "UPDT_DATE": "UPDT_DATE16"},
					{"ENTRPS_NM": "ENTRPS_NM17", "INDUTY": "INDUTY17", "STKPC": "17", "FLCTS_PC": "17", "UPDT_DATE": "UPDT_DATE17"},
					{"ENTRPS_NM": "ENTRPS_NM18", "INDUTY": "INDUTY18", "STKPC": "18", "FLCTS_PC": "18", "UPDT_DATE": "UPDT_DATE18"},
					{"ENTRPS_NM": "ENTRPS_NM19", "INDUTY": "INDUTY19", "STKPC": "19", "FLCTS_PC": "19", "UPDT_DATE": "UPDT_DATE19"},
					{"ENTRPS_NM": "ENTRPS_NM20", "INDUTY": "INDUTY20", "STKPC": "20", "FLCTS_PC": "20", "UPDT_DATE": "UPDT_DATE20"},
					{"ENTRPS_NM": "ENTRPS_NM21", "INDUTY": "INDUTY21", "STKPC": "21", "FLCTS_PC": "21", "UPDT_DATE": "UPDT_DATE21"},
					{"ENTRPS_NM": "ENTRPS_NM22", "INDUTY": "INDUTY22", "STKPC": "22", "FLCTS_PC": "22", "UPDT_DATE": "UPDT_DATE22"},
					{"ENTRPS_NM": "ENTRPS_NM23", "INDUTY": "INDUTY23", "STKPC": "23", "FLCTS_PC": "23", "UPDT_DATE": "UPDT_DATE23"},
					{"ENTRPS_NM": "ENTRPS_NM24", "INDUTY": "INDUTY24", "STKPC": "24", "FLCTS_PC": "24", "UPDT_DATE": "UPDT_DATE24"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsList");
			dataSet_5.parseData({
				"columns": [
					{"name": "id"},
					{"name": "first_name"},
					{"name": "last_name"},
					{"name": "email"},
					{"name": "gender"},
					{"name": "ip_address"},
					{"name": "join_date"}
				],
				"rows": [
					{"id": "id1", "first_name": "first_name1", "last_name": "last_name1", "email": "email1", "gender": "gender1", "ip_address": "ip_address1", "join_date": "join_date1"},
					{"id": "id2", "first_name": "first_name2", "last_name": "last_name2", "email": "email2", "gender": "gender2", "ip_address": "ip_address2", "join_date": "join_date2"},
					{"id": "id3", "first_name": "first_name3", "last_name": "last_name3", "email": "email3", "gender": "gender3", "ip_address": "ip_address3", "join_date": "join_date3"},
					{"id": "id4", "first_name": "first_name4", "last_name": "last_name4", "email": "email4", "gender": "gender4", "ip_address": "ip_address4", "join_date": "join_date4"},
					{"id": "id5", "first_name": "first_name5", "last_name": "last_name5", "email": "email5", "gender": "gender5", "ip_address": "ip_address5", "join_date": "join_date5"},
					{"id": "id6", "first_name": "first_name6", "last_name": "last_name6", "email": "email6", "gender": "gender6", "ip_address": "ip_address6", "join_date": "join_date6"},
					{"id": "id7", "first_name": "first_name7", "last_name": "last_name7", "email": "email7", "gender": "gender7", "ip_address": "ip_address7", "join_date": "join_date7"},
					{"id": "id8", "first_name": "first_name8", "last_name": "last_name8", "email": "email8", "gender": "gender8", "ip_address": "ip_address8", "join_date": "join_date8"},
					{"id": "id9", "first_name": "first_name9", "last_name": "last_name9", "email": "email9", "gender": "gender9", "ip_address": "ip_address9", "join_date": "join_date9"},
					{"id": "id10", "first_name": "first_name10", "last_name": "last_name10", "email": "email10", "gender": "gender10", "ip_address": "ip_address10", "join_date": "join_date10"},
					{"id": "id11", "first_name": "first_name11", "last_name": "last_name11", "email": "email11", "gender": "gender11", "ip_address": "ip_address11", "join_date": "join_date11"},
					{"id": "id12", "first_name": "first_name12", "last_name": "last_name12", "email": "email12", "gender": "gender12", "ip_address": "ip_address12", "join_date": "join_date12"},
					{"id": "id13", "first_name": "first_name13", "last_name": "last_name13", "email": "email13", "gender": "gender13", "ip_address": "ip_address13", "join_date": "join_date13"},
					{"id": "id14", "first_name": "first_name14", "last_name": "last_name14", "email": "email14", "gender": "gender14", "ip_address": "ip_address14", "join_date": "join_date14"},
					{"id": "id15", "first_name": "first_name15", "last_name": "last_name15", "email": "email15", "gender": "gender15", "ip_address": "ip_address15", "join_date": "join_date15"},
					{"id": "id16", "first_name": "first_name16", "last_name": "last_name16", "email": "email16", "gender": "gender16", "ip_address": "ip_address16", "join_date": "join_date16"},
					{"id": "id17", "first_name": "first_name17", "last_name": "last_name17", "email": "email17", "gender": "gender17", "ip_address": "ip_address17", "join_date": "join_date17"},
					{"id": "id18", "first_name": "first_name18", "last_name": "last_name18", "email": "email18", "gender": "gender18", "ip_address": "ip_address18", "join_date": "join_date18"},
					{"id": "id19", "first_name": "first_name19", "last_name": "last_name19", "email": "email19", "gender": "gender19", "ip_address": "ip_address19", "join_date": "join_date19"},
					{"id": "id20", "first_name": "first_name20", "last_name": "last_name20", "email": "email20", "gender": "gender20", "ip_address": "ip_address20", "join_date": "join_date20"},
					{"id": "id21", "first_name": "first_name21", "last_name": "last_name21", "email": "email21", "gender": "gender21", "ip_address": "ip_address21", "join_date": "join_date21"},
					{"id": "id22", "first_name": "first_name22", "last_name": "last_name22", "email": "email22", "gender": "gender22", "ip_address": "ip_address22", "join_date": "join_date22"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsReq");
			dataSet_6.parseData({
				"columns": [
					{"name": "COL_NM"},
					{"name": "TEXT"}
				],
				"rows": [
					{"COL_NM": "COL_NM1", "TEXT": "TEXT1"},
					{"COL_NM": "COL_NM2", "TEXT": "TEXT2"},
					{"COL_NM": "COL_NM3", "TEXT": "TEXT3"},
					{"COL_NM": "COL_NM4", "TEXT": "TEXT4"},
					{"COL_NM": "COL_NM5", "TEXT": "TEXT5"},
					{"COL_NM": "COL_NM6", "TEXT": "TEXT6"},
					{"COL_NM": "COL_NM7", "TEXT": "TEXT7"},
					{"COL_NM": "COL_NM8", "TEXT": "TEXT8"},
					{"COL_NM": "COL_NM9", "TEXT": "TEXT9"},
					{"COL_NM": "COL_NM10", "TEXT": "TEXT10"},
					{"COL_NM": "COL_NM11", "TEXT": "TEXT11"},
					{"COL_NM": "COL_NM12", "TEXT": "TEXT12"},
					{"COL_NM": "COL_NM13", "TEXT": "TEXT13"},
					{"COL_NM": "COL_NM14", "TEXT": "TEXT14"},
					{"COL_NM": "COL_NM15", "TEXT": "TEXT15"},
					{"COL_NM": "COL_NM16", "TEXT": "TEXT16"},
					{"COL_NM": "COL_NM17", "TEXT": "TEXT17"},
					{"COL_NM": "COL_NM18", "TEXT": "TEXT18"},
					{"COL_NM": "COL_NM19", "TEXT": "TEXT19"},
					{"COL_NM": "COL_NM20", "TEXT": "TEXT20"},
					{"COL_NM": "COL_NM21", "TEXT": "TEXT21"},
					{"COL_NM": "COL_NM22", "TEXT": "TEXT22"},
					{"COL_NM": "COL_NM23", "TEXT": "TEXT23"},
					{"COL_NM": "COL_NM24", "TEXT": "TEXT24"},
					{"COL_NM": "COL_NM25", "TEXT": "TEXT25"},
					{"COL_NM": "COL_NM26", "TEXT": "TEXT26"}
				]
			});
			app.register(dataSet_6);
			var submission_1 = new cpr.protocols.Submission("subGroupingList");
			submission_1.action = "./data/scr/func/group.json";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subTreeList");
			submission_2.action = "./data/scr/func/treecell.json";
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subStockList");
			submission_3.action = "./data/scr/func/stock.json";
			submission_3.addResponseData(dataSet_3, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("subList");
			submission_4.action = "./data/scr/func/default-data.json";
			submission_4.addResponseData(dataSet_5, false);
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("subImp");
			submission_5.action = "/import/excel.do";
			submission_5.mediaType = "multipart/form-data";
			submission_5.addRequestData(dataSet_6);
			submission_5.addResponseData(dataSet_4, false);
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("subExp");
			submission_6.action = "/export/excel_export_file.xlsx";
			submission_6.mediaType = "application/json";
			submission_6.responseType = "blob";
			app.register(submission_6);
			
			app.supportMedia("all and (min-width: 1200px)", "default");
			app.supportMedia("all and (min-width: 850px) and (max-width: 1199px)", "tablet");
			app.supportMedia("all and (max-width: 849px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.spacing = 20;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "다양한 그리드 기능 확인";
	cpr.core.Platform.INSTANCE.register(app);
})();

/*
 * App URI: 201912/tester
 * Source Location: 201912/tester.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("201912/tester", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tester.js
			 * Created at 2019. 12. 2. 오후 5:46:02.
			 *
			 * @author HANS
			 ************************************************/
			  
			//cpr.expression.ExpressionEngine.INSTANCE.registerFunction("getRootDs", function(ctrl){
			//	/** @type cpr.controls.UIControl */
			//	var control = ctrl;
			//	
			//	control.getAppInstance();
			//	return app.getRootAppInstance().lookup("DS_AA_BB");
			//});
			
			
			
			/*
			 * "Button" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
			//	app.lookup("sms4").send();
				
				var map = new naver.maps.Map('map', {
			    useStyleMap: true,
			    zoom: 16,
			    center: new naver.maps.LatLng(37.5666103, 126.9783882)
			});
				var vcEmbPage = new cpr.controls.EmbeddedPage();
				var vsReportTargetUrl = "http://localhost:8080/ClipReport4";
				var postMethod = vcEmbPage.getPostMethod("vsReportTargetUrl");
				
				postMethod.addParameter("crfFilePath", "cmn/reportfile");
				
				
				//보고서 호출 파라미터
				var vcParam = app.lookup("dmParam");
				
				var vsaColNms = vcParam.getColumnNames();
				
				for(var param in vsaColNms) {
					postMethod.addParameter("viewerParameter",param+":="+vcParam.getString(param));
				}
				
				//파라미터 전송(form submit)
				postMethod.submit();
				
				/*
				 * form fild reset (delete all setting parameters)
				 * 초기화
				 */
				postMethod.dispose();
			
			}
			
			
			
			//var mapOptions = {
			//   	 		center: new naver.maps.LatLng(37.3595704, 127.105399),
			//   			 zoom: 10
			//		};
			//
			//		var map = new naver.maps.Map(content, mapOptions);
			//		
			//		/**
			//		 * Access to XMLHttpRequest at '' has been blocked by CORS policy: Response to preflight request 
			//		 * doesn't pass access control check: It does not have HTTP ok status.
			//		 * 위와 같은 에러는,MAPS API는 javascript 환경에서 보안상의 이슈로 CORS(Cross-Origin Resource Sharing)를 허용하지 않습니다.
			//		 * javascript 환경에서 사용하시려면, 동일 도메인을 갖는 backend 서버를 두고, 이 서버에서 API를 호출하는 방식으로 사용 부탁드립니다.
			
			function createDragSourceFeedback(){
				var feedback = new cpr.controls.Output();
				feedback.style.css({
					"opacity" : "0.8",
					"width": "50px",
					"height": "25px",
					"border": "solid 1px red",
					"text-align" : "center",
					"color" : "black",
					"border-radius": "10px",
					"background": "white",
					"box-shadow": "0px 2px 10px #ddd",
					"cursor": "move"
				});
				return feedback;
			}
			
			
			/**
			 * 파라미터의 컨트롤을 드래그 가능하도록 드래그 소스를 지정하는 함수.
			 * @param {cpr.controls.UIControl} control
			 */
			function setDragSource(control){
				var feedback = null;
			//  	var insData = control.getSelectedRow().getRowData();
			  new cpr.controls.DragSource(control, {
				options:{
				  dataType : "text",
				  threadhold: 10 // 10px만큼 이동해야 드래그시작으로 인식
				},
				onDragStart : function(context){
				  context.cursor = "grabbing";
				  feedback = control
			//	  control.style.css("opacity"," 0.5");
			//	  feedback.value = 
				  var actualRect = control.getActualRect();
			//	  					{"width" : "500px", "height" : "25px"};
				  app.floatControl(feedback, cpr.controls.layouts.XYLayout.createConstraintWithRect(actualRect));
				  context.source = null;
				  
				},
				onDragMove : function(context){
				  context.cursor = "grabbing";
				  	var actualRect = context.source.control.getActualRect();
						var newRect = actualRect.getTranslatedByDimension(context.dragDelta);
				  var hansRect = //newRect;
				  {"width" : 500, "height" :25,"left":newRect.left, "top":newRect.top};
				  app.floatControl(feedback,cpr.controls.layouts.XYLayout.createConstraintWithRect(newRect));
			//	  console.log(context.target.detail);
				},
				onDragEnd : function(context){
				  context.cursor = "";
				  feedback.dispose();
				  feedback = null;
			//	  control.style.removeStyle("opacity");
				  
				}
			});
			}
			
			/**
			 * 파라미터로 받은 컨트롤을 드랍가능한 타겟으로 지정하는 함수.
			 * @param {cpr.controls.UIControl} control2
			 */
			function setDropTarget(control2){
			
				new cpr.controls.DropTarget(control2, {
					isImportant : function(source){
						return source.dataType == "text";
					},
					onDragEnter : function(context){
					},
					onDragLeave: function(context) {
					},
					onDragMove : function(context){
			//			console.log(context.);
					},
					onDrop : function(context){
					}
				});
			}
			//app.lookup("grd2").updateRow(rowIndex, rowdata)
			/*
			 * 그리드에서 selection-change 이벤트 발생 시 호출.
			 * detail의 cell 클릭하여 설정된 selectionunit에 해당되는 단위가 선택될 때 발생하는 이벤트.
			 */
			function onGrd1SelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				
			//	setDragSource(app.lookup("grd1"));	
			}
			
			
			/*
			 * 그리드에서 mouseup 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 위에 포인터를 위치한 상태로 마우스 버튼을 뗄 때 발생하는 이벤트.
			 */
			function onGrd2Mouseup(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd2 = e.control;
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
			//	var lcb = app.lookup("lcb1");
				var ea = new cpr.events.CKeyboardEvent("keydown", {content :{
					"key" : 13
				}});
				ea.keyCode = cpr.events.KeyCode.DOWN;
				var ipb = app.lookup("ipb1");
				ipb.focus();
				ea.keyCode == 13;
				ipb.dispatchEvent(ea);
			
			
			
			setDragSource(app.lookup("btn2"));
			
			
			//	var grd = app.lookup("grd1");
				
			//	grd.header.getColumn(0).style.setClasses("ibtn-detail");
			}
			
			
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				console.log(moment("20191215111111111","YYYYMMDDHHmmssSSS").format("YYYY-MM-DD"));
			
			
			}
			
			
			/*
			 * "Button" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dialog", null);
			var dataSet_1 = new cpr.data.DataSet("dsMst");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{
						"name": "column2",
						"dataType": "number"
					},
					{
						"name": "column3",
						"dataType": "number"
					},
					{
						"name": "column4",
						"dataType": "number"
					},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"},
					{
						"name": "level",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsDtl");
			dataSet_2.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"},
					{"name": "column12"},
					{"name": "column13"},
					{"name": "column14"},
					{"name": "column15"},
					{"name": "column16"},
					{"name": "column17"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsVoucher");
			dataSet_3.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "column61"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "column62"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "column63"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "column64"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55", "column6": "column65"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("dsVoucherCard");
			dataSet_4.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{
						"name": "column6",
						"dataType": "number"
					}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51", "column6": "1"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52", "column6": "2"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53", "column6": "3"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54", "column6": "4"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55", "column6": "5"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("dsRegularCheck");
			dataSet_5.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("dsAlwaysCheck");
			dataSet_6.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"},
					{"name": "column11"}
				]
			});
			app.register(dataSet_6);
			
			var dataSet_7 = new cpr.data.DataSet("DS_AA_BB");
			dataSet_7.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{
						"name": "level",
						"dataType": "number"
					}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "level": "1"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "level": "1"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "level": "1"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "level": "1"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "level": "2"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "level": "2"},
					{"column1": "column17", "column2": "column27", "column3": "column37", "level": "3"},
					{"column1": "column18", "column2": "column28", "column3": "column38", "level": "1"},
					{"column1": "column19", "column2": "column29", "column3": "column39", "level": "2"}
				]
			});
			app.register(dataSet_7);
			
			var dataSet_8 = new cpr.data.DataSet("ds1");
			dataSet_8.parseData({
				"columns": [
					{"name": "column1"},
					{
						"name": "column2",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "\"123\""
					}
				],
				"rows": [
					{"column1": ""},
					{"column1": "column12"},
					{"column1": "column13"},
					{"column1": "column14"}
				]
			});
			app.register(dataSet_8);
			var dataMap_1 = new cpr.data.DataMap("dmParam");
			dataMap_1.parseData({});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.action = "datas/dataMst.json";
			submission_1.addResponseData(dataSet_1, false);
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms2");
			submission_2.action = "datas/dataDtl.json";
			submission_2.addResponseData(dataSet_2, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms3");
			submission_3.action = "datas/dataVoucher.json";
			submission_3.addResponseData(dataSet_3, false);
			submission_3.addResponseData(dataSet_4, false);
			submission_3.addResponseData(dataSet_5, false);
			submission_3.addResponseData(dataSet_6, false);
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sms4");
			submission_4.method = "get";
			submission_4.action = "https://naveropenapi.apigw.ntruss.com/map-static/v2/raster";
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var linkedComboBox_1 = new cpr.controls.LinkedComboBox("lcb1");
			(function(linkedComboBox_1){
				linkedComboBox_1.addItem(new cpr.controls.TreeItem("label1", "1", null));
				linkedComboBox_1.addItem(new cpr.controls.TreeItem("label2", "value2", null));
				linkedComboBox_1.addItem(new cpr.controls.TreeItem("label3", "3", "1"));
				linkedComboBox_1.addItem(new cpr.controls.TreeItem("label4", "value4", "1"));
				linkedComboBox_1.addItem(new cpr.controls.TreeItem("label5", "value5", "3"));
				linkedComboBox_1.addItem(new cpr.controls.TreeItem("label6", "value6", null));
			})(linkedComboBox_1);
			linkedComboBox_1.placeholders = [
			];
			container.addChild(linkedComboBox_1, {
				"top": "347px",
				"left": "20px",
				"width": "378px",
				"height": "126px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.value = "1";
			if(typeof onIpb1Keydown == "function") {
				inputBox_1.addEventListener("keydown", onIpb1Keydown);
			}
			container.addChild(inputBox_1, {
				"top": "453px",
				"left": "518px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"top": "366px",
				"left": "460px",
				"width": "103px",
				"height": "32px"
			});
			
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "Output";
			container.addChild(output_1, {
				"top": "408px",
				"left": "586px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "Button";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_2, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "tester";
	cpr.core.Platform.INSTANCE.register(app);
})();

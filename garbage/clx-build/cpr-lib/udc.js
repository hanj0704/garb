/// start - udc.aaa.AppStack
/*
 * UDC Qualified Name: udc.aaa.AppStack
 * App URI: udc/aaa/AppStack
 * Source Location: udc/aaa/AppStack.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/aaa/AppStack", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * AppStack.js
			 * Created at 2020. 2. 7. 오전 10:39:29.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
		}
	});
	internalApp.title = "AppStack";
	
	// Type declaration for AppStack
	cpr.utils.Util.ensurePackage("udc.aaa").AppStack = function(id){
		cpr.controls.UDCBase.call(this, "udc.aaa.AppStack", internalApp, id);
	};
	
	udc.aaa.AppStack.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.aaa.AppStack.prototype, "type", {
		get : function(){
			return "udc.aaa.AppStack";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.aaa.AppStack
/// start - udc.aaa.customCbxGrp
/*
 * UDC Qualified Name: udc.aaa.customCbxGrp
 * App URI: udc/aaa/customCbxGrp
 * Source Location: udc/aaa/customCbxGrp.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/aaa/customCbxGrp", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * customCbxGrp.js
			 * Created at 2021. 10. 25. 오전 11:09:39.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			var msOldValues = "";
			function getValue(){
				
				var vsValue = "";
				var vsDelimeter = app.getAppProperty("delimeter");
					
				var vsReturnValue = app.getContainer().getChildren().filter(function(each){
					return each instanceof cpr.controls.CheckBox;
				}).filter(function(each){
					return each.checked == true;
				}).map(function(each){
					return each.trueValue;
				}).join(vsDelimeter);
				return vsReturnValue;
			}
			/**
			 * 
			 * @param {String} psLabel
			 * @param {String} psTrueValue
			 * @param {any} psFalseValue
			 */
			function registerCheckBox(psLabel, psTrueValue, psFalseValue) {
				
				var vcNewCbx = new cpr.controls.CheckBox();
				
				vcNewCbx.text = psLabel;
				vcNewCbx.trueValue = psTrueValue;
				if(psFalseValue != null){
					
					vcNewCbx.falseValue = psFalseValue;
				}
				
				vcNewCbx.addEventListener("before-value-change",onCbxBeforeValueChange);
				vcNewCbx.addEventListener("value-change",onCbxValueChange);
				
				return vcNewCbx;
			}
			
			
			function onCbxBeforeValueChange(/*cpr.events.CValueChangeEvent*/e){
				
				/** @type cpr.controls.CheckBox */
				var control = e.control;
				
				var vsDelimeter = app.getAppProperty("delimeter");
				
				var vsValues = getValue();
				var vaValues = vsValues.split(vsDelimeter);
				if(ValueUtil.fixNull(vsValues) == ""){
					
					vaValues = [];
				}
				var vsText = control.trueValue;
				var vnIndex = control.getParent().getChildren().indexOf(control);
				
				if(e.newValue == control.trueValue){
					
					if(vaValues.indexOf(vsText) != -1) {
						var err = new Error("value is Invalid");
						throw err;
					} else {
						vaValues.splice(vnIndex, 0, vsText);
					}
				} else {
					if(vaValues.indexOf(vsText) == -1) {
						
						var err = new Error("something is wrong");
						throw err;
					} else {
						
						vaValues.splice(vnIndex,1);
					}
				}
				var vsNewValue = vaValues.join(vsDelimeter);
				var voBeforeSelectionChangeEvt = new cpr.events.CSelectionEvent("before-selection-change",{
					newSelection : vsNewValue,
					oldSelection : vsValues
				});
				
				var vbIsPreventDefaulted = app.getHost().dispatchEvent(voBeforeSelectionChangeEvt);
				
				if(!vbIsPreventDefaulted) {
					
					e.preventDefault();
					control.value = e.oldValue;
				}
				
			}
			
			function onCbxValueChange(/*cpr.events.CValueChangeEvent*/e){
				
				/** @type cpr.controls.CheckBox */
				var control = e.control;
				
				var vsDelimeter = app.getAppProperty("delimeter");
				
				var vsValues = getValue();
				var vaValues = vsValues.split(vsDelimeter);
				if(ValueUtil.fixNull(vsValues) == ""){
					
					vaValues = [];
				}
				var vsText = control.trueValue;
				var vnIndex = control.getParent().getChildren().indexOf(control);
			//	if(e.newValue == control.trueValue){
			//		
			//		if(vaValues.indexOf(vsText) != -1) {
			//			var err = new Error("value is Invalid");
			//			throw err;
			//		} else {
			//			vaValues.splice(vnIndex, 0, vsText);
			//		}
			//	} else {
			//		if(vaValues.indexOf(vsText) == -1) {
			//			
			//			var err = new Error("something is wrong");
			//			throw err;
			//		} else {
			//			
			//			vaValues.splice(vnIndex,1);
			//		}
			//	}
				
				var vsNewValue = vaValues.join(vsDelimeter);
				var voSelectionChangeEvt = new cpr.events.CSelectionEvent("selection-change",{
					newSelection : vsNewValue,
					oldSelection : msOldValues
				});
				
				var vbIsPreventDefaulted = app.getHost().dispatchEvent(voSelectionChangeEvt);
				
				app.setAppProperty("value", vsNewValue,false);
				
			}
			
			/**
			 * 
			 * @param {cpr.data.DataSet} pcDa
			 */
			function monitoringListBuild (pcDa){
				
				var vcDataSet = pcDa;
				
				var vsLabel = app.getAppProperty('labelColumn');
				var vsValue = app.getAppProperty("valueColumn");
				
				if(vcDataSet.getRowCount() > 0){
					
					app.getContainer().removeAllChildren();
					vcDataSet.forEachOfUnfilteredRows(function(dataRow){
						
						var vcNewCbx = registerCheckBox(dataRow.getValue(vsLabel), dataRow.getValue(vsValue));
						
						
						app.getContainer().addChild(vcNewCbx, {
							width : "100px",
							height : "30px",
							autoSize : "both"
						});
					});
				} else {
					
					vcDataSet.addEventListenerOnce("load", function(ev){
						
						monitoringListBuild(ev.control);
					})
				}
				
			}
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				/** @type cpr.data.DataSet */
				var vcDs = app.getAppProperty("dataSet");
				monitoringListBuild(vcDs);
				console.log("LOADED");
			}
			
			
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				console.log(e.property);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			app.declareBindableAppProperty("delimeter", ",");
			app.declareAppProperty("dataSet", null);
			app.declareBindableAppProperty("labelColumn", null);
			app.declareBindableAppProperty("valueColumn", null);
			app.declareAppProperty("filterExp", null);
			app.declareAppProperty("enabledItemExp", null);
			app.declareAppProperty("displayExp", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			container.setLayout(flowLayout_1);
			
			// UI Configuration
			var checkBoxGroup_1 = new cpr.controls.CheckBoxGroup("cbg1");
			checkBoxGroup_1.visible = false;
			(function(checkBoxGroup_1){
			})(checkBoxGroup_1);
			container.addChild(checkBoxGroup_1, {
				"width": "200px",
				"height": "30px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "customCbxGrp";
	
	// Type declaration for customCbxGrp
	cpr.utils.Util.ensurePackage("udc.aaa").customCbxGrp = function(id){
		cpr.controls.UDCBase.call(this, "udc.aaa.customCbxGrp", internalApp, id);
	};
	
	udc.aaa.customCbxGrp.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "type", {
		get : function(){
			return "udc.aaa.customCbxGrp";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "delimeter", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("delimeter");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("delimeter", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "labelColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("labelColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("labelColumn", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "valueColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("valueColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("valueColumn", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "filterExp", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("filterExp");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("filterExp", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "enabledItemExp", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("enabledItemExp");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("enabledItemExp", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.customCbxGrp.prototype, "displayExp", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("displayExp");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("displayExp", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.aaa.customCbxGrp
/// start - udc.aaa.expUd
/*
 * UDC Qualified Name: udc.aaa.expUd
 * App URI: udc/aaa/expUd
 * Source Location: udc/aaa/expUd.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/aaa/expUd", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * expUd.js
			 * Created at 2021. 9. 10. 오후 5:27:38.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("newProperty1", null);
			app.declareBindableAppProperty("newProperty2", "가가가");
			app.declareAppProperty("score", null);
			app.declareAppProperty("newProperty4", null);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [{
					"name": "column1",
					"defaultValue": "qqqq"
				}]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "Output";
			output_1.bind("value").toAppProperty("newProperty1");
			container.addChild(output_1, {
				"top": "57px",
				"left": "20px",
				"width": "222px",
				"height": "154px"
			});
			
			var output_2 = new cpr.controls.Output("opt2");
			output_2.bind("value").toAppProperty("newProperty2");
			container.addChild(output_2, {
				"top": "221px",
				"left": "20px",
				"width": "234px",
				"height": "43px"
			});
		}
	});
	internalApp.title = "expUd";
	
	// Type declaration for expUd
	cpr.utils.Util.ensurePackage("udc.aaa").expUd = function(id){
		cpr.controls.UDCBase.call(this, "udc.aaa.expUd", internalApp, id);
	};
	
	udc.aaa.expUd.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.aaa.expUd.prototype, "type", {
		get : function(){
			return "udc.aaa.expUd";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.aaa.expUd.prototype, "newProperty1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty1", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.expUd.prototype, "newProperty2", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty2");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty2", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.expUd.prototype, "score", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("score");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("score", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.expUd.prototype, "newProperty4", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty4");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty4", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.aaa.expUd
/// start - udc.aaa.hanj
/*
 * UDC Qualified Name: udc.aaa.hanj
 * App URI: udc/aaa/hanj
 * Source Location: udc/aaa/hanj.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/aaa/hanj", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hanj.js
			 * Created at 2021. 7. 13. 오후 3:40:41.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 루트 컨테이너에서 before-unload 이벤트 발생 시 호출.
			 * 앱이 언로드되기 전에 발생하는 이벤트 입니다. 취소할 수 있습니다.
			 */
			function onBodyBeforeUnload(/* cpr.events.CEvent */ e){
				console.log("before-unload");
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("newProperty1", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "im udc";
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "178px",
				"height": "39px"
			});
			
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "Output";
			output_1.bind("value").toAppProperty("newProperty1");
			output_1.style.bind("background-color").toExpression([
				"switch(@newProperty1){",
				"\tcase \"1\" : \"red\"",
				"\tcase \"가가가\" : \"purple\"",
				"\tdefault : \"blue\"",
				"}"
			].join("\n"));
			container.addChild(output_1, {
				"top": "69px",
				"left": "20px",
				"width": "260px",
				"height": "221px"
			});
			if(typeof onBodyBeforeUnload == "function"){
				app.addEventListener("before-unload", onBodyBeforeUnload);
			}
		}
	});
	internalApp.title = "hanj";
	
	// Type declaration for hanj
	cpr.utils.Util.ensurePackage("udc.aaa").hanj = function(id){
		cpr.controls.UDCBase.call(this, "udc.aaa.hanj", internalApp, id);
	};
	
	udc.aaa.hanj.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.aaa.hanj.prototype, "type", {
		get : function(){
			return "udc.aaa.hanj";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.aaa.hanj.prototype, "newProperty1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty1", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.aaa.hanj
/// start - udc.aaa.prog
/*
 * UDC Qualified Name: udc.aaa.prog
 * App URI: udc/aaa/prog
 * Source Location: udc/aaa/prog.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/aaa/prog", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * prog.js
			 * Created at 2021. 3. 8. 오후 1:40:56.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var progress_1 = new cpr.controls.Progress("pgr1");
			progress_1.value = "50";
			container.addChild(progress_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "25%";
			container.addChild(output_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "prog";
	
	// Type declaration for prog
	cpr.utils.Util.ensurePackage("udc.aaa").prog = function(id){
		cpr.controls.UDCBase.call(this, "udc.aaa.prog", internalApp, id);
	};
	
	udc.aaa.prog.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.aaa.prog.prototype, "type", {
		get : function(){
			return "udc.aaa.prog";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.aaa.prog
/// start - udc.aaa.slid
/*
 * UDC Qualified Name: udc.aaa.slid
 * App URI: udc/aaa/slid
 * Source Location: udc/aaa/slid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/aaa/slid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * slid.js
			 * Created at 2020. 11. 10. 오전 10:07:31.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "-"+app.lookup("ipb1").value;
			};
			
			exports.hansMan = function(){
				console.log("HANSMAN");
				console.log(app.getAppProperty("vals"));
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				console.log("LOADED");
				console.log(app.getAppProperty("vals"));
			}
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				console.log("PROPERTY_CHANGE");
				console.log(app.getAppProperty("vals"));
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("vals", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.bind("value").toAppProperty("vals");
			container.addChild(inputBox_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "slid";
	
	// Type declaration for slid
	cpr.utils.Util.ensurePackage("udc.aaa").slid = function(id){
		cpr.controls.UDCBase.call(this, "udc.aaa.slid", internalApp, id);
	};
	
	udc.aaa.slid.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.aaa.slid.prototype, "type", {
		get : function(){
			return "udc.aaa.slid";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.aaa.slid.prototype, "vals", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("vals");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("vals", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.aaa.slid
/// start - udc.aaa.UdcComGridButtons
/*
 * UDC Qualified Name: udc.aaa.UdcComGridButtons
 * App URI: udc/aaa/UdcComGridButtons
 * Source Location: udc/aaa/UdcComGridButtons.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/aaa/UdcComGridButtons", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * GridButtons.js
			 * Created at 2020. 4. 20. 오후 6:16:36.
			 *
			 * @author 1073903
			 ************************************************/
			
			var util = createCommonUtil();
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * UDC의 AppInstance를 반환합니다.
			 */
			exports.getUDCApp = function() {
				return app;
			};
			
			
			/*
			 * "행추가" 버튼(btnNew)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnNewClick(/* cpr.events.CMouseEvent */ e){
				//해당 UDC를 사용하는 부모App
				//TODO  테스트를 위한 테스트 코딩 insert 시 팝업으로 띄울 시 소스 수정 필요
				
				var vsInsertRowYn = app.getAppProperty("insertRowYn");
				if (vsInsertRowYn) {
					var hostApp = app.getHostAppInstance();
					
					
					var vcGrid = app.getAppProperty("grid");
					var vsFocusColNm = app.getAppProperty("insertedFocusColNm");
					
					var event = new cpr.events.CUIEvent("insertRow");
					
					var voRow;
					if(vcGrid instanceof cpr.controls.Grid){
						voRow = util.Grid.insertRow(hostApp, vcGrid.id, vsFocusColNm);
					}
					
					event.row = voRow ? voRow : null;
					event.rowIndex = voRow ? voRow.getIndex() : -1;
					
					
					app.dispatchEvent(event);		
				} else {
					//업무단에서 직접 구현
					var event = new cpr.events.CUIEvent("insertRow");
					app.dispatchEvent(event);
				}
				
			}
			
			
			/*
			 * "행삭제" 버튼(btnDel)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDelClick(/* cpr.events.CMouseEvent */ e){
				var event = new cpr.events.CUIEvent("deleteRow");
				
				var delEvent = app.dispatchEvent(event);
			}
			
			
			/*
			 * "저장" 버튼(btnSave)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(/* cpr.events.CMouseEvent */ e){
				var event = new cpr.events.CUIEvent("save");
				
				app.dispatchEvent(event);
			}
			
			var pgSize = 10000;
			var currCnt = 0;
			var curCount = 0;
			var maxCount = 0;
			/*
			 * "다운로드" 버튼(btnExcel)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnExcelClick(/* cpr.events.CMouseEvent */ e){
				var event = new cpr.events.CUIEvent("excelDownload");
				var rslt = app.dispatchEvent(event);
				if(!rslt) return false;
				
				var hostApp = app.getHostAppInstance();
				
				var excelDataSub = app.getAppProperty("excelExportSubId");
				var fileName     = app.getAppProperty("excelExportTitle"); 
				var excelDsId    = app.getAppProperty("excelExportDsId");
				
				hostApp.lookup(excelDsId).clear();
				currCnt = 0;
				curCount= 0;
				
				hostApp.lookup(excelDataSub).addEventListener("submit-done", function(){
					currCnt = currCnt + curCount;
					
					if(maxCount == 0) maxCount = hostApp.lookup(excelDsId).getValue(0, "PAGING_TOTAL_CNT");
					
					if(currCnt < maxCount) {
						var loadMask = app.getRootAppInstance().lookup("__loadmask_pro__")
						if(loadMask) {
							loadMask.setAppProperty("max", maxCount);
							loadMask.setAppProperty("value", currCnt);
						}
						
						doExcelExportData(hostApp, excelDataSub);
					}else{
						var submission = app.lookup("subDirectExport");
						
						var fileType = "xlsx";			
						
						submission.action = "cleopatraFileExport/"+ fileName.replace("\/", "") + fileType +".do";
			//			submission.addParameter("fileName", fileName.replace("\/", "") +".xlsx");
						var exportData = cpr.utils.ExportUtil.getExportData(hostApp.lookup(excelDsId));
						
						var colNms = hostApp.lookup(excelDsId).getColumnNames();
						
						var HeaderText = [];
						var comment = "";
						for(var i = 0; i < colNms.length; i++) {
							comment = ValueUtil.isNull(hostApp.lookup(excelDsId).getColumn(colNms[i]).getHeader().info) ? colNms[i] : hostApp.lookup(excelDsId).getColumn(colNms[i]).getHeader().info ;
							
							HeaderText.push(comment);
						};
						
						exportData["rowgroups"][0]["data"][0] = HeaderText;
						submission.setRequestObject(exportData);
						util.Submit.send(app, "subDirectExport", function(){
							hostApp.lookup(excelDataSub).removeEventListeners("submit-done");
						});
			
			
					}	
				});
				
				doExcelExportData(hostApp, excelDataSub)
			};
			
			
			function doExcelExportData(hostApp, submission) {
				curCount = maxCount - currCnt > pgSize ? pgSize : maxCount - currCnt
				
				if(curCount == 0) curCount = pgSize;
				util.Submit.send(hostApp, submission, function(){
					
				}, curCount, true, true, null,null,"pro");
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				
				var grp = app.lookup("grpContent");
				
				if(e.property == "btnSaveVisible") {
					grp.getLayout().setColumnVisible(4, app.getAppProperty("btnSaveVisible"));
				}else if(e.property == "btnAddRowVisible") {
					grp.getLayout().setColumnVisible(2, app.getAppProperty("btnAddRowVisible"));
				}else if(e.property == "btnDelRowVisible") {
					grp.getLayout().setColumnVisible(3, app.getAppProperty("btnDelRowVisible"));
				}else if(e.property == "btnExcelVisible") {
					grp.getLayout().setColumnVisible(1, app.getAppProperty("btnExcelVisible"));
				}
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var hostApp = app.getHostAppInstance();
				
				var hostDsId = app.getAppProperty("excelExportDsId");
				
				if(hostDsId) {
					var hostDs = hostApp.lookup(app.getAppProperty("excelExportDsId"));
					
					if(hostDs) {
						maxCount = hostDs.getValue(0, "PAGING_TOTAL_CNT");
						
						if(maxCount == null) maxCount = 0;
					}
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("grid", null);
			app.declareBindableAppProperty("btnSaveVisible", true);
			app.declareBindableAppProperty("btnAddRowVisible", true);
			app.declareBindableAppProperty("btnDelRowVisible", true);
			app.declareBindableAppProperty("btnExcelVisible", true);
			app.declareAppProperty("insertedFocusColNm", null);
			app.declareAppProperty("excelExportTitle", null);
			app.declareAppProperty("excelExportDsId", null);
			app.declareAppProperty("excelExportSubId", null);
			app.declareAppProperty("insertRowYn", true);
			var submission_1 = new cpr.protocols.Submission("subDirectExport");
			submission_1.mediaType = "application/json";
			submission_1.responseType = "blob";
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpContent");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "3px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "73px", "65px", "65px", "55px"]);
			formLayout_1.setRows(["24px", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btnExcel");
				button_1.value = "다운로드";
				button_1.style.setClasses(["btnExcel"]);
				if(typeof onBtnExcelClick == "function") {
					button_1.addEventListener("click", onBtnExcelClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button("btnAddRow");
				button_2.value = "행추가";
				button_2.style.setClasses(["btnAddRow"]);
				if(typeof onBtnNewClick == "function") {
					button_2.addEventListener("click", onBtnNewClick);
				}
				container.addChild(button_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button("btnDelRow");
				button_3.value = "행삭제";
				button_3.style.setClasses(["btnDelRow"]);
				if(typeof onBtnDelClick == "function") {
					button_3.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_3, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var button_4 = new cpr.controls.Button("btnSave");
				button_4.value = "저장";
				button_4.style.setClasses(["btnSave"]);
				if(typeof onBtnSaveClick == "function") {
					button_4.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_4, {
					"colIndex": 4,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"right": "0px",
				"left": "0px",
				"height": "24px",
				"top": "calc(50% - 12px)"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "공통_그리드버튼(UdcComGridButtons)";
	
	// Type declaration for UdcComGridButtons
	cpr.utils.Util.ensurePackage("udc.aaa").UdcComGridButtons = function(id){
		cpr.controls.UDCBase.call(this, "udc.aaa.UdcComGridButtons", internalApp, id);
	};
	
	udc.aaa.UdcComGridButtons.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "type", {
		get : function(){
			return "udc.aaa.UdcComGridButtons";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "grid", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grid");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grid", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "btnSaveVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("btnSaveVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("btnSaveVisible", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "btnAddRowVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("btnAddRowVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("btnAddRowVisible", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "btnDelRowVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("btnDelRowVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("btnDelRowVisible", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "btnExcelVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("btnExcelVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("btnExcelVisible", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "insertedFocusColNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("insertedFocusColNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("insertedFocusColNm", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "excelExportTitle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("excelExportTitle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("excelExportTitle", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "excelExportDsId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("excelExportDsId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("excelExportDsId", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "excelExportSubId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("excelExportSubId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("excelExportSubId", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.UdcComGridButtons.prototype, "insertRowYn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("insertRowYn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("insertRowYn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.aaa.UdcComGridButtons
/// start - udc.aaa.verticalSlider
/*
 * UDC Qualified Name: udc.aaa.verticalSlider
 * App URI: udc/aaa/verticalSlider
 * Source Location: udc/aaa/verticalSlider.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/aaa/verticalSlider", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * verticalSlider.js
			 * Created at 2020. 11. 20. 오전 9:29:32.
			 *
			 * @author HANS
			 ************************************************/
			
			var vnIntervalTime = 3000;
			var vnOutputHeight = 35;
			var vaColumnDatas;
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			var voIntervalObj;
			var vnIndex = 0;
			function intervalFunc(){
			
				app.getContainer().adjustScroll(0,vnOutputHeight+5,0.3);
				
				if(vnIndex !=0){
					
				setTimeout(function(){
					
					app.getContainer().reorderChild(app.getContainer().getChildren()[0], 20);
				}, 300);
				}
				vnIndex++;
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				/** @type cpr.data.DataSet */
				var vcDs = app.getAppProperty("dataSet");
				
				var vsTargetColNm = app.getAppProperty("targetColNm");
				
					vaColumnDatas = vcDs.getColumnData(vsTargetColNm);		
			
					vaColumnDatas.forEach(function(each,idx){
						
						var vcNewOutput = new cpr.controls.Output();
						vcNewOutput.value = each;
						var voContainer = app.getContainer();
						
						voContainer.addChild(vcNewOutput, {
							width : "100px",
							height : vnOutputHeight+"px",
							autoSize : "width"
						});
					});
				
				voIntervalObj = setInterval(intervalFunc, vnIntervalTime);
			}
			
			
			/*
			 * 루트 컨테이너에서 unload 이벤트 발생 시 호출.
			 * 앱이 언로드된 후 발생하는 이벤트입니다.
			 */
			function onBodyUnload(/* cpr.events.CEvent */ e){
				clearInterval(voIntervalObj);
			}
			
			
			/*
			 * 루트 컨테이너에서 mouseenter 이벤트 발생 시 호출.
			 * 마우스 포인터가 컨트롤 위에 진입할 때 발생하는 이벤트.
			 */
			function onBodyMouseenter(/* cpr.events.CMouseEvent */ e){
				clearInterval(voIntervalObj);
			}
			
			
			/*
			 * 루트 컨테이너에서 mouseleave 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 및 컨트롤의 자식 영역 바깥으로 마우스 포인터를 이동할 때 발생하는 이벤트.
			 */
			function onBodyMouseleave(/* cpr.events.CMouseEvent */ e){
				
				voIntervalObj = setInterval(intervalFunc, vnIntervalTime);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("apakewlem", null);
			app.declareAppProperty("newProperty1", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.scrollable = false;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyUnload == "function"){
				app.addEventListener("unload", onBodyUnload);
			}
			if(typeof onBodyMouseenter == "function"){
				app.getContainer().addEventListener("mouseenter", onBodyMouseenter);
			}
			if(typeof onBodyMouseleave == "function"){
				app.getContainer().addEventListener("mouseleave", onBodyMouseleave);
			}
		}
	});
	internalApp.title = "verticalSlider";
	
	// Type declaration for verticalSlider
	cpr.utils.Util.ensurePackage("udc.aaa").verticalSlider = function(id){
		cpr.controls.UDCBase.call(this, "udc.aaa.verticalSlider", internalApp, id);
	};
	
	udc.aaa.verticalSlider.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.aaa.verticalSlider.prototype, "type", {
		get : function(){
			return "udc.aaa.verticalSlider";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.aaa.verticalSlider.prototype, "apakewlem", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("apakewlem");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("apakewlem", newValue, true);
		}
	});
	Object.defineProperty(udc.aaa.verticalSlider.prototype, "newProperty1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty1", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.aaa.verticalSlider
/// start - udc.abcc
/*
 * UDC Qualified Name: udc.abcc
 * App URI: udc/abcc
 * Source Location: udc/abcc.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/abcc", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * abcc.js
			 * Created at 2020. 4. 16. 오후 4:23:58.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				app.lookup("ipb1").value = app.getAppProperty("value");
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			container.addChild(inputBox_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "abcc";
	
	// Type declaration for abcc
	cpr.utils.Util.ensurePackage("udc").abcc = function(id){
		cpr.controls.UDCBase.call(this, "udc.abcc", internalApp, id);
	};
	
	udc.abcc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.abcc.prototype, "type", {
		get : function(){
			return "udc.abcc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.abcc.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.abcc
/// start - udc.appHeader
/*
 * UDC Qualified Name: udc.appHeader
 * App URI: udc/appHeader
 * Source Location: udc/appHeader.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/appHeader", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var util = createCommonUtil();
			
			var openedByChange = false;
			
			var mbCollapsed = false;
			var mnOriginCtrlHeight = "0px";
			var maResizeCtrlsConstraint = [];
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				//어플리케이션 메뉴 정보
				var voMenuInfo = util.Auth.getMenuInfo(app); 
				//어플리케이션 타이틀 셋팅
				var vcTitle = app.lookup("optTitle");
				var vcPgmTitle = app.lookup("ipbPgmId");
			
				var hostApp = app.getHostAppInstance();
				if(!util.Dialog.isPopup(hostApp)){
					vcPgmTitle.value = voMenuInfo.get("PGM_ID");
					
					if(hostApp.targetScreen.name == "mobile" || hostApp.targetScreen.name == "tablet"){
						util.Control.setVisible(app, false, "ipbPgmId");
					}
			
					if(!(hostApp.getContainer().getLayout() instanceof cpr.controls.layouts.FormLayout)){
						hostApp.getContainer().style.css("min-width", "1320px");
						hostApp.getContainer().style.css("min-height", "680px");
					}
					
					var vcGrpMenuPath = app.lookup("grpMenuPath");
					
					
					var vnIndex = 0;
				}
				
				
				//그리드 초기화
				//그리드ID가 지정된 경우가 아니면... 화면 내의 모든 그리드를 대상으로 초기화 작업을 수행한다.
				var vaGridIds = [];
				if(!ValueUtil.isNull(app.getAppProperty("gridIds"))){
					vaGridIds = ValueUtil.split(app.getAppProperty("gridIds"), ",");
				}else{
					vaGridIds = util.Group.getAllChildrenByType(hostApp, "grid");
				}
				util.Grid.init(hostApp, vaGridIds);
			}
			
			
			
			/**
			 * 헤더 신규/삭제/저장 버튼 활성/비활성화
			 * @param {Boolean} pbEnable
			 * @param {Array} paStatus [I:신규, D:삭제, D:저장]
			 */
			exports.setEnableCtrls = function(pbEnable, paStatus){
			//	var vaBtnIds = null;
			//	if(ValueUtil.isNull(paStatus)){
			//		vaBtnIds = ["btnNew", "btnDelete", "btnSave"];
			//	}else{
			//		vaBtnIds = new Array();
			//		for(var i = 0; i < paStatus.length; i++){
			//			if("I" == paStatus[i]){
			//				vaBtnIds.push("btnNew");
			//			}else if("D" == paStatus[i]){
			//				vaBtnIds.push("btnDelete");
			//			}else if("S" == paStatus[i]){
			//				vaBtnIds.push("btnSave");
			//			}
			//		}
			//	}
			//	
			//	if(pbEnable && app.lookup("grpButtons").enabled === false){
			//		util.Control.setEnable(app, true, "grpButtons");
			//	}
			//	
			//	util.Control.setEnable(app, pbEnable, vaBtnIds);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("searchBoxId", "grpSearch");
			app.declareBindableAppProperty("gridIds", null);
			app.declareBindableAppProperty("groupBoxIds", "grpData");
			app.declareBindableAppProperty("treeIds", null);
			app.declareBindableAppProperty("freeformIds", null);
			app.declareBindableAppProperty("expandCtrlIds", null);
			app.declareAppProperty("grid", null);
			
			app.supportMedia("all and (min-width: 1320px)", "smuis");
			app.supportMedia("all and (min-width: 1020px) and (max-width: 1319px)", "default");
			app.supportMedia("all and (min-width: 760px) and (max-width: 1019px)", "tablet");
			app.supportMedia("all and (max-width: 759px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var notifier_1 = new cpr.controls.Notifier("notiInfo");
			notifier_1.maxNotifyCount = 1;
			notifier_1.infoDelay = 3000;
			notifier_1.style.css({
				"text-align" : "right"
			});
			container.addChild(notifier_1, {
				"right": "35px",
				"width": "252px",
				"height": "20px",
				"top": "calc(50% - 10px)"
			});
			
			var output_1 = new cpr.controls.Output("optAppMsg");
			output_1.style.css({
				"color" : "#0000FF",
				"text-align" : "right"
			});
			if(typeof onOptAppMsgDblclick == "function") {
				output_1.addEventListener("dblclick", onOptAppMsgDblclick);
			}
			container.addChild(output_1, {
				"right": "35px",
				"width": "115px",
				"height": "28px",
				"top": "calc(50% - 14px)"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipbPgmId");
			inputBox_1.visible = false;
			inputBox_1.readOnly = true;
			inputBox_1.style.css({
				"border-right-style" : "none",
				"background-color" : "transparent",
				"color" : "#F3F7F9",
				"border-left-style" : "none",
				"border-bottom-style" : "none",
				"border-top-style" : "none"
			});
			container.addChild(inputBox_1, {
				"width": "150px",
				"height": "28px",
				"left": "calc(50% - 75px)",
				"top": "calc(50% - 14px)"
			});
			
			var button_1 = new cpr.controls.Button("btnCollapse");
			button_1.style.setClasses(["btn-header-minus"]);
			if(typeof onBtnCollapseClick == "function") {
				button_1.addEventListener("click", onBtnCollapseClick);
			}
			if(typeof onBtnCollapseAnimationend == "function") {
				button_1.addEventListener("animationend", onBtnCollapseAnimationend);
			}
			container.addChild(button_1, {
				"right": "5px",
				"width": "30px",
				"height": "28px",
				"top": "calc(50% - 14px)"
			});
			
			var group_1 = new cpr.controls.Container("grpMenuPath");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.setColumns(["1fr", "20px", "10px", "10px", "10px", "10px", "20px"]);
			formLayout_1.setColumnAutoSizing(2, true);
			formLayout_1.setColumnAutoSizing(3, true);
			formLayout_1.setColumnAutoSizing(4, true);
			formLayout_1.setColumnAutoSizing(5, true);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_2 = new cpr.controls.Output("optUnitTestPopup");
				output_2.visible = false;
				output_2.style.css({
					"background-repeat" : "no-repeat",
					"background-image" : "url('../theme/blue/images/button/icon_home.png')",
					"background-position" : "center",
					"text-align" : "center"
				});
				if(typeof onOutputDblclick == "function") {
					output_2.addEventListener("dblclick", onOutputDblclick);
				}
				container.addChild(output_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "1px",
				"right": "34px",
				"left": "0px",
				"height": "29px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyScreenChange == "function"){
				app.addEventListener("screen-change", onBodyScreenChange);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "appHeader";
	
	// Type declaration for appHeader
	cpr.utils.Util.ensurePackage("udc").appHeader = function(id){
		cpr.controls.UDCBase.call(this, "udc.appHeader", internalApp, id);
	};
	
	udc.appHeader.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.appHeader.prototype, "type", {
		get : function(){
			return "udc.appHeader";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.appHeader.prototype, "searchBoxId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("searchBoxId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("searchBoxId", newValue, true);
		}
	});
	Object.defineProperty(udc.appHeader.prototype, "gridIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridIds", newValue, true);
		}
	});
	Object.defineProperty(udc.appHeader.prototype, "groupBoxIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("groupBoxIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("groupBoxIds", newValue, true);
		}
	});
	Object.defineProperty(udc.appHeader.prototype, "treeIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("treeIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("treeIds", newValue, true);
		}
	});
	Object.defineProperty(udc.appHeader.prototype, "freeformIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("freeformIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("freeformIds", newValue, true);
		}
	});
	Object.defineProperty(udc.appHeader.prototype, "expandCtrlIds", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("expandCtrlIds");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("expandCtrlIds", newValue, true);
		}
	});
	Object.defineProperty(udc.appHeader.prototype, "grid", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grid");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grid", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.appHeader
/// start - udc.AppStack
/*
 * UDC Qualified Name: udc.AppStack
 * App URI: udc/AppStack
 * Source Location: udc/AppStack.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/AppStack", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * AppStack.js
			 * Created at 2018. 10. 24. 오전 11:13:46.
			 *
			 * @author jeeeyul
			 ************************************************/
			var lastKnownStateId = 0;
			
			/** 브라우저의 히스토리와 동기화 중인지 여부. */
			var historySynchronized = false;
			
			/**
			 * 각 앱의 정보를 담은 스택 엘리먼트 객체.
			 * 
			 * @param {cpr.controls.EmbeddedApp} embeddedApp 임베디드 앱.
			 * @param {(cpr.core.AppInstance)=>void} init (Optional) 초기화 함수.
			 * @param {Boolean} keepContent (Optional) 다른 앱이 푸시될 때, 상태를 유지할 지 여부. 기본값 false
			 * 
			 * @constructor
			 */
			function StackInfo(embeddedApp, init) {
				this.init = init;
				this.embeddedApp = embeddedApp;
				this.state = {
					"appId": embeddedApp.app.id,
					"id": lastKnownStateId++
				};
			}
			
			/**
			 * 현재 앱 스택.
			 * @type StackInfo[]
			 */
			var stack = [];
			
			/**
			 * 앞으로 가기 앱 스택.
			 * @type StackInfo[]
			 */
			var redoStack = []
			
			/**
			 * 현재 화면에 표시중인 앱 정보를 얻습니다.
			 */
			function getActiveStackInfo() {
				if (stack.length > 0) {
					return stack[stack.length - 1];
				} else {
					return null;
				}
			}
			
			/**
			 * 현재 화면 바로 이전에 표시중이던 앱 정보를 얻습니다.
			 */
			function getPreviousAppInfo() {
				if (stack.length > 1) {
					return stack[stack.length - 2];
				} else {
					return null;
				}
			}
			
			/**
			 * 앱 스택에 새로운 앱을 추가합니다.
			 * 
			 * @param {String} appId 새로 시작할 앱의 URI
			 * @param {(cpr.core.AppInstance)=>void} init (Optional) 앱이 시작된 뒤 초기화를 수행할 프로시져.
			 * @param {boolean} createState
			 * @param {Boolean} keepContent (Optional) 다른 앱이 푸시될 때, 상태를 유지할 지 여부. 기본값 false
			 */
			function push(appId, init, createState, keepContent) {
				if (keepContent == null) {
					keepContent = false;
				}
				cpr.core.App.load(appId, function(loadedApp) {
					var current = getActiveStackInfo();
					if (current) {
						if (keepContent === false) {
							current.embeddedApp.app = null;
						}
			
						current.embeddedApp.visible = false;
					}
			
					var ea = new cpr.controls.EmbeddedApp(null, loadedApp);
					var newInfo = new StackInfo(ea, init);
					stack.push(newInfo);
			
					if (init) {
						ea.ready(function(ea) {
							init(ea.getEmbeddedAppInstance());
						});
					}
			
					app.getContainer().addChild(ea, {
						top: "0px",
						right: "0px",
						bottom: "0px",
						left: "0px"
					});
			
					if (createState) {
						redoStack = [];
						if (stack.length === 1) {
							history.replaceState(newInfo.state, loadedApp.title);
						} else {
							history.pushState(newInfo.state, loadedApp.title);
						}
					}
			
					document.title = loadedApp.title || loadedApp.id;
				});
			}
			
			/**
			 * 
			 * @param {StackInfo} info
			 */
			function pushWithExistingStackInfo(info) {
				var appId = info.state.appId;
				cpr.core.App.load(appId, function(loadedApp) {
					document.title = loadedApp.title || loadedApp.id;
					getActiveStackInfo().embeddedApp.visible = false;
			
					stack.push(info);
			
					info.embeddedApp = new cpr.controls.EmbeddedApp(null, loadedApp);
					if (info.init) {
						info.embeddedApp.ready(function(ea) {
							info.init(ea);
						});
					}
			
					app.getContainer().addChild(info.embeddedApp, {
						top: "0px",
						right: "0px",
						bottom: "0px",
						left: "0px"
					});
			
					info.embeddedApp.visible = true;
				});
			}
			
			/**
			 * 이전 앱으로 돌아갑니다.
			 * 현재 앱은 파기됩니다.
			 */
			function pop() {
				if (stack.length === 0) {
					return;
				}
			
				if (historySynchronized) {
					history.back();
				} else {
					doPop();
				}
			}
			
			function doPop() {
				if (stack.length === 0) {
					return;
				}
			
				var appToReveal = getPreviousAppInfo();
				if (appToReveal) {
					if (appToReveal.embeddedApp.app === null) {
						cpr.core.App.load(appToReveal.state.appId, function(loadedApp) {
							appToReveal.embeddedApp.app = loadedApp;
							document.title = loadedApp.title || loadedApp.id;
						});
					} else {
						document.title = appToReveal.embeddedApp.app.title || appToReveal.embeddedApp.app.id;
					}
					appToReveal.embeddedApp.visible = true;
			
				}
			
				var appToDispose = stack.pop();
				appToDispose.embeddedApp.dispose();
				redoStack.push(appToDispose);
			
				return appToDispose;
			}
			
			/**
			 * 브라우저의 popstate 이벤트를 처리하는 핸들러.
			 * @param {PopStateEvent} e
			 */
			function handlePoppedState(e) {
				var state = e.state;
			
				// 이전 기록에서 일치하는 항목 검색.
				var prevAppInfo = stack.filter(function( /* StackInfo */ each) {
					return each.state.id == state.id;
				})[0];
			
				// 이후 기록에서 일치하는 항목 검색.
				var nextAppInfo = redoStack.filter(function( /* StackInfo */ each) {
					return each.state.id == state.id;
				})[0];
			
				// 이전 항목 일치 처리.
				if (prevAppInfo) {
					while (getActiveStackInfo() != prevAppInfo) {
						doPop();
					}
				}
			
				// 이후 항목 일치 처리.
				else if (nextAppInfo) {
					/** @type AppInfo */
					var current;
					do {
						current = redoStack.pop()
						pushWithExistingStackInfo(current);
					} while (current !== nextAppInfo)
				}
			}
			
			/**
			 * 앱 스택에 새로운 앱을 추가합니다. 현재 표시중이던 앱은 숨겨 집니다.
			 * 
			 * @param {String} appId 새로 시작할 앱의 URI
			 * @param {(cpr.core.AppInstance)=>void} init (Optional) 앱이 시작된 뒤 초기화를 수행할 프로시져.
			 * @param {Boolean} keepContent (Optional) 현재 앱의 컨텐츠를 유지한 상태로 푸시할 것인지 여부. 기본값: false.
			 */
			exports.push = function(appId, init, keepContent) {
				if (keepContent == null) {
					keepContent = false;
				}
				push(appId, init, historySynchronized, keepContent);
			};
			
			exports.pop = pop;
			
			/**
			 * 브라우저 히스토리 감시를 시작 합니다.
			 */
			function beginWatchHistory() {
				if (historySynchronized) {
					return
				}
				window.addEventListener("popstate", handlePoppedState);
				historySynchronized = true;
			};
			
			/**
			 * 브라우저 히스토리 감시를 중단합니다.
			 */
			function stopWatchHistory() {
				if (!historySynchronized) {
					return;
				}
				window.removeEventListener("popstate", handlePoppedState);
				historySynchronized = false;
			};
			
			/**
			 * 첫 번째 앱으로 돌아갑니다.
			 * 팝 된 앱 인스턴스들은 모두 파기되고, UI 상태가  유실 됩니다.
			 */
			exports.returnToTopApp = function() {
				if (stack.length <= 1) {
					return;
				}
			
				if (historySynchronized) {
					history.go(-(stack.length - 1));
				} else {
					while (stack.length > 1) {
						doPop();
					}
				}
			};
			
			exports.peek = function() {
				if (stack.length > 0) {
					var appInfo = stack[stack.length - 1];
					return appInfo.embeddedApp;
				} else {
					return null;
				}
			}
			
			/**
			 * 이전 앱으로 돌아갑니다.
			 * 현재 앱은 파기 됩니다.
			 */
			exports.back = function() {
				if (stack.length > 1) {
					pop();
				}
			}
			
			/**
			 * 앞으로 이동합니다. 이동할 기록이 없으면 아무일도 생기지 않습니다.
			 */
			exports.forward = function() {
				if (redoStack.length > 0) {
					if (historySynchronized) {
						history.go(1);
					} else {
						var next = redoStack.pop();
						pushWithExistingStackInfo(next);
					}
				}
			};
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				switch (e.property) {
					case "synchronizeWithHistory":
						{
							if (e.newValue) {
								beginWatchHistory();
							} else {
								stopWatchHistory();
							}
							break;
						}
				}
			}
			
			/*
			 * Body에서 unload 이벤트 발생 시 호출.
			 * 앱이 언로드된 후 발생하는 이벤트입니다.
			 */
			function onBodyUnload( /* cpr.events.CEvent */ e) {
				stopWatchHistory();
			}
			
			beginWatchHistory();;
			// End - User Script
			
			// Header
			app.declareAppProperty("synchronizeWithHistory", true);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyUnload == "function"){
				app.addEventListener("unload", onBodyUnload);
			}
		}
	});
	internalApp.title = "앱 스택";
	
	// Type declaration for AppStack
	cpr.utils.Util.ensurePackage("udc").AppStack = function(id){
		cpr.controls.UDCBase.call(this, "udc.AppStack", internalApp, id);
	};
	
	udc.AppStack.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.AppStack.prototype, "type", {
		get : function(){
			return "udc.AppStack";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.AppStack.prototype, "synchronizeWithHistory", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("synchronizeWithHistory");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("synchronizeWithHistory", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.AppStack
/// start - udc.asfdasdf
/*
 * UDC Qualified Name: udc.asfdasdf
 * App URI: udc/asfdasdf
 * Source Location: udc/asfdasdf.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/asfdasdf", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * asfdasdf.js
			 * Created at 2020. 10. 27. 오전 9:23:08.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var hanT = new udc.HansTest();
				
				app.getRootAppInstance().floatControl(hanT,{
					width : "300px",
					height: "300px",
					top : "500px",
					left : "500px"
				});
			}
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "Button";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "52px",
				"left": "0px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "Button";
			if(typeof onButtonClick2 == "function") {
				button_2.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_2, {
				"top": "47px",
				"right": "0px",
				"bottom": "5px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "asfdasdf";
	
	// Type declaration for asfdasdf
	cpr.utils.Util.ensurePackage("udc").asfdasdf = function(id){
		cpr.controls.UDCBase.call(this, "udc.asfdasdf", internalApp, id);
	};
	
	udc.asfdasdf.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.asfdasdf.prototype, "type", {
		get : function(){
			return "udc.asfdasdf";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.asfdasdf
/// start - udc.ChartShell
/*
 * UDC Qualified Name: udc.ChartShell
 * App URI: udc/ChartShell
 * Source Location: udc/ChartShell.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ChartShell", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * echartShell.js
			 * Created at 2019. 9. 4. 오후 7:12:45.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var uIControlShell = e.control;
				// chart가 새로 그려지기 전에 기존에 echart 관련 객체가 있으면 삭제한다.
				var shellDiv = e.content;
				console.log("INIT");
				if(shellDiv){
					var instance = myChart;
					if(instance){
						instance.dispose();
					}
				}
				if(!e.content){
					window.addEventListener("resize",function(){resizeChart()});
				}
			}
			
			var myChart = null;
			function resizeChart(){
				if(myChart){
					myChart.resize();
				}
			}
			
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var uIControlShell = e.control;
				// div에 echart를 입히는 코드
				var shellDiv = e.content;
				if(!shellDiv){
					return;
				}
				myChart = echarts.init(shellDiv);
				myChart.resize();
				//차트에 들어가는 데이터나 x,y축에 대한 정보 등등을 작성할 수 있습니다.
				//자세한 항목은 echarts document를 참고하십시오.
			//	var vcDataSet = app.getAppProperty("dataSetId");
			//	
			//	var option = {
			//		title : {
			//			text : 'ECharts 연동 예제'
			//		},
			//		tooltip : {},
			//		legend : {
			//			data : [ 'Sales' , 'Marketing', "R&D"]
			//		},
			//		xAxis : {
			//			data : [ "shirt", "cardign", "chiffon shirt", "pants", "heels", "socks" ]
			//		},
			//		yAxis : {},
			//		series : [ {
			//			name : 'Sales',
			//			type : 'bar',
			//			data : [ 5, 20, 36, 10, 10, 20 ]
			//		},
			//		{
			//			name : 'Marketing',
			//			type : 'line',
			//			data : [ 15, 25, 20, 25, 24, 40 ]
			//		},
			//		{
			//			name : 'R&D',
			//			type : 'bar',
			//			data : [ 15, 20, 35, 33, 40, 35 ]
			//		}]
			//	};
			//	myChart.setOption(option);
			var option = {};
				myChart.setOption(option);
			}
			
			
			/*
			 * 쉘에서 dispose 이벤트 발생 시 호출.
			 * 컨트롤이 dispose될 때 호출되는 이벤트.
			 */
			function onShl1Dispose(/* cpr.events.CEvent */ e){
				window.removeEventListener("resize",resizeChart);
				myChart = null;
				
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			}
			
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				console.log("property-change");
			
				if(e.property == "option") {
					
					myChart.setOption(app.getAppProperty("option"));
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("option", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			if(typeof onShl1Dispose == "function") {
				uIControlShell_1.addEventListener("dispose", onShl1Dispose);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "옵션동적구성차트udc";
	
	// Type declaration for ChartShell
	cpr.utils.Util.ensurePackage("udc").ChartShell = function(id){
		cpr.controls.UDCBase.call(this, "udc.ChartShell", internalApp, id);
	};
	
	udc.ChartShell.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ChartShell.prototype, "type", {
		get : function(){
			return "udc.ChartShell";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ChartShell.prototype, "option", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("option");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("option", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ChartShell
/// start - udc.cmn.hannn
/*
 * UDC Qualified Name: udc.cmn.hannn
 * App URI: udc/cmn/hannn
 * Source Location: udc/cmn/hannn.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/hannn", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hannn.js
			 * Created at 2021. 5. 3. 오전 10:38:08.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				console.log("LOAD");
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				console.log(app.app.title)
			}
			
			
			/*
			 * "app.app.id" 버튼(btn2)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn2Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn2 = e.control;
				console.log(app.app.id);
			}
			
			
			/*
			 * "Button" 버튼(btn3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn3 = e.control;
				console.log(app.getHost());
				console.log(app.isUDCInstance());
			}
			
			
			
			
			/*
			 * 루트 컨테이너에서 before-draw 이벤트 발생 시 호출.
			 * 그룹 컨텐츠가 그려지기 직전에 호출되는 이벤트 입니다. 내부 컨텐츠를 동적으로 구성하기위한 용도로만 사용됩니다.
			 */
			function onBodyBeforeDraw(/* cpr.events.CUIEvent */ e){
				
				console.log("before-draw");
			}
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				console.log(e);
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("hanProp", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "8px";
			formLayout_1.verticalSpacing = "8px";
			formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "app.app.title";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "app.app.id";
			if(typeof onBtn2Click == "function") {
				button_2.addEventListener("click", onBtn2Click);
			}
			container.addChild(button_2, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var button_3 = new cpr.controls.Button("btn3");
			button_3.value = "Button";
			if(typeof onBtn3Click == "function") {
				button_3.addEventListener("click", onBtn3Click);
			}
			container.addChild(button_3, {
				"colIndex": 2,
				"rowIndex": 0
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyBeforeUnload == "function"){
				app.addEventListener("before-unload", onBodyBeforeUnload);
			}
			if(typeof onBodyUnload == "function"){
				app.addEventListener("unload", onBodyUnload);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyBeforeDraw == "function"){
				app.getContainer().addEventListener("before-draw", onBodyBeforeDraw);
			}
		}
	});
	internalApp.title = "hannnnn";
	
	// Type declaration for hannn
	cpr.utils.Util.ensurePackage("udc.cmn").hannn = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.hannn", internalApp, id);
	};
	
	udc.cmn.hannn.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.hannn.prototype, "type", {
		get : function(){
			return "udc.cmn.hannn";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.hannn.prototype, "hanProp", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("hanProp");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("hanProp", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.hannn
/// start - udc.cmn.keyboard
/*
 * UDC Qualified Name: udc.cmn.keyboard
 * App URI: udc/cmn/keyboard
 * Source Location: udc/cmn/keyboard.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/keyboard", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * keyboard.js
			 * Created at 2021. 2. 8. 오전 10:42:56.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			
			
			/*
			 * "caps" 버튼(btn30)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn30Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn30 = e.control;
				
				app.setAppProperty("caps", !app.getAppProperty("caps"));
				app.getContainer().redraw();
			}
			
			
			/*
			 * "shift" 버튼(btn44)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnShiftClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn44 = e.control;
				
				app.setAppProperty("caps", true);
				app.getContainer().redraw();
				app.addEventListenerOnce("userEv", function(ev){
					app.setAppProperty("caps", false);
					app.getContainer().redraw();
				});
			}
			
			
			/*
			 * 버튼(btn17)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnTypingClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn17 = e.control;
				
				/** @type cpr.controls.InputBox */
				var vcIpb = app.getAppProperty("targetCtrl");
				
				if(vcIpb.value == null) {
					vcIpb.value = "";
				}
				vcIpb.value = vcIpb.value + btn17.value;
				vcIpb.redraw();
				
				var ev = new cpr.events.CAppEvent("userEv");	
				app.dispatchEvent(ev);
			}
			
			
			/*
			 * "enter" 버튼(btn42)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn42Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn42 = e.control;
				
				app.getHost().dispose();
			}
			
			
			/*
			 * "esc" 버튼(btn56)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCloseClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn56 = e.control;
				app.getHost().dispose();
			}
			
			
			
			/*
			 * "backspace" 버튼(backspace)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBackspaceClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var backspace = e.control;
				
				/** @type cpr.controls.InputBox */
				var vcIpb = app.getAppProperty("targetCtrl");
				
				var vals = vcIpb.value;
				
				
				vcIpb.value = vals.substring(0,vals.length-1);	
			}
			
			
			/*
			 * "tab" 버튼(tab)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onTabClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var tab = e.control;
				/** @type cpr.controls.InputBox */
				var vcIpb = app.getAppProperty("targetCtrl");
				
				if(vcIpb.value == null) {
					vcIpb.value = "";
				}
				vcIpb.value = vcIpb.value + "	";
				vcIpb.redraw();
				
				var ev = new cpr.events.CAppEvent("userEv");	
				app.dispatchEvent(ev);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("caps", false);
			app.declareAppProperty("targetCtrl", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["bg-white"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "5px";
			formLayout_1.verticalSpacing = "5px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr", "1fr", "1fr", "1fr", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_2 = new cpr.controls.layouts.FormLayout();
			formLayout_2.topMargin = "0px";
			formLayout_2.rightMargin = "0px";
			formLayout_2.bottomMargin = "0px";
			formLayout_2.leftMargin = "0px";
			formLayout_2.horizontalSpacing = "2px";
			formLayout_2.verticalSpacing = "2px";
			formLayout_2.setColumns(["35px", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "77px"]);
			formLayout_2.setRows(["1fr"]);
			group_1.setLayout(formLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btn2");
				button_1.value = "`";
				button_1.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnTypingClick == "function") {
					button_1.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button("btn3");
				button_2.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_2.bind("value").toExpression("@caps == false ? \"1\" : \"!\"");
				if(typeof onBtnTypingClick == "function") {
					button_2.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button("btn4");
				button_3.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_3.bind("value").toExpression("@caps == false ? \"2\" : \"@\"");
				if(typeof onBtnTypingClick == "function") {
					button_3.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_3, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var button_4 = new cpr.controls.Button("btn5");
				button_4.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_4.bind("value").toExpression("@caps == false ? \"3\" : \"#\"");
				if(typeof onBtnTypingClick == "function") {
					button_4.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_4, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var button_5 = new cpr.controls.Button("btn6");
				button_5.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_5.bind("value").toExpression("@caps == false ? \"4\" : \"$\"");
				if(typeof onBtnTypingClick == "function") {
					button_5.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_5, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var button_6 = new cpr.controls.Button("btn7");
				button_6.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_6.bind("value").toExpression("@caps == false ? \"5\" : \"%\"");
				if(typeof onBtnTypingClick == "function") {
					button_6.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_6, {
					"colIndex": 6,
					"rowIndex": 0
				});
				var button_7 = new cpr.controls.Button("btn8");
				button_7.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_7.bind("value").toExpression("@caps == false ? \"6\" : \"^\"");
				if(typeof onBtnTypingClick == "function") {
					button_7.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_7, {
					"colIndex": 7,
					"rowIndex": 0
				});
				var button_8 = new cpr.controls.Button("btn9");
				button_8.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_8.bind("value").toExpression("@caps == false ? \"7\" : \"&\"");
				if(typeof onBtnTypingClick == "function") {
					button_8.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_8, {
					"colIndex": 8,
					"rowIndex": 0
				});
				var button_9 = new cpr.controls.Button("btn10");
				button_9.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_9.bind("value").toExpression("@caps == false ? \"8\" : \"*\"");
				if(typeof onBtnTypingClick == "function") {
					button_9.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_9, {
					"colIndex": 9,
					"rowIndex": 0
				});
				var button_10 = new cpr.controls.Button("btn11");
				button_10.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_10.bind("value").toExpression("@caps == false ? \"9\" : \"(\"");
				if(typeof onBtnTypingClick == "function") {
					button_10.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_10, {
					"colIndex": 10,
					"rowIndex": 0
				});
				var button_11 = new cpr.controls.Button("btn12");
				button_11.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_11.bind("value").toExpression("@caps == false ? \"0\" : \")\"");
				if(typeof onBtnTypingClick == "function") {
					button_11.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_11, {
					"colIndex": 11,
					"rowIndex": 0
				});
				var button_12 = new cpr.controls.Button("btn13");
				button_12.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_12.bind("value").toExpression("@caps == false ? \"-\" : \"_\"");
				if(typeof onBtnTypingClick == "function") {
					button_12.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_12, {
					"colIndex": 12,
					"rowIndex": 0
				});
				var button_13 = new cpr.controls.Button("btn14");
				button_13.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_13.bind("value").toExpression("@caps == false ? \"=\" : \"+\"");
				if(typeof onBtnTypingClick == "function") {
					button_13.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_13, {
					"colIndex": 13,
					"rowIndex": 0
				});
				var button_14 = new cpr.controls.Button("backspace");
				button_14.value = "backspace";
				button_14.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBackspaceClick == "function") {
					button_14.addEventListener("click", onBackspaceClick);
				}
				container.addChild(button_14, {
					"colIndex": 14,
					"rowIndex": 0
				});
				var button_15 = new cpr.controls.Button("btn56");
				button_15.value = "esc";
				button_15.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnCloseClick == "function") {
					button_15.addEventListener("click", onBtnCloseClick);
				}
				container.addChild(button_15, {
					"colIndex": 0,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var group_2 = new cpr.controls.Container("grp2");
			// Layout
			var formLayout_3 = new cpr.controls.layouts.FormLayout();
			formLayout_3.topMargin = "0px";
			formLayout_3.rightMargin = "0px";
			formLayout_3.bottomMargin = "0px";
			formLayout_3.leftMargin = "0px";
			formLayout_3.horizontalSpacing = "2px";
			formLayout_3.verticalSpacing = "2px";
			formLayout_3.setColumns(["60px", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr"]);
			formLayout_3.setRows(["1fr"]);
			group_2.setLayout(formLayout_3);
			(function(container){
				var button_16 = new cpr.controls.Button("tab");
				button_16.value = "tab";
				button_16.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onTabClick == "function") {
					button_16.addEventListener("click", onTabClick);
				}
				container.addChild(button_16, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_17 = new cpr.controls.Button("btn17");
				button_17.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_17.bind("value").toExpression("@caps == false ? \"q\" : \"Q\"");
				if(typeof onBtnTypingClick == "function") {
					button_17.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_17, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_18 = new cpr.controls.Button("btn18");
				button_18.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_18.bind("value").toExpression("@caps == false ? \"e\" : \"E\"");
				if(typeof onBtnTypingClick == "function") {
					button_18.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_18, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var button_19 = new cpr.controls.Button("btn19");
				button_19.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_19.bind("value").toExpression("@caps == false ? \"w\" : \"W\"");
				if(typeof onBtnTypingClick == "function") {
					button_19.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_19, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_20 = new cpr.controls.Button("btn20");
				button_20.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_20.bind("value").toExpression("@caps == false ? \"r\" : \"R\"");
				if(typeof onBtnTypingClick == "function") {
					button_20.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_20, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var button_21 = new cpr.controls.Button("btn21");
				button_21.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_21.bind("value").toExpression("@caps == false ? \"t\" : \"T\"");
				if(typeof onBtnTypingClick == "function") {
					button_21.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_21, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var button_22 = new cpr.controls.Button("btn22");
				button_22.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_22.bind("value").toExpression("@caps == false ? \"u\" : \"U\"");
				if(typeof onBtnTypingClick == "function") {
					button_22.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_22, {
					"colIndex": 7,
					"rowIndex": 0
				});
				var button_23 = new cpr.controls.Button("btn23");
				button_23.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_23.bind("value").toExpression("@caps == false ? \"y\" : \"Y\"");
				if(typeof onBtnTypingClick == "function") {
					button_23.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_23, {
					"colIndex": 6,
					"rowIndex": 0
				});
				var button_24 = new cpr.controls.Button("btn24");
				button_24.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_24.bind("value").toExpression("@caps == false ? \"i\" : \"I\"");
				if(typeof onBtnTypingClick == "function") {
					button_24.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_24, {
					"colIndex": 8,
					"rowIndex": 0
				});
				var button_25 = new cpr.controls.Button("btn25");
				button_25.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_25.bind("value").toExpression("@caps == false ? \"o\" : \"O\"");
				if(typeof onBtnTypingClick == "function") {
					button_25.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_25, {
					"colIndex": 9,
					"rowIndex": 0
				});
				var button_26 = new cpr.controls.Button("btn26");
				button_26.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_26.bind("value").toExpression("@caps == false ? \"p\" : \"P\"");
				if(typeof onBtnTypingClick == "function") {
					button_26.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_26, {
					"colIndex": 10,
					"rowIndex": 0
				});
				var button_27 = new cpr.controls.Button("btn27");
				button_27.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_27.bind("value").toExpression("@caps == false ? \"[\" : \"{\"");
				if(typeof onBtnTypingClick == "function") {
					button_27.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_27, {
					"colIndex": 11,
					"rowIndex": 0
				});
				var button_28 = new cpr.controls.Button("btn28");
				button_28.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_28.bind("value").toExpression("@caps == false ? \"]\" : \"}\"");
				if(typeof onBtnTypingClick == "function") {
					button_28.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_28, {
					"colIndex": 12,
					"rowIndex": 0
				});
				var button_29 = new cpr.controls.Button("btn29");
				button_29.value = "\\";
				button_29.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnTypingClick == "function") {
					button_29.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_29, {
					"colIndex": 13,
					"rowIndex": 0
				});
			})(group_2);
			container.addChild(group_2, {
				"colIndex": 0,
				"rowIndex": 1
			});
			
			var group_3 = new cpr.controls.Container("grp3");
			// Layout
			var formLayout_4 = new cpr.controls.layouts.FormLayout();
			formLayout_4.topMargin = "0px";
			formLayout_4.rightMargin = "0px";
			formLayout_4.bottomMargin = "0px";
			formLayout_4.leftMargin = "0px";
			formLayout_4.horizontalSpacing = "2px";
			formLayout_4.verticalSpacing = "2px";
			formLayout_4.setColumns(["77px", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr"]);
			formLayout_4.setRows(["1fr"]);
			group_3.setLayout(formLayout_4);
			(function(container){
				var button_30 = new cpr.controls.Button("btn30");
				button_30.value = "caps";
				button_30.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtn30Click == "function") {
					button_30.addEventListener("click", onBtn30Click);
				}
				container.addChild(button_30, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_31 = new cpr.controls.Button("btn31");
				button_31.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_31.bind("value").toExpression("@caps == false ? \"a\" : \"A\"");
				if(typeof onBtnTypingClick == "function") {
					button_31.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_31, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_32 = new cpr.controls.Button("btn32");
				button_32.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_32.bind("value").toExpression("@caps == false ? \"d\" : \"D\"");
				if(typeof onBtnTypingClick == "function") {
					button_32.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_32, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var button_33 = new cpr.controls.Button("btn33");
				button_33.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_33.bind("value").toExpression("@caps == false ? \"s\" : \"S\"");
				if(typeof onBtnTypingClick == "function") {
					button_33.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_33, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_34 = new cpr.controls.Button("btn34");
				button_34.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_34.bind("value").toExpression("@caps == false ? \"f\" : \"F\"");
				if(typeof onBtnTypingClick == "function") {
					button_34.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_34, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var button_35 = new cpr.controls.Button("btn35");
				button_35.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_35.bind("value").toExpression("@caps == false ? \"g\" : \"G\"");
				if(typeof onBtnTypingClick == "function") {
					button_35.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_35, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var button_36 = new cpr.controls.Button("btn36");
				button_36.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_36.bind("value").toExpression("@caps == false ? \"j\" : \"J\"");
				if(typeof onBtnTypingClick == "function") {
					button_36.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_36, {
					"colIndex": 7,
					"rowIndex": 0
				});
				var button_37 = new cpr.controls.Button("btn37");
				button_37.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_37.bind("value").toExpression("@caps == false ? \"h\" : \"H\"");
				if(typeof onBtnTypingClick == "function") {
					button_37.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_37, {
					"colIndex": 6,
					"rowIndex": 0
				});
				var button_38 = new cpr.controls.Button("btn38");
				button_38.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_38.bind("value").toExpression("@caps == false ? \"k\" : \"K\"");
				if(typeof onBtnTypingClick == "function") {
					button_38.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_38, {
					"colIndex": 8,
					"rowIndex": 0
				});
				var button_39 = new cpr.controls.Button("btn39");
				button_39.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_39.bind("value").toExpression("@caps == false ? \"l\" : \"L\"");
				if(typeof onBtnTypingClick == "function") {
					button_39.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_39, {
					"colIndex": 9,
					"rowIndex": 0
				});
				var button_40 = new cpr.controls.Button("btn40");
				button_40.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_40.bind("value").toExpression("@caps == false ? \";\" : \":\"");
				if(typeof onBtnTypingClick == "function") {
					button_40.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_40, {
					"colIndex": 10,
					"rowIndex": 0
				});
				var button_41 = new cpr.controls.Button("btn41");
				button_41.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_41.bind("value").toExpression("@caps == false ? \"'\" : \"\\\"\"");
				if(typeof onBtnTypingClick == "function") {
					button_41.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_41, {
					"colIndex": 11,
					"rowIndex": 0
				});
				var button_42 = new cpr.controls.Button("btn42");
				button_42.value = "enter";
				button_42.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnCloseClick == "function") {
					button_42.addEventListener("click", onBtnCloseClick);
				}
				container.addChild(button_42, {
					"colIndex": 12,
					"rowIndex": 0,
					"colSpan": 2,
					"rowSpan": 1
				});
			})(group_3);
			container.addChild(group_3, {
				"colIndex": 0,
				"rowIndex": 2
			});
			
			var group_4 = new cpr.controls.Container("grp4");
			// Layout
			var formLayout_5 = new cpr.controls.layouts.FormLayout();
			formLayout_5.topMargin = "0px";
			formLayout_5.rightMargin = "0px";
			formLayout_5.bottomMargin = "0px";
			formLayout_5.leftMargin = "0px";
			formLayout_5.horizontalSpacing = "2px";
			formLayout_5.verticalSpacing = "2px";
			formLayout_5.setColumns(["80px", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr"]);
			formLayout_5.setRows(["1fr"]);
			group_4.setLayout(formLayout_5);
			(function(container){
				var button_43 = new cpr.controls.Button("btn44");
				button_43.value = "shift";
				button_43.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnShiftClick == "function") {
					button_43.addEventListener("click", onBtnShiftClick);
				}
				container.addChild(button_43, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_44 = new cpr.controls.Button("btn45");
				button_44.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_44.bind("value").toExpression("@caps == false ? \"z\" : \"Z\"");
				if(typeof onBtnTypingClick == "function") {
					button_44.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_44, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_45 = new cpr.controls.Button("btn46");
				button_45.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_45.bind("value").toExpression("@caps == false ? \"c\" : \"C\"");
				if(typeof onBtnTypingClick == "function") {
					button_45.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_45, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var button_46 = new cpr.controls.Button("btn47");
				button_46.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_46.bind("value").toExpression("@caps == false ? \"x\" : \"X\"");
				if(typeof onBtnTypingClick == "function") {
					button_46.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_46, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_47 = new cpr.controls.Button("btn48");
				button_47.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_47.bind("value").toExpression("@caps == false ? \"v\" : \"V\"");
				if(typeof onBtnTypingClick == "function") {
					button_47.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_47, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var button_48 = new cpr.controls.Button("btn49");
				button_48.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_48.bind("value").toExpression("@caps == false ? \"b\" : \"B\"");
				if(typeof onBtnTypingClick == "function") {
					button_48.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_48, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var button_49 = new cpr.controls.Button("btn50");
				button_49.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_49.bind("value").toExpression("@caps == false ? \"m\" : \"M\"");
				if(typeof onBtnTypingClick == "function") {
					button_49.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_49, {
					"colIndex": 7,
					"rowIndex": 0
				});
				var button_50 = new cpr.controls.Button("btn51");
				button_50.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_50.bind("value").toExpression("@caps == false ? \"n\" : \"N\"");
				if(typeof onBtnTypingClick == "function") {
					button_50.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_50, {
					"colIndex": 6,
					"rowIndex": 0
				});
				var button_51 = new cpr.controls.Button("btn52");
				button_51.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_51.bind("value").toExpression("@caps == false ? \",\" : \"<\"");
				if(typeof onBtnTypingClick == "function") {
					button_51.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_51, {
					"colIndex": 8,
					"rowIndex": 0
				});
				var button_52 = new cpr.controls.Button("btn53");
				button_52.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_52.bind("value").toExpression("@caps == false ? \".\" : \">\"");
				if(typeof onBtnTypingClick == "function") {
					button_52.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_52, {
					"colIndex": 9,
					"rowIndex": 0
				});
				var button_53 = new cpr.controls.Button("btn54");
				button_53.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				button_53.bind("value").toExpression("@caps == false ? \"/\" : \"?\"");
				if(typeof onBtnTypingClick == "function") {
					button_53.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_53, {
					"colIndex": 10,
					"rowIndex": 0
				});
				var button_54 = new cpr.controls.Button("rightShift");
				button_54.value = "shift";
				button_54.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnShiftClick == "function") {
					button_54.addEventListener("click", onBtnShiftClick);
				}
				container.addChild(button_54, {
					"colIndex": 11,
					"rowIndex": 0,
					"colSpan": 3,
					"rowSpan": 1
				});
			})(group_4);
			container.addChild(group_4, {
				"colIndex": 0,
				"rowIndex": 3
			});
			
			var group_5 = new cpr.controls.Container("grp5");
			// Layout
			var formLayout_6 = new cpr.controls.layouts.FormLayout();
			formLayout_6.topMargin = "0px";
			formLayout_6.rightMargin = "0px";
			formLayout_6.bottomMargin = "0px";
			formLayout_6.leftMargin = "0px";
			formLayout_6.horizontalSpacing = "2px";
			formLayout_6.verticalSpacing = "2px";
			formLayout_6.setColumns(["60px", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr"]);
			formLayout_6.setRows(["1fr"]);
			group_5.setLayout(formLayout_6);
			(function(container){
				var button_55 = new cpr.controls.Button("btn43");
				button_55.value = ".com";
				button_55.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnTypingClick == "function") {
					button_55.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_55, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 2,
					"rowSpan": 1
				});
				var button_56 = new cpr.controls.Button("btn57");
				button_56.value = " ";
				button_56.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnTypingClick == "function") {
					button_56.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_56, {
					"colIndex": 3,
					"rowIndex": 0,
					"colSpan": 11,
					"rowSpan": 1
				});
				var button_57 = new cpr.controls.Button("btn58");
				button_57.value = "@";
				button_57.style.setClasses(["btn-outline-light", "bg-white", "rounded"]);
				if(typeof onBtnTypingClick == "function") {
					button_57.addEventListener("click", onBtnTypingClick);
				}
				container.addChild(button_57, {
					"colIndex": 2,
					"rowIndex": 0
				});
			})(group_5);
			container.addChild(group_5, {
				"colIndex": 0,
				"rowIndex": 4
			});
		}
	});
	internalApp.title = "keyboard";
	
	// Type declaration for keyboard
	cpr.utils.Util.ensurePackage("udc.cmn").keyboard = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.keyboard", internalApp, id);
	};
	
	udc.cmn.keyboard.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.keyboard.prototype, "type", {
		get : function(){
			return "udc.cmn.keyboard";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.keyboard.prototype, "caps", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("caps");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("caps", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.keyboard.prototype, "targetCtrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("targetCtrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("targetCtrl", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.keyboard
/// start - udc.cmn.LED
/*
 * UDC Qualified Name: udc.cmn.LED
 * App URI: udc/cmn/LED
 * Source Location: udc/cmn/LED.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/LED", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * LED.js
			 * Created at 2021. 2. 3. 오후 1:56:20.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				var vbClickable = app.getAppProperty("clickable");
				
				if(vbClickable) {
					
					app.lookup("opt1").style.addClass("cursor-pointer");
					
					app.lookup("opt1").addEventListener("click", function(e){
						var vsStatus = app.getAppProperty("status");
						if(vsStatus == "off") {
							
							app.setAppProperty("status", "on");
						} 
						else {
							app.setAppProperty("status", "off");
						}
						
						e.control.redraw();
						
						var event = new cpr.events.CUIEvent("led-click",{
							content :{
								status : app.getAppProperty("status")
							}
						});
						
						app.dispatchEvent(event);
					});
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("status", "off");
			app.declareAppProperty("clickable", false);
			app.declareAppProperty("belong", null);
			app.declareAppProperty("name", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.style.css({
				"border-radius" : "100px"
			});
			output_1.style.bind("background-color").toExpression([
				"switch(@status){",
				"\tcase \"success\" : \"#00F700\"",
				"\tcase \"warning\" : \"#F6993F\"",
				"\tcase \"danger\" : \"#E3342F\"",
				"\tcase \"off\" : \"#D9D9D9\"",
				"\tcase \"on\" : \"#00F700\"",
				"\tdefault : \"#D9D9D9\"",
				"}"
			].join("\n"));
			container.addChild(output_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "LED";
	
	// Type declaration for LED
	cpr.utils.Util.ensurePackage("udc.cmn").LED = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.LED", internalApp, id);
	};
	
	udc.cmn.LED.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.LED.prototype, "type", {
		get : function(){
			return "udc.cmn.LED";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.LED.prototype, "status", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("status");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("status", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.LED.prototype, "clickable", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("clickable");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("clickable", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.LED.prototype, "belong", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("belong");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("belong", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.LED.prototype, "name", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("name");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("name", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.LED
/// start - udc.cmn.loader
/*
 * UDC Qualified Name: udc.cmn.loader
 * App URI: udc/cmn/loader
 * Source Location: udc/cmn/loader.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/loader", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				setTimeout(function(){
					
					app.lookup("btn1").visible = true;
				}, 3000);
			}
			
			
			/*
			 * "끝내기" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				app.close();
				
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px",
				"background-color" : "transparent"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "#959697",
				"border-right-width" : "2px",
				"border-left-color" : "#959697",
				"border-right-color" : "#959697",
				"border-left-width" : "2px",
				"border-top-style" : "solid",
				"background-color" : "#ffffff",
				"border-left-style" : "solid",
				"border-bottom-width" : "2px",
				"border-top-color" : "#959697",
				"border-bottom-style" : "solid"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "Loading...";
				output_1.style.css({
					"padding-top" : "7px",
					"background-repeat" : "no-repeat",
					"font-weight" : "bold",
					"padding-left" : "40px",
					"padding-bottom" : "0px",
					"background-image" : "url('theme/loader.gif')",
					"padding-right" : "0px"
				});
				container.addChild(output_1, {
					"width": "138px",
					"height": "32px",
					"left": "calc(50% - 69px)",
					"top": "calc(50% - 16px)"
				});
				var button_1 = new cpr.controls.Button("btn1");
				button_1.visible = false;
				button_1.value = "끝내기";
				if(typeof onBtn1Click == "function") {
					button_1.addEventListener("click", onBtn1Click);
				}
				container.addChild(button_1, {
					"right": "19px",
					"bottom": "20px",
					"width": "100px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "loader";
	
	// Type declaration for loader
	cpr.utils.Util.ensurePackage("udc.cmn").loader = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.loader", internalApp, id);
	};
	
	udc.cmn.loader.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.loader.prototype, "type", {
		get : function(){
			return "udc.cmn.loader";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.loader
/// start - udc.cmn.StatusBox
/*
 * UDC Qualified Name: udc.cmn.StatusBox
 * App URI: udc/cmn/StatusBox
 * Source Location: udc/cmn/StatusBox.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/StatusBox", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * StatusBox.js
			 * Created at 2021. 5. 28. 오전 10:28:51.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("targetStation", "chA1");
			app.declareAppProperty("Status", "0soom, 0.0mTorr \\r\\n abc");
			app.declareAppProperty("progressVisible", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp5");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["20px", "1fr"]);
			formLayout_1.setUseRowShade(0, true);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("opt30");
				output_1.value = "chA1";
				output_1.bind("value").toAppProperty("targetStation");
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output("chA1Status");
				output_2.value = "0soom, 0.0mTorr\r\n0.0/0.0 C\r\n--";
				output_2.style.setClasses(["text-center"]);
				output_2.bind("value").toAppProperty("Status");
				container.addChild(output_2, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "StatusBox";
	
	// Type declaration for StatusBox
	cpr.utils.Util.ensurePackage("udc.cmn").StatusBox = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.StatusBox", internalApp, id);
	};
	
	udc.cmn.StatusBox.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.StatusBox.prototype, "type", {
		get : function(){
			return "udc.cmn.StatusBox";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.cmn.StatusBox.prototype, "targetStation", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("targetStation");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("targetStation", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.StatusBox.prototype, "Status", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("Status");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("Status", newValue, true);
		}
	});
	Object.defineProperty(udc.cmn.StatusBox.prototype, "progressVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("progressVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("progressVisible", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.StatusBox
/// start - udc.cmn.tteesstt
/*
 * UDC Qualified Name: udc.cmn.tteesstt
 * App URI: udc/cmn/tteesstt
 * Source Location: udc/cmn/tteesstt.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/tteesstt", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * tteesstt.js
			 * Created at 2021. 4. 1. 오후 1:07:06.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
				var event = new cpr.events.CMouseEvent("clickman");
				app.dispatchEvent(event);
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "Button";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
		}
	});
	internalApp.title = "tteesstt";
	
	// Type declaration for tteesstt
	cpr.utils.Util.ensurePackage("udc.cmn").tteesstt = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.tteesstt", internalApp, id);
	};
	
	udc.cmn.tteesstt.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.tteesstt.prototype, "type", {
		get : function(){
			return "udc.cmn.tteesstt";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.tteesstt
/// start - udc.cmn.waferController
/*
 * UDC Qualified Name: udc.cmn.waferController
 * App URI: udc/cmn/waferController
 * Source Location: udc/cmn/waferController.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/cmn/waferController", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * waferController.js
			 * Created at 2021. 4. 2. 오전 10:53:08.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container("grp1");
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.setColumns(["1fr", "1fr"]);
				formLayout_1.setRows(["1fr", "10px"]);
				group_2.setLayout(formLayout_1);
				(function(container){
					var group_3 = new cpr.controls.Container("chB1");
					group_3.style.setClasses(["factory-ch"]);
					group_3.style.css({
						"background-color" : "#ff9b9b"
					});
					// Layout
					var xYLayout_3 = new cpr.controls.layouts.XYLayout();
					group_3.setLayout(xYLayout_3);
					(function(container){
					})(group_3);
					container.addChild(group_3, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var group_4 = new cpr.controls.Container("chB2");
					group_4.style.setClasses(["factory-ch"]);
					group_4.style.css({
						"background-color" : "#ff9b9b"
					});
					// Layout
					var xYLayout_4 = new cpr.controls.layouts.XYLayout();
					group_4.setLayout(xYLayout_4);
					(function(container){
					})(group_4);
					container.addChild(group_4, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var output_1 = new cpr.controls.Output();
					output_1.style.setClasses(["bg-gray"]);
					output_1.style.css({
						"background-color" : "#a7b26e"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 1,
						"horizontalAlign": "center",
						"width": 45
					});
					var output_2 = new cpr.controls.Output();
					output_2.style.setClasses(["bg-gray"]);
					output_2.style.css({
						"background-color" : "#a7b26e"
					});
					container.addChild(output_2, {
						"colIndex": 1,
						"rowIndex": 1,
						"horizontalAlign": "center",
						"width": 45
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "0px",
					"left": "98px",
					"width": "135px",
					"height": "71px"
				});
				var group_5 = new cpr.controls.Container("grp2");
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.topMargin = "0px";
				formLayout_2.rightMargin = "0px";
				formLayout_2.bottomMargin = "0px";
				formLayout_2.leftMargin = "0px";
				formLayout_2.horizontalSpacing = "0px";
				formLayout_2.verticalSpacing = "0px";
				formLayout_2.setColumns(["1fr", "10px"]);
				formLayout_2.setRows(["1fr", "1fr"]);
				group_5.setLayout(formLayout_2);
				(function(container){
					var group_6 = new cpr.controls.Container("chA1");
					group_6.style.setClasses(["factory-ch"]);
					group_6.style.css({
						"background-color" : "#ff9b9b"
					});
					// Layout
					var xYLayout_5 = new cpr.controls.layouts.XYLayout();
					group_6.setLayout(xYLayout_5);
					(function(container){
					})(group_6);
					container.addChild(group_6, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var group_7 = new cpr.controls.Container("chA2");
					group_7.style.setClasses(["factory-ch"]);
					group_7.style.css({
						"background-color" : "#ff9b9b"
					});
					// Layout
					var xYLayout_6 = new cpr.controls.layouts.XYLayout();
					group_7.setLayout(xYLayout_6);
					(function(container){
					})(group_7);
					container.addChild(group_7, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_3 = new cpr.controls.Output("chA2Door");
					output_3.style.setClasses(["bg-gray"]);
					output_3.style.css({
						"background-color" : "#a7b26e"
					});
					container.addChild(output_3, {
						"colIndex": 1,
						"rowIndex": 0,
						"verticalAlign": "center",
						"height": 45
					});
					var output_4 = new cpr.controls.Output("chA1Door");
					output_4.style.setClasses(["bg-gray"]);
					output_4.style.css({
						"background-color" : "#a7b26e"
					});
					container.addChild(output_4, {
						"colIndex": 1,
						"rowIndex": 1,
						"verticalAlign": "center",
						"height": 45
					});
				})(group_5);
				container.addChild(group_5, {
					"top": "86px",
					"left": "0px",
					"width": "78px",
					"height": "121px"
				});
				var group_8 = new cpr.controls.Container("grp4");
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.topMargin = "0px";
				formLayout_3.rightMargin = "0px";
				formLayout_3.bottomMargin = "0px";
				formLayout_3.leftMargin = "0px";
				formLayout_3.horizontalSpacing = "0px";
				formLayout_3.verticalSpacing = "0px";
				formLayout_3.setColumns(["10px", "1fr"]);
				formLayout_3.setRows(["1fr", "1fr"]);
				group_8.setLayout(formLayout_3);
				(function(container){
					var group_9 = new cpr.controls.Container("chC2");
					group_9.style.setClasses(["factory-ch"]);
					group_9.style.css({
						"background-color" : "#ff9b9b"
					});
					// Layout
					var xYLayout_7 = new cpr.controls.layouts.XYLayout();
					group_9.setLayout(xYLayout_7);
					(function(container){
					})(group_9);
					container.addChild(group_9, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var group_10 = new cpr.controls.Container("chC1");
					group_10.style.setClasses(["factory-ch"]);
					group_10.style.css({
						"background-color" : "#ff9b9b"
					});
					// Layout
					var xYLayout_8 = new cpr.controls.layouts.XYLayout();
					group_10.setLayout(xYLayout_8);
					(function(container){
					})(group_10);
					container.addChild(group_10, {
						"colIndex": 1,
						"rowIndex": 1
					});
					var output_5 = new cpr.controls.Output();
					output_5.style.setClasses(["bg-gray"]);
					output_5.style.css({
						"background-color" : "#a7b26e"
					});
					container.addChild(output_5, {
						"colIndex": 0,
						"rowIndex": 0,
						"verticalAlign": "center",
						"height": 45
					});
					var output_6 = new cpr.controls.Output();
					output_6.style.setClasses(["bg-gray"]);
					output_6.style.css({
						"background-color" : "#a7b26e"
					});
					container.addChild(output_6, {
						"colIndex": 0,
						"rowIndex": 1,
						"verticalAlign": "center",
						"height": 45
					});
				})(group_8);
				container.addChild(group_8, {
					"top": "86px",
					"right": "0px",
					"width": "78px",
					"height": "121px"
				});
				var group_11 = new cpr.controls.Container("TM");
				group_11.clipContent = false;
				group_11.style.setClasses(["factory-robot"]);
				group_11.style.css({
					"background-color" : "#ff7e7e"
				});
				// Layout
				var xYLayout_9 = new cpr.controls.layouts.XYLayout();
				xYLayout_9.scrollable = false;
				group_11.setLayout(xYLayout_9);
				(function(container){
				})(group_11);
				container.addChild(group_11, {
					"top": "70px",
					"left": "79px",
					"width": "172px",
					"height": "148px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"width": "328px",
				"height": "218px",
				"left": "calc(50% - 164px)"
			});
			
			var group_12 = new cpr.controls.Container("CL");
			group_12.style.setClasses(["factory-wafers", "cursor-pointer"]);
			group_12.style.css({
				"background-color" : "#b6b7b7",
				"background-image" : "none"
			});
			// Layout
			var formLayout_4 = new cpr.controls.layouts.FormLayout();
			formLayout_4.topMargin = "1fr";
			formLayout_4.rightMargin = "2px";
			formLayout_4.bottomMargin = "1fr";
			formLayout_4.leftMargin = "2px";
			formLayout_4.horizontalSpacing = "2px";
			formLayout_4.verticalSpacing = "2px";
			formLayout_4.setColumns(["1fr", "15px"]);
			formLayout_4.setRows(["12px", "12px", "12px", "12px", "12px", "12px", "12px", "12px", "12px", "12px", "12px", "12px"]);
			group_12.setLayout(formLayout_4);
			(function(container){
				var output_7 = new cpr.controls.Output("opt1");
				output_7.value = "01";
				output_7.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_7, {
					"colIndex": 1,
					"rowIndex": 11
				});
				var output_8 = new cpr.controls.Output("opt2");
				output_8.value = "02";
				output_8.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_8, {
					"colIndex": 1,
					"rowIndex": 10
				});
				var output_9 = new cpr.controls.Output("opt3");
				output_9.value = "03";
				output_9.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_9, {
					"colIndex": 1,
					"rowIndex": 9
				});
				var output_10 = new cpr.controls.Output("opt4");
				output_10.value = "04";
				output_10.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_10, {
					"colIndex": 1,
					"rowIndex": 8
				});
				var output_11 = new cpr.controls.Output("opt5");
				output_11.value = "05";
				output_11.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_11, {
					"colIndex": 1,
					"rowIndex": 7
				});
				var output_12 = new cpr.controls.Output("opt6");
				output_12.value = "06";
				output_12.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_12, {
					"colIndex": 1,
					"rowIndex": 6
				});
				var output_13 = new cpr.controls.Output("opt7");
				output_13.value = "07";
				output_13.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_13, {
					"colIndex": 1,
					"rowIndex": 5
				});
				var output_14 = new cpr.controls.Output("opt8");
				output_14.value = "08";
				output_14.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_14, {
					"colIndex": 1,
					"rowIndex": 4
				});
				var output_15 = new cpr.controls.Output("opt9");
				output_15.value = "09";
				output_15.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_15, {
					"colIndex": 1,
					"rowIndex": 3
				});
				var output_16 = new cpr.controls.Output("opt10");
				output_16.value = "10";
				output_16.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_16, {
					"colIndex": 1,
					"rowIndex": 2
				});
				var output_17 = new cpr.controls.Output("opt11");
				output_17.value = "11";
				output_17.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_17, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var output_18 = new cpr.controls.Output("opt12");
				output_18.value = "12";
				output_18.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_18, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_19 = new cpr.controls.Output("waferCL1");
				output_19.style.setClasses(["bg-white"]);
				container.addChild(output_19, {
					"colIndex": 0,
					"rowIndex": 11
				});
				var output_20 = new cpr.controls.Output("waferCL2");
				output_20.style.setClasses(["bg-white"]);
				container.addChild(output_20, {
					"colIndex": 0,
					"rowIndex": 10
				});
				var output_21 = new cpr.controls.Output("waferCL3");
				output_21.style.setClasses(["bg-white"]);
				container.addChild(output_21, {
					"colIndex": 0,
					"rowIndex": 9
				});
				var output_22 = new cpr.controls.Output("waferCL4");
				output_22.style.setClasses(["bg-white"]);
				container.addChild(output_22, {
					"colIndex": 0,
					"rowIndex": 8
				});
				var output_23 = new cpr.controls.Output("waferCL5");
				output_23.style.setClasses(["bg-white"]);
				container.addChild(output_23, {
					"colIndex": 0,
					"rowIndex": 7
				});
				var output_24 = new cpr.controls.Output("waferCL6");
				output_24.style.setClasses(["bg-white"]);
				container.addChild(output_24, {
					"colIndex": 0,
					"rowIndex": 6
				});
				var output_25 = new cpr.controls.Output("waferCL7");
				output_25.style.setClasses(["bg-white"]);
				container.addChild(output_25, {
					"colIndex": 0,
					"rowIndex": 5,
					"colSpan": 1,
					"rowSpan": 1
				});
				var output_26 = new cpr.controls.Output("waferCL8");
				output_26.style.setClasses(["bg-white"]);
				container.addChild(output_26, {
					"colIndex": 0,
					"rowIndex": 4
				});
				var output_27 = new cpr.controls.Output("waferCL9");
				output_27.style.setClasses(["bg-white"]);
				container.addChild(output_27, {
					"colIndex": 0,
					"rowIndex": 3
				});
				var output_28 = new cpr.controls.Output("waferCL10");
				output_28.style.setClasses(["bg-white"]);
				container.addChild(output_28, {
					"colIndex": 0,
					"rowIndex": 2
				});
				var output_29 = new cpr.controls.Output("waferCL11");
				output_29.style.setClasses(["bg-white"]);
				container.addChild(output_29, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_30 = new cpr.controls.Output("waferCL12");
				output_30.style.setClasses(["bg-white"]);
				container.addChild(output_30, {
					"colIndex": 0,
					"rowIndex": 0
				});
			})(group_12);
			container.addChild(group_12, {
				"top": "250px",
				"right": "4px",
				"width": "67px",
				"height": "176px"
			});
			
			var group_13 = new cpr.controls.Container("grp6");
			group_13.style.setClasses(["factory-wafers"]);
			// Layout
			var formLayout_5 = new cpr.controls.layouts.FormLayout();
			formLayout_5.topMargin = "1fr";
			formLayout_5.rightMargin = "2px";
			formLayout_5.bottomMargin = "1fr";
			formLayout_5.leftMargin = "2px";
			formLayout_5.horizontalSpacing = "2px";
			formLayout_5.verticalSpacing = "2px";
			formLayout_5.setColumns(["1fr", "15px"]);
			formLayout_5.setRows(["12px"]);
			group_13.setLayout(formLayout_5);
			(function(container){
				var output_31 = new cpr.controls.Output("opt25");
				output_31.style.setClasses(["bg-white"]);
				container.addChild(output_31, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_32 = new cpr.controls.Output("opt26");
				output_32.value = "01";
				output_32.style.setClasses(["fw-bold", "fs-small"]);
				container.addChild(output_32, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_13);
			container.addChild(group_13, {
				"top": "367px",
				"left": "0px",
				"width": "69px",
				"height": "22px"
			});
			
			var group_14 = new cpr.controls.Container();
			// Layout
			var formLayout_6 = new cpr.controls.layouts.FormLayout();
			formLayout_6.topMargin = "0px";
			formLayout_6.rightMargin = "0px";
			formLayout_6.bottomMargin = "0px";
			formLayout_6.leftMargin = "0px";
			formLayout_6.horizontalSpacing = "10px";
			formLayout_6.verticalSpacing = "0px";
			formLayout_6.setColumns(["1fr", "1fr", "1fr"]);
			formLayout_6.setRows(["5px", "1fr"]);
			group_14.setLayout(formLayout_6);
			(function(container){
				var button_1 = new cpr.controls.Button("LP1");
				button_1.value = "";
				button_1.style.setClasses(["btn-gray", "border", "border-secondary"]);
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var button_2 = new cpr.controls.Button("LP2");
				button_2.value = "";
				button_2.style.setClasses(["btn-gray", "border", "border-secondary"]);
				container.addChild(button_2, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var button_3 = new cpr.controls.Button("LP3");
				button_3.value = "";
				button_3.style.setClasses(["btn-gray", "border", "border-secondary"]);
				container.addChild(button_3, {
					"colIndex": 2,
					"rowIndex": 1
				});
				var output_33 = new cpr.controls.Output();
				output_33.style.setClasses(["bg-gray", "border", "border-secondary"]);
				output_33.style.css({
					"background-color" : "#9f3535"
				});
				container.addChild(output_33, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "center",
					"width": 45
				});
				var output_34 = new cpr.controls.Output();
				output_34.style.setClasses(["bg-gray", "border", "border-secondary"]);
				output_34.style.css({
					"background-color" : "#9f3535"
				});
				container.addChild(output_34, {
					"colIndex": 1,
					"rowIndex": 0,
					"horizontalAlign": "center",
					"width": 45
				});
				var output_35 = new cpr.controls.Output();
				output_35.style.setClasses(["bg-gray", "border", "border-secondary"]);
				output_35.style.css({
					"background-color" : "#9f3535"
				});
				container.addChild(output_35, {
					"colIndex": 2,
					"rowIndex": 0,
					"horizontalAlign": "center",
					"width": 45
				});
			})(group_14);
			container.addChild(group_14, {
				"top": "425px",
				"right": "70px",
				"left": "70px",
				"height": "72px"
			});
			
			var group_15 = new cpr.controls.Container("LLB");
			group_15.style.setClasses(["factory-wafers"]);
			group_15.style.css({
				"background-color" : "#92a369"
			});
			// Layout
			var formLayout_7 = new cpr.controls.layouts.FormLayout();
			formLayout_7.topMargin = "1fr";
			formLayout_7.rightMargin = "2px";
			formLayout_7.bottomMargin = "1fr";
			formLayout_7.leftMargin = "2px";
			formLayout_7.horizontalSpacing = "3px";
			formLayout_7.verticalSpacing = "3px";
			formLayout_7.setColumns(["15px", "1fr", "30px", "1fr", "15px"]);
			formLayout_7.setRows(["15px", "15px"]);
			group_15.setLayout(formLayout_7);
			(function(container){
				var output_36 = new cpr.controls.Output("opt29");
				output_36.value = "4";
				output_36.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_36, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_37 = new cpr.controls.Output("opt30");
				output_37.value = "2";
				output_37.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_37, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_38 = new cpr.controls.Output("opt31");
				output_38.style.setClasses(["bg-white"]);
				container.addChild(output_38, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_39 = new cpr.controls.Output("opt32");
				output_39.style.setClasses(["bg-white"]);
				container.addChild(output_39, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var output_40 = new cpr.controls.Output("opt39");
				output_40.style.setClasses(["bg-white"]);
				container.addChild(output_40, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var output_41 = new cpr.controls.Output("opt40");
				output_41.style.setClasses(["bg-white"]);
				container.addChild(output_41, {
					"colIndex": 3,
					"rowIndex": 1
				});
				var output_42 = new cpr.controls.Output("opt38");
				output_42.value = "3";
				output_42.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_42, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var output_43 = new cpr.controls.Output("opt37");
				output_43.value = "1";
				output_43.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_43, {
					"colIndex": 4,
					"rowIndex": 1
				});
				var output_44 = new cpr.controls.Output("opt27");
				output_44.value = "LLB";
				output_44.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_44, {
					"colIndex": 2,
					"rowIndex": 0
				});
			})(group_15);
			container.addChild(group_15, {
				"top": "227px",
				"width": "150px",
				"height": "47px",
				"left": "calc(50% - 75px)"
			});
			
			var group_16 = new cpr.controls.Container("LLA");
			group_16.style.setClasses(["factory-wafers", "cursor-pointer"]);
			group_16.style.css({
				"background-color" : "#92a369"
			});
			// Layout
			var formLayout_8 = new cpr.controls.layouts.FormLayout();
			formLayout_8.topMargin = "1fr";
			formLayout_8.rightMargin = "2px";
			formLayout_8.bottomMargin = "1fr";
			formLayout_8.leftMargin = "2px";
			formLayout_8.horizontalSpacing = "3px";
			formLayout_8.verticalSpacing = "3px";
			formLayout_8.setColumns(["15px", "1fr", "30px", "1fr", "15px"]);
			formLayout_8.setRows(["15px", "15px"]);
			group_16.setLayout(formLayout_8);
			(function(container){
				var output_45 = new cpr.controls.Output("waferLLA1");
				output_45.style.setClasses(["bg-white"]);
				container.addChild(output_45, {
					"colIndex": 3,
					"rowIndex": 1
				});
				var output_46 = new cpr.controls.Output("waferLLA2");
				output_46.style.setClasses(["bg-white"]);
				container.addChild(output_46, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var output_47 = new cpr.controls.Output("waferLLA3");
				output_47.style.setClasses(["bg-white"]);
				container.addChild(output_47, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var output_48 = new cpr.controls.Output("waferLLA4");
				output_48.style.setClasses(["bg-white"]);
				container.addChild(output_48, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_49 = new cpr.controls.Output("opt41");
				output_49.value = "1";
				output_49.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_49, {
					"colIndex": 4,
					"rowIndex": 1
				});
				var output_50 = new cpr.controls.Output("opt34");
				output_50.value = "2";
				output_50.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_50, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_51 = new cpr.controls.Output("opt42");
				output_51.value = "3";
				output_51.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_51, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var output_52 = new cpr.controls.Output("opt33");
				output_52.value = "4";
				output_52.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_52, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_53 = new cpr.controls.Output("opt28");
				output_53.value = "LLA";
				output_53.style.setClasses(["fw-bold", "fs-small", "text-center"]);
				container.addChild(output_53, {
					"colIndex": 2,
					"rowIndex": 0
				});
			})(group_16);
			container.addChild(group_16, {
				"top": "274px",
				"width": "150px",
				"height": "47px",
				"left": "calc(50% - 75px)"
			});
			
			var group_17 = new cpr.controls.Container("AR");
			group_17.clipContent = false;
			group_17.style.setClasses(["factory-robot", "wafer", "cursor-pointer"]);
			group_17.style.css({
				"background-color" : "#90e8e8",
				"background-image" : "none"
			});
			// Layout
			var xYLayout_10 = new cpr.controls.layouts.XYLayout();
			xYLayout_10.scrollable = false;
			xYLayout_10.animationDuration = 1.0;
			group_17.setLayout(xYLayout_10);
			(function(container){
			})(group_17);
			container.addChild(group_17, {
				"top": "330px",
				"right": "70px",
				"left": "70px",
				"height": "96px"
			});
			
			var group_18 = new cpr.controls.Container();
			// Layout
			var formLayout_9 = new cpr.controls.layouts.FormLayout();
			formLayout_9.topMargin = "0px";
			formLayout_9.rightMargin = "2px";
			formLayout_9.bottomMargin = "0px";
			formLayout_9.leftMargin = "2px";
			formLayout_9.horizontalSpacing = "3px";
			formLayout_9.verticalSpacing = "3px";
			formLayout_9.setColumns(["15px", "1fr", "30px", "1fr", "15px"]);
			formLayout_9.setRows(["1fr"]);
			group_18.setLayout(formLayout_9);
			(function(container){
				var output_54 = new cpr.controls.Output("LLBDoorEven");
				output_54.style.setClasses(["bg-gray"]);
				output_54.style.css({
					"background-color" : "#96acf6"
				});
				container.addChild(output_54, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_55 = new cpr.controls.Output("LLBDoorOdd");
				output_55.style.setClasses(["bg-gray"]);
				output_55.style.css({
					"background-color" : "#96acf6"
				});
				container.addChild(output_55, {
					"colIndex": 3,
					"rowIndex": 0
				});
			})(group_18);
			container.addChild(group_18, {
				"top": "217px",
				"width": "150px",
				"height": "11px",
				"left": "calc(50% - 75px)"
			});
			
			var group_19 = new cpr.controls.Container();
			// Layout
			var formLayout_10 = new cpr.controls.layouts.FormLayout();
			formLayout_10.topMargin = "0px";
			formLayout_10.rightMargin = "2px";
			formLayout_10.bottomMargin = "0px";
			formLayout_10.leftMargin = "2px";
			formLayout_10.horizontalSpacing = "3px";
			formLayout_10.verticalSpacing = "3px";
			formLayout_10.setColumns(["15px", "1fr", "30px", "1fr", "15px"]);
			formLayout_10.setRows(["1fr"]);
			group_19.setLayout(formLayout_10);
			(function(container){
				var output_56 = new cpr.controls.Output("LLADoorEven");
				output_56.style.setClasses(["bg-gray"]);
				output_56.style.css({
					"background-color" : "#96acf6"
				});
				container.addChild(output_56, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_57 = new cpr.controls.Output("LLADoorOdd");
				output_57.style.setClasses(["bg-gray"]);
				output_57.style.css({
					"background-color" : "#96acf6"
				});
				container.addChild(output_57, {
					"colIndex": 3,
					"rowIndex": 0
				});
			})(group_19);
			container.addChild(group_19, {
				"top": "320px",
				"width": "150px",
				"height": "11px",
				"left": "calc(50% - 75px)"
			});
		}
	});
	internalApp.title = "waferController";
	
	// Type declaration for waferController
	cpr.utils.Util.ensurePackage("udc.cmn").waferController = function(id){
		cpr.controls.UDCBase.call(this, "udc.cmn.waferController", internalApp, id);
	};
	
	udc.cmn.waferController.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.cmn.waferController.prototype, "type", {
		get : function(){
			return "udc.cmn.waferController";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.cmn.waferController
/// start - udc.ColumnTypeChg_udc
/*
 * UDC Qualified Name: udc.ColumnTypeChg_udc
 * App URI: udc/ColumnTypeChg_udc
 * Source Location: udc/ColumnTypeChg_udc.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ColumnTypeChg_udc", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * ColumnTypeChg.js
			 * Created at 2020. 6. 8. 오전 11:30:46.
			 *
			 * @author Youminsang
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return app.getAppProperty("value");
			};
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				var vcTab		 = app.lookup("fld1");		
				var vsSelectCtrl = app.getAppProperty("selectControl");
				var vnTabItemId	 = "";
					
				switch(vsSelectCtrl){
					case "InputBox" : vnTabItemId = "1";
					break;
					case "HtmlSnip" : vnTabItemId = "2";
					break;
					case "TextArea" : vnTabItemId = "3";
					break;
					case "ComboBox" : vnTabItemId = "4";
					break;		
				}
				
				var vcTabItem	 = vcTab.getTabItemByID(vnTabItemId);
				vcTab.setSelectedTabItem(vcTabItem);	
				vcTab.redraw();
				
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			app.declareBindableAppProperty("selectControl", null);
			var dataSet_1 = new cpr.data.DataSet("dsCmbCd");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "label1", "value": "value1"},
					{"label": "label2", "value": "value2"},
					{"label": "label3", "value": "value3"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var tabFolder_1 = new cpr.controls.TabFolder("fld1");
				tabFolder_1.hideHeader = true;
				tabFolder_1.style.body.css({
					"border-right-style" : "none",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"border-top-style" : "none"
				});
				
				var tabItem_1 = (function(tabFolder){
					var tabItem_1 = new cpr.controls.TabItem();
					tabItem_1.text = "Ipb";
					var group_2 = new cpr.controls.Container("grp2");
					// Layout
					var xYLayout_2 = new cpr.controls.layouts.XYLayout();
					group_2.setLayout(xYLayout_2);
					(function(container){
						var inputBox_1 = new cpr.controls.InputBox("ipb1");
						inputBox_1.bind("value").toAppProperty("value");
						container.addChild(inputBox_1, {
							"top": "0px",
							"right": "0px",
							"bottom": "0px",
							"left": "0px"
						});
					})(group_2);
					tabItem_1.content = group_2;
					return tabItem_1;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_1);
				
				var tabItem_2 = (function(tabFolder){
					var tabItem_2 = new cpr.controls.TabItem();
					tabItem_2.text = "HtmlSnip";
					var group_3 = new cpr.controls.Container("grp3");
					// Layout
					var xYLayout_3 = new cpr.controls.layouts.XYLayout();
					group_3.setLayout(xYLayout_3);
					(function(container){
						var hTMLSnippet_1 = new cpr.controls.HTMLSnippet("hsp1");
						hTMLSnippet_1.bind("value").toAppProperty("value");
						container.addChild(hTMLSnippet_1, {
							"top": "0px",
							"right": "0px",
							"bottom": "0px",
							"left": "0px"
						});
					})(group_3);
					tabItem_2.content = group_3;
					return tabItem_2;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_2);
				
				var tabItem_3 = (function(tabFolder){
					var tabItem_3 = new cpr.controls.TabItem();
					tabItem_3.text = "TextArea";
					var group_4 = new cpr.controls.Container("grp4");
					// Layout
					var xYLayout_4 = new cpr.controls.layouts.XYLayout();
					group_4.setLayout(xYLayout_4);
					(function(container){
						var textArea_1 = new cpr.controls.TextArea("txa1");
						textArea_1.bind("value").toAppProperty("value");
						container.addChild(textArea_1, {
							"top": "0px",
							"right": "0px",
							"bottom": "0px",
							"left": "0px"
						});
					})(group_4);
					tabItem_3.content = group_4;
					return tabItem_3;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_3);
				
				var tabItem_4 = (function(tabFolder){
					var tabItem_4 = new cpr.controls.TabItem();
					tabItem_4.text = "Cmb";
					var group_5 = new cpr.controls.Container("grp5");
					// Layout
					var xYLayout_5 = new cpr.controls.layouts.XYLayout();
					group_5.setLayout(xYLayout_5);
					(function(container){
						var comboBox_1 = new cpr.controls.ComboBox("cmb1");
						comboBox_1.bind("value").toAppProperty("value");
						(function(comboBox_1){
							comboBox_1.setItemSet(app.lookup("dsCmbCd"), {
								"label": "label",
								"value": "value"
							});
						})(comboBox_1);
						container.addChild(comboBox_1, {
							"top": "0px",
							"right": "0px",
							"bottom": "0px",
							"left": "0px"
						});
					})(group_5);
					tabItem_4.content = group_5;
					return tabItem_4;
				})(tabFolder_1);
				tabFolder_1.addTabItem(tabItem_4);
				tabFolder_1.setSelectedTabItem(tabItem_1);
				container.addChild(tabFolder_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "ColumnTypeChg_udc";
	
	// Type declaration for ColumnTypeChg_udc
	cpr.utils.Util.ensurePackage("udc").ColumnTypeChg_udc = function(id){
		cpr.controls.UDCBase.call(this, "udc.ColumnTypeChg_udc", internalApp, id);
	};
	
	udc.ColumnTypeChg_udc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ColumnTypeChg_udc.prototype, "type", {
		get : function(){
			return "udc.ColumnTypeChg_udc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ColumnTypeChg_udc.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.ColumnTypeChg_udc.prototype, "selectControl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("selectControl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("selectControl", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ColumnTypeChg_udc
/// start - udc.com.loadmask
/*
 * UDC Qualified Name: udc.com.loadmask
 * App URI: udc/com/loadmask
 * Source Location: udc/com/loadmask.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/loadmask", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/************************************************
			 * LoadMask.js
			 * Created at 2019. 9. 26. 오후 6:13:41.
			 *
			 * @author daye
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"background-color" : "rgba(0, 0, 0, 0.2)",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpLoad");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var image_1 = new cpr.controls.Image();
				image_1.src = "theme/images/icon_spinner.gif";
				(function(image_1){
				})(image_1);
				container.addChild(image_1, {
					"left": "100px",
					"width": "26px",
					"height": "26px",
					"top": "calc(50% - 13px)"
				});
				var output_1 = new cpr.controls.Output();
				output_1.value = "Loading...";
				container.addChild(output_1, {
					"left": "131px",
					"width": "69px",
					"height": "26px",
					"top": "calc(50% - 13px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "300px",
				"height": "200px",
				"left": "calc(50% - 150px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	internalApp.title = "loadmask";
	
	// Type declaration for loadmask
	cpr.utils.Util.ensurePackage("udc.com").loadmask = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.loadmask", internalApp, id);
	};
	
	udc.com.loadmask.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.loadmask.prototype, "type", {
		get : function(){
			return "udc.com.loadmask";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.loadmask
/// start - udc.com.udcHrmPStaffSrh
/*
 * UDC Qualified Name: udc.com.udcHrmPStaffSrh
 * App URI: udc/com/udcHrmPStaffSrh
 * Source Location: udc/com/udcHrmPStaffSrh.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/com/udcHrmPStaffSrh", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * udcHrmPStaffSrh.js
			 * Created at 2020. 09. 10.
			 *
			 * @author lms
			 ************************************************/
			var util = createCommonUtil();
			
			var openedByChange = false;
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				return app.lookup("ipbStaffNo").value;
			};
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "required"){
					var vcIpbCode = app.lookup("ipbStaffNo");
					//필수 입력 체크 조건 설정
					if(app.getAppProperty("required") === "Y"){
						vcIpbCode.fieldLabel = app.getHostProperty("fieldLabel");
						vcIpbCode.userAttr("required","Y");
					} else {
						vcIpbCode.userAttr("required","");
					}
				}
			}
			
			
			
			/*
			 * 구성원ID 조회 [btnPopParty] 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPopPartyClick(/* cpr.events.CMouseEvent */ e){
				// 검색어를 입력하고 팝업버튼을 누른경우, 이미 change 이벤트에 의해 팝업이 떠있기 때문에 다시 띄우지 않는다.
				if(openedByChange == true) {
					return false;
				}
				
				//팝업 호출
				doOpenPartyPopup(app.lookup("ipbStaffNo").value);
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpbPartyIdValueChange(/* cpr.events.CValueChangeEvent */ e){
				// 팝업호출 중인 경우에는 이벤트 Skip...
				if(openedByChange == true){
					return false;
				}
				
				// 변경된 값
				var vsStaffNo = e.newValue;
				// 입력내용 삭제시 팝업없이 관련내용 삭제 -> 삭제인데도, 아래의 체크처리가 이루워짐에 따라 불필요한 메시지 호출됨으로 막아준다.
				if(vsStaffNo == ""){
					// 데이터 Clear
					clearCallback();
					// 사용자 이벤트 Dispatch
					app.dispatchEvent(new cpr.events.CUIEvent("select"));
					return false;
				}
				
				// 검색 파라메터 셋팅
				var voDmParam = app.lookup("dmParam");
				voDmParam.setValue("strStaffNo", vsStaffNo);
				voDmParam.setValue("strStaffNm", app.getAppProperty("iName"));
				
				//조회 서브미션 호출
				var voParams = [{"mapper": "hrm-01"
								 ,"qry": ["selHrmMstList:dsStaff"]
				                 ,"outds": "dsStaff"
				                 ,"param": "dmParam"}];
				
			
				util.Submit.send(app, "subCheckStaff_tran", voParams, function(pbSuccess){
					if(pbSuccess) {
						var dsParty = app.lookup("dsStaff");
						// 검색결과가 1건이면 팝업없이 바로 값세팅
						if(dsParty.getRowCount() == 1){
							AppUtil.setAppProperty(app, "oStaffNo", dsParty.getValue(0, "STAFF_NO"));
							AppUtil.setAppProperty(app, "oSsn", dsParty.getValue(0, "SSN"));
							AppUtil.setAppProperty(app, "oNmKor", dsParty.getValue(0, "STAFF_NM"));
							AppUtil.setAppProperty(app, "oNmEng", dsParty.getValue(0, "STAFF_ENG_NM"));
							AppUtil.setAppProperty(app, "oBrtdy", dsParty.getValue(0, "BRTDY"));
							AppUtil.setAppProperty(app, "oGenderRcd", dsParty.getValue(0, "GENDER_RCD"));
							AppUtil.setAppProperty(app, "oLnrSlrDivRcd", dsParty.getValue(0, "LNR_SLR_DIV_RCD"));
							AppUtil.setAppProperty(app, "oNatRcd", dsParty.getValue(0, "NAT_RCD"));
							AppUtil.setAppProperty(app, "oOnffiStatRcd", dsParty.getValue(0, "ONOFFI_STAT_RCD"));
							AppUtil.setAppProperty(app, "oWkgrdRcd", dsParty.getValue(0, "WKGRD_RCD"));
							AppUtil.setAppProperty(app, "oDeptCd", dsParty.getValue(0, "DEPT_CD"));
							AppUtil.setAppProperty(app, "oDeptNm", dsParty.getValue(0, "DEPT_NM"));
							AppUtil.setAppProperty(app, "oCirStDt", dsParty.getValue(0, "CIR_ST_DT"));
							AppUtil.setAppProperty(app, "oEntcoDt", dsParty.getValue(0, "ENTCO_DT"));
							AppUtil.setAppProperty(app, "oRetiDt", dsParty.getValue(0, "RETI_DT"));
							AppUtil.setAppProperty(app, "oFinalScl", dsParty.getValue(0, "FINAL_SCL"));
							AppUtil.setAppProperty(app, "oAccrDivRcd", dsParty.getValue(0, "ACCR_DIV_RCD"));
							AppUtil.setAppProperty(app, "oEmail", dsParty.getValue(0, "EMAIL"));
							AppUtil.setAppProperty(app, "oAddr", dsParty.getValue(0, "ADDR"));
							AppUtil.setAppProperty(app, "oClpNo", dsParty.getValue(0, "CLP_NO"));
							
							app.lookup("ipbStaffNo").putValue(dsParty.getValue(0, "STAFF_NO"));
							
							app.dispatchEvent(new cpr.events.CUIEvent("search"));
						}else{
							// 검색결과가 여러건이면... 팝업 호출
							clearCallback();
							doOpenPartyPopup(vsStaffNo);
						}
					}
				});
			}
			
			/**
			 * 팝업을 호출한다.
			 */
			function doOpenPartyPopup(psPartyId){
				openedByChange = true;
				
				//초기 파라메터 셋팅
				var initValue = {
					strHostDiv: app.getAppProperty("iHostDiv"),
					strPartyId: psPartyId,
					strPartyDiv: app.getAppProperty("iPartyDiv"),
					strNm: app.getAppProperty("iName")
				};
			
				util.Dialog.open(app, "app/hrm/hrmPStaff", 650, 450, function(/**@type cpr.events.CUIEvent */e){
					/**@type cpr.controls.Dialog*/
					var dialog = e.control;
					var returnValue = dialog.returnValue;
					if(returnValue != null){
						AppUtil.setAppProperty(app, "oStaffNo", returnValue.STAFF_NO);
						AppUtil.setAppProperty(app, "oSsn", returnValue.SSN);
						AppUtil.setAppProperty(app, "oNmKor", returnValue.STAFF_NM);
						AppUtil.setAppProperty(app, "oNmEng", returnValue.STAFF_ENG_NM);
						AppUtil.setAppProperty(app, "oBrtdy", returnValue.BRTDY);
						AppUtil.setAppProperty(app, "oGenderRcd", returnValue.GENDER_RCD);
						AppUtil.setAppProperty(app, "oOnffiStatRcd", returnValue.NM_CHA);
						AppUtil.setAppProperty(app, "oLnrSlrDivRcd", returnValue.LNR_SLR_DIV_RCD);
						AppUtil.setAppProperty(app, "oNatRcd", returnValue.NAT_RCD);
						AppUtil.setAppProperty(app, "oOnffiStatRcd", returnValue.ONOFFI_STAT_RCD);
						AppUtil.setAppProperty(app, "oWkgrdRcd", returnValue.WKGRD_RCD);
						AppUtil.setAppProperty(app, "oDeptCd", returnValue.DEPT_CD);
						AppUtil.setAppProperty(app, "oDeptNm", returnValue.DEPT_NM);
						AppUtil.setAppProperty(app, "oCirStDt", returnValue.CIR_ST_DT);
						AppUtil.setAppProperty(app, "oEntcoDt", returnValue.ENTCO_DT);
						AppUtil.setAppProperty(app, "oRetiDt", returnValue.RETI_DT);
						AppUtil.setAppProperty(app, "oFinalScl", returnValue.FINAL_SCL);
						AppUtil.setAppProperty(app, "oAccrDivRcd", returnValue.ACCR_DIV_RCD);
						AppUtil.setAppProperty(app, "oEmail", returnValue.EMAIL);
						AppUtil.setAppProperty(app, "oAddr", returnValue.ADDR);
						AppUtil.setAppProperty(app, "oClpNo", returnValue.CLP_NO);
						
						app.lookup("ipbStaffNo").value = returnValue.STAFF_NO;
						
						app.dispatchEvent(new cpr.events.CUIEvent("search"));
					}
					
					openedByChange = false;
					
				}, initValue);
			}
			
			//App 속성값 Clear
			function clearCallback(){
				app.lookup("ipbStaffNo").putValue("");
				
				AppUtil.setAppProperty(app, "oStaffNo", "");
						AppUtil.setAppProperty(app, "oSsn", "");
						AppUtil.setAppProperty(app, "oNmKor", "");
						AppUtil.setAppProperty(app, "oNmEng", "");
						AppUtil.setAppProperty(app, "oBrtdy", "");
						AppUtil.setAppProperty(app, "oGenderRcd", "");
						AppUtil.setAppProperty(app, "oOnffiStatRcd", "");
						AppUtil.setAppProperty(app, "oLnrSlrDivRcd", "");
						AppUtil.setAppProperty(app, "oNatRcd", "");
						AppUtil.setAppProperty(app, "oOnffiStatRcd", "");
						AppUtil.setAppProperty(app, "oWkgrdRcd", "");
						AppUtil.setAppProperty(app, "oDeptCd", "");
						AppUtil.setAppProperty(app, "oDeptNm", "");
						AppUtil.setAppProperty(app, "oCirStDt", "");
						AppUtil.setAppProperty(app, "oEntcoDt", "");
						AppUtil.setAppProperty(app, "oRetiDt", "");
						AppUtil.setAppProperty(app, "oFinalScl", "");
						AppUtil.setAppProperty(app, "oAccrDivRcd", "");
						AppUtil.setAppProperty(app, "oEmail", "");
						AppUtil.setAppProperty(app, "oAddr", "");
						AppUtil.setAppProperty(app, "oClpNo", "");
			}
			
			/*
			 * 인풋 박스에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onIpbPartyIdKeydown(/* cpr.events.CKeyboardEvent */ e){
				if(e.keyCode == cpr.events.KeyCode.ENTER){
					e.preventDefault();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			app.declareBindableAppProperty("required", null);
			app.declareBindableAppProperty("iPartyDiv", null);
			app.declareBindableAppProperty("iHostDiv", null);
			app.declareBindableAppProperty("oStaffNo", null);
			app.declareBindableAppProperty("oNmKor", null);
			app.declareBindableAppProperty("oNmEng", null);
			app.declareBindableAppProperty("oOnffiStatRcd", null);
			app.declareBindableAppProperty("oGenderRcd", null);
			app.declareBindableAppProperty("oBrtdy", null);
			app.declareBindableAppProperty("oDeptCd", null);
			app.declareBindableAppProperty("oDeptNm", null);
			app.declareBindableAppProperty("oWkgrdRcd", null);
			app.declareBindableAppProperty("oCirStDt", null);
			app.declareBindableAppProperty("oNatRcd", null);
			app.declareBindableAppProperty("oLnrSlrDivRcd", null);
			app.declareBindableAppProperty("iName", null);
			app.declareBindableAppProperty("oEntcoDt", null);
			app.declareBindableAppProperty("oRetiDt", null);
			app.declareBindableAppProperty("oFinalScl", null);
			app.declareBindableAppProperty("oAccrDivRcd", null);
			app.declareBindableAppProperty("oEmail", null);
			app.declareBindableAppProperty("oAddr", null);
			app.declareBindableAppProperty("oClpNo", null);
			app.declareBindableAppProperty("oSsn", null);
			var dataSet_1 = new cpr.data.DataSet("dsStaff");
			dataSet_1.parseData({
				"columns" : [
					{"name": "PARTY_ID"},
					{"name": "STAFF_NO"},
					{"name": "SSN"},
					{"name": "STAFF_NM"},
					{"name": "STAFF_ENG_NM"},
					{"name": "BIRTHDAY"},
					{"name": "LNR_SLR_DIV_RCD"},
					{"name": "GENDER_RCD"},
					{"name": "NAT_RCD"},
					{"name": "ONOFFI_STAT_RCD"},
					{"name": "WKGRD_RCD"},
					{"name": "DEPT_CD"},
					{"name": "DEPT_NM"},
					{"name": "CIR_ST_DT"},
					{"name": "ENTCO_DT"},
					{"name": "RETI_DT"},
					{"name": "FINAL_SCL"},
					{"name": "ACCR_DIV_RCD"},
					{"name": "EMAIL"},
					{"name": "ADDR"},
					{"name": "CLP_NO"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dmParam");
			dataMap_1.parseData({
				"columns" : [
					{"name": "strStaffNo"},
					{"name": "strStaffNm"}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btnPopParty");
			button_1.style.setClasses(["btn-pop-search"]);
			if(typeof onBtnPopPartyClick == "function") {
				button_1.addEventListener("click", onBtnPopPartyClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "1px",
				"bottom": "0px",
				"width": "20px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipbStaffNo");
			inputBox_1.lengthUnit = "utf8";
			inputBox_1.maxLength = 15;
			inputBox_1.style.css({
				"text-align" : "center"
			});
			inputBox_1.bind("value").toAppProperty("value");
			if(typeof onIpbPartyIdValueChange == "function") {
				inputBox_1.addEventListener("value-change", onIpbPartyIdValueChange);
			}
			if(typeof onIpbPartyIdKeydown == "function") {
				inputBox_1.addEventListener("keydown", onIpbPartyIdKeydown);
			}
			container.addChild(inputBox_1, {
				"top": "0px",
				"right": "20px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "사원검색";
	
	// Type declaration for udcHrmPStaffSrh
	cpr.utils.Util.ensurePackage("udc.com").udcHrmPStaffSrh = function(id){
		cpr.controls.UDCBase.call(this, "udc.com.udcHrmPStaffSrh", internalApp, id);
	};
	
	udc.com.udcHrmPStaffSrh.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "type", {
		get : function(){
			return "udc.com.udcHrmPStaffSrh";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "required", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("required");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("required", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "iPartyDiv", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iPartyDiv");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iPartyDiv", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "iHostDiv", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iHostDiv");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iHostDiv", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oStaffNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oStaffNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oStaffNo", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oNmKor", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNmKor");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNmKor", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oNmEng", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNmEng");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNmEng", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oOnffiStatRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oOnffiStatRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oOnffiStatRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oGenderRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oGenderRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oGenderRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oBrtdy", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oBrtdy");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oBrtdy", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oDeptCd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oDeptCd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oDeptCd", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oDeptNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oDeptNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oDeptNm", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oWkgrdRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oWkgrdRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oWkgrdRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oCirStDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oCirStDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oCirStDt", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oNatRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oNatRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oNatRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oLnrSlrDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oLnrSlrDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oLnrSlrDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "iName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("iName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("iName", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oEntcoDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oEntcoDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oEntcoDt", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oRetiDt", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oRetiDt");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oRetiDt", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oFinalScl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oFinalScl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oFinalScl", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oAccrDivRcd", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oAccrDivRcd");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oAccrDivRcd", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oEmail", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oEmail");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oEmail", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oAddr", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oAddr");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oAddr", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oClpNo", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oClpNo");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oClpNo", newValue, true);
		}
	});
	Object.defineProperty(udc.com.udcHrmPStaffSrh.prototype, "oSsn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("oSsn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("oSsn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.com.udcHrmPStaffSrh
/// start - udc.flowChart.flow
/*
 * UDC Qualified Name: udc.flowChart.flow
 * App URI: udc/flowChart/flow
 * Source Location: udc/flowChart/flow.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/flowChart/flow", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * flow.js
			 * Created at 2020. 12. 8. 오전 10:03:22.
			 * 해당 UDC는 플로우 차트를 그리기 위해 작성된 UDC 입니다.
			 * 해당 UDC를 동작 시키기 위해서는 UDC를 사용하는 화면에서 drawProcess 함수를 실행시켜야 하며, 
			 * 필수적으로 dsChart, columnConfig에 대한 값을 집어넣어야 합니다.
			 * dsChart는 플로우 차트의 데이터를 구성하는 데이터셋객체이며,
			 * columnConfig는 차트를 구성하는데 필요한 데이터들을 가진 컬럼 명을 지정해야 합니다.
			 * @author HANS
			 ************************************************/
			
			var voDsColNms = {
				textCol: "processNm", //업무명이 담긴 컬럼명
				valueCol: "value", //업무별 파트를 구분할 컬럼입니다. 이 값이 동일한 업무들을 하나의 파트로 묶어서 화살표로 연걸하게 만듭니다.
				sortCol: "sortNum", //같은 파트의 업무에서 업무별 순서를 지정할 수 있는 컬럼입니다.
				arrowTargetCol: "arrowValue", //파트의 각 업무들은 다음 파트의 첫번째 업무에 화살표가 연결되나, 
				progressCol: "progress" //진행상태를 표시하는 컬럼명
			}
			
			var vnProcessWidth = 150; //업무 컴포넌트의 가로크기
			var vnProcessHeight = "40px"; //업무 컴포넌트의 세로크기
			var vnPartHeight = "50px"; //파트 최소크기 (스크립트를 통해 자동 크기를 사용합니다)
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function() {
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * 플로우차트에서 업무별로 직선 화살표 객체를 생성하여 이어주는 함수입니다.
			 */
			function drawArrow() {
				
				var vaProcessCont = app.getContainer().getChildren();
				var voActualRect = app.getHost().getActualRect();
				
				for (var i = 0; i < vaProcessCont.length - 1; i++) {
					
					/** @type cpr.controls.Container */
					var prev = vaProcessCont[i];
					/** @type cpr.controls.Container */
					var next = vaProcessCont[i + 1];
					prev.getAllRecursiveChildren().filter(function(each, idx) {
						return !(each instanceof cpr.controls.Output)
					}).forEach(function(each) {
						
						next.getAllRecursiveChildren().forEach(function(eachs, idxs) {
							if (!(eachs instanceof cpr.controls.Output)) {
								
								var nextChild = eachs.getActualRect().centerLeft;
								var prevChild = each.getActualRect().centerRight;
								//TODO 하나만 쫙 연결되게 해야합니다.
								var vnTarget = Number(each.userAttr("target"));
								var prevCtrls = prev.getAllRecursiveChildren().filter(function(each) {
									return !(each instanceof cpr.controls.Output);
								});
								var hansExceptNext = prevCtrls.map(function(each) {
									return Number(each.userAttr("target"));
								});
								hansExceptNext = _.uniq(hansExceptNext);
								hansExceptNext.splice(hansExceptNext.indexOf(0), 1);
								if (vnTarget != 0 && Number(eachs.userAttr("sortNum") == vnTarget) || vnTarget == 0 && hansExceptNext.indexOf(Number(eachs.userAttr("sortNum"))) == -1) {
									
									var vnLeft = prevChild.x;
									var vnTop = prevChild.y - 10;
									var voDifference = nextChild.getDifference(prevChild);
									var vnHeight = voDifference.height;
									if (voDifference.width > 0) {
										
										var arrow = new udc.flowChart.vector();
										if (vnHeight == 0) {
											vnHeight = 22;
										} else if (vnHeight < 0) {
											vnTop += vnHeight;
											vnHeight -= 20;
										} else {
											vnHeight += 20;
										}
										arrow.arrowBuild(vnHeight);
										
										app.getContainer().floatControl(arrow, {
											"left": vnLeft - voActualRect.left + "px",
											"top": vnTop - voActualRect.top + "px",
											"width": voDifference.width + 5 + "px",
											"height": Math.abs(vnHeight) + "px"
										});
									}
								}
							}
						});
					});
				}
			}
			
			/**
			 * 플로우차트에서 업무별로 대각선 화살표 객체를 생성하여 이어주는 함수입니다.
			 */
			function drawSvg() {
				
				var vaProcessCont = app.getContainer().getChildren();
				var aqqq = app.getHost().getActualRect();
				for (var i = 0; i < vaProcessCont.length - 1; i++) {
					
					/** @type cpr.controls.Container */
					var prev = vaProcessCont[i];
					/** @type cpr.controls.Container */
					var next = vaProcessCont[i + 1];
					var prevCtrls = prev.getAllRecursiveChildren().filter(function(each) {
						return !(each instanceof cpr.controls.Output);
					});
					var hansExceptNext = prevCtrls.map(function(each) {
						return Number(each.userAttr("target"));
					});
					hansExceptNext = _.uniq(hansExceptNext);
					hansExceptNext.splice(hansExceptNext.indexOf(0), 1);
					prevCtrls.forEach(function(each) {
						
						next.getAllRecursiveChildren().forEach(function(eachs) {
							
							//case 1: vnTarget != 0 && Number(each.userAttr("sortNum")) == vnTarget;
							//case 2: vnTarget == 0 && hansExceptNext.indexOf(Number(eachs.userAttr("sortNum"))) == -1;
							if (!(eachs instanceof cpr.controls.Output)) {
								//TODO 하나만 쫙 연결되게끔 해야합니다.
								var vnTarget = Number(each.userAttr("target"));
								if (vnTarget != 0 && Number(eachs.userAttr("sortNum") == vnTarget) || vnTarget == 0 && hansExceptNext.indexOf(Number(eachs.userAttr("sortNum"))) == -1) {
									var nextChild = eachs.getActualRect().centerLeft;
									var prevChild = each.getActualRect().centerRight;
									var left = prevChild.x;
									var top = prevChild.y;
									var differ = nextChild.getDifference(prevChild);
									var heights = differ.height;
									var arrow = new cpr.controls.HTMLSnippet();
									if (heights == 0) {
										var vnSvgWidth = differ.width - 5;
										arrow.value = '<svg width="100%" height="100%">' +
											'<defs>' +
											'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
											'markerWidth="3" markerHeight="6"' +
											'orient="auto-start-reverse">' +
											'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
											'</defs>' +
											'<line x1="0" y1="5" x2="' + vnSvgWidth + '" y2="5" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
											'</svg>';
										
										heights = 15;
									} else if (heights > 0) {
										heights += 10;
										var vnSvgEndX = differ.width - 5;
										var vnSvgEndY = heights - 5;
										arrow.value = '<svg width="100%" height="100%">' +
											"<defs>" +
											'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
											'markerWidth="3" markerHeight="6"' +
											'orient="auto-start-reverse">' +
											'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
											'</defs>' +
											'<line x1="0" y1="5" x2="' + vnSvgEndX + '" y2="' + vnSvgEndY + '" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
											'</svg>';
										
									} else {
										
										var vnSvgStartY = Math.abs(heights);
										heights += 5;
										var vnSvgEndX = differ.width - 5;
										arrow.value = '<svg width="100%" height="100%">' +
											"<defs>" +
											'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
											'markerWidth="3" markerHeight="6"' +
											'orient="auto-start-reverse">' +
											'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
											'</defs>' +
											'<line x1="0" y1="' + vnSvgStartY + '" x2="' + vnSvgEndX + '" y2="5" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
											'</svg>';
										top += heights;
									}
									
									app.getContainer().floatControl(arrow, {
										"left": left - aqqq.left + "px",
										"top": top - 5 - aqqq.top + "px",
										"width": differ.width + "px",
										"height": Math.abs(heights) + 10 + "px"
									});
									
								}
								//				}
							}
						});
					});
				}
			}
			
			/**
			 * 플로우차트에서 파트별 업무 객체를 생성하여 배치하는 함수입니다.해당함수를 사용하여 차트를 그릴 때, 차트를 그리기 위해 보낸 데이터셋과,
			 * udc 내의 데이터셋의 컬럼명, 그리고 udc의 스크립트의 최상단에 위치한 udc내 전역변수 voDsColNms의 컬럼명을 일치시켜야, 정상적으로 차트가 그려질 수 있습니다.
			 * progressCol:진행상태를 표시하는 컬럼, arrowTargetCol:다음 파트의 특정 sortCol업무를 찾아 이동, sortCol :같은 파트의 업무에서 업무별 순서를 지정, textCol : 업무명이 담긴 컬럼
			 * @param {cpr.data.DataSet} pcDataSet
			 * @param {Number} widths
			 * @param {{textCol : String, valueCol:String, sortCol:String,arrowTargetCol:String, progressCol:String}} poColumnConfig
			 */
			function drawProcess(pcDataSet, widths, poColumnConfig) {
				
				app.getContainer().removeAllChildren();
				
				/** @type cpr.data.DataSet */
				var vcDSet = pcDataSet;
				var vcDs = app.lookup("ds1");
				if (poColumnConfig != null && poColumnConfig != undefined) {
					voDsColNms = poColumnConfig;
				}
				
				if (vcDSet) {
					var voOriginColNm = vcDSet.getColumnNames();
					var voCopyColNm = vcDs.getColumnNames();
					
					try {
						if (voOriginColNm.toString() == voCopyColNm.toString()) {
							
							var voRowDatas = vcDSet.getRowDataRanged();
							vcDs.build(voRowDatas);
						} else {
							
							throw new Error("차트를 그리기 위해서 보낸 데이터셋과, udc내에서 사용하는 컬럼명이 일치하지 않아 플로우 차트를 그려지지 않읗 수 있습니다. flow udc내의 데이터셋과" +
								"상단의 전역변수인 voDsColNms에 담긴 컬럼명을 차트를 그리기 위해 보낸 데이터셋의 컬렴명과 일치시키십시오.");
						}
					} catch (err) {
						console.log(err);
					}
					
				}
				var vcDs = app.lookup("ds1");
				vcDs.setSort(voDsColNms.valueCol + " asc," + voDsColNms.sortCol + " asc");
				
				var vnRowCnt = vcDs.getRowCount();
				var vaUnfilteredCol = vcDs.getUnfilteredDistinctValues(voDsColNms.valueCol);
				var vnLength = vaUnfilteredCol.length;
				
				var voLayout = app.getContainer().getLayout();
				
				voLayout.horizontalSpacing = "30px";
				voLayout.verticalSpacing = "30px";
				var vnWhile = 0;
				var vnWhile2 = true;
				var vaCols = [];
				var voRows = [vnPartHeight];
				
				for (var i = 0; i < vaUnfilteredCol.length; i++) {
					
					if (vnWhile + vnProcessWidth < widths) {
						vnWhile += vnProcessWidth + 30;
						if (vnWhile2)
							vaCols.push(vnProcessWidth + "px");
					} else {
						voRows.push(vnPartHeight);
						vnWhile2 = false;
						vnWhile = vnProcessWidth;
						vaUnfilteredCol.splice(i, 0, vaUnfilteredCol[i - 1]);
						
					}
				}
				voRows.pop();
				voRows.push(vnProcessHeight);
				voLayout.setRows(voRows);
				voLayout.setColumns(vaCols);
				voRows.forEach(function(each, idx) {
					
					voLayout.setRowAutoSizing(idx, true);
				});
				
				vaUnfilteredCol.forEach(function(each, idx) {
					var allRow = vcDs.findAllRow(voDsColNms.valueCol + " =='" + each + "'");
					if (allRow.length > 0) {
						
						var vertical = new cpr.controls.Container();
						var vLayout = new cpr.controls.layouts.VerticalLayout();
						vLayout.spacing = 20;
						vertical.setLayout(vLayout);
						
						//			allRow.forEach(function(eachRow) {
						//				var vcProc = new udc.flowChart.process();
						//				vcProc.userAttr("target", eachRow.getValue(voDsColNms.arrowTargetCol));
						//				vcProc.textNm = eachRow.getValue(voDsColNms.textCol);
						//				vcProc.progress = eachRow.getValue(voDsColNms.progressCol);
						//				vertical.addChild(vcProc, {
						//					"width": "100px",
						//					"height": vnProcessHeight,
						//					"autoSize": "none"
						//				});
						//			});
						
						var a = allRow[allRow.length - 1].getNumber("sortNum");
						var b = allRow.map(function(each) {
							return each.getNumber("sortNum");
						});
						var q = 0;
						for (var i = 0; i <= a; i++) {
							
							if (b.indexOf(i) > -1) {
								var eachRow = allRow[q];
								var vcProc = new udc.flowChart.process();
								vcProc.userAttr("target", eachRow.getValue(voDsColNms.arrowTargetCol));
								vcProc.userAttr("sortNum", eachRow.getValue(voDsColNms.sortCol));
								vcProc.textNm = eachRow.getValue(voDsColNms.textCol);
								vcProc.progress = eachRow.getValue(voDsColNms.progressCol);
								vertical.addChild(vcProc, {
									"width": "100px",
									"height": vnProcessHeight,
									"autoSize": "none"
								});
								q++;
							} else {
								var tempOpt = new cpr.controls.Output();
								//					tempOpt.userAttr("target", eachRow.getValue(voDsColNms.arrowTargetCol));
								tempOpt.value = "";
								vertical.addChild(tempOpt, {
									"width": "100px",
									"height": vnProcessHeight,
									"autoSize": "none"
								});
							}
						}
						
						var vnCI = idx % vaCols.length;
						var vnRI = Math.floor(idx / vaCols.length);
						app.getContainer().addChild(vertical, {
							colIndex: vnCI,
							rowIndex: vnRI
						});
					}
					
				});
				cpr.core.DeferredUpdateManager.INSTANCE.update();
				
				if (app.getAppProperty("arrowType") == "straight") {
					
					drawArrow();
				} else if (app.getAppProperty("arrowType") == "diagonal") {
					
					drawSvg();
				}
				
			}
			
			exports.drawProcess = drawProcess;
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("dsChart", null);
			app.declareAppProperty("arrowType", "straight");
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"alterColumnLayout": "server",
				"columns": [
					{"name": "processNm"},
					{
						"name": "value",
						"dataType": "number"
					},
					{
						"name": "sortNum",
						"dataType": "number"
					},
					{
						"name": "arrowValue",
						"dataType": "number"
					},
					{"name": "progress"}
				],
				"rows": [
					{"processNm": "연간사업추진일정", "value": "1", "arrowValue": "0", "sortNum": "0"},
					{"processNm": "정보보호대책서", "value": "2", "arrowValue": "0", "sortNum": "0"},
					{"processNm": "사업예산산정", "value": "2", "arrowValue": "0", "sortNum": "1"},
					{"processNm": "체계규격심의", "value": "2", "arrowValue": "0", "sortNum": "2"},
					{"processNm": "사업계획수립", "value": "3", "arrowValue": "0", "sortNum": "0"},
					{"processNm": "제안요청서검토", "value": "4", "arrowValue": "0", "sortNum": "0"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyMeasureSize == "function"){
				app.getContainer().addEventListener("measure-size", onBodyMeasureSize);
			}
		}
	});
	internalApp.title = "flow";
	
	// Type declaration for flow
	cpr.utils.Util.ensurePackage("udc.flowChart").flow = function(id){
		cpr.controls.UDCBase.call(this, "udc.flowChart.flow", internalApp, id);
	};
	
	udc.flowChart.flow.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.flowChart.flow.prototype, "type", {
		get : function(){
			return "udc.flowChart.flow";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.flowChart.flow.prototype, "dsChart", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dsChart");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dsChart", newValue, true);
		}
	});
	Object.defineProperty(udc.flowChart.flow.prototype, "arrowType", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("arrowType");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("arrowType", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.flowChart.flow
/// start - udc.flowChart.process
/*
 * UDC Qualified Name: udc.flowChart.process
 * App URI: udc/flowChart/process
 * Source Location: udc/flowChart/process.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/flowChart/process", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * process.js
			 * Created at 2020. 12. 17. 오후 3:20:48.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("textNm", null);
			app.declareAppProperty("progress", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-left-color" : "black",
				"border-bottom-width" : "1px",
				"border-right-color" : "black",
				"border-right-style" : "solid",
				"border-bottom-color" : "black",
				"top" : "0px",
				"border-top-style" : "solid",
				"border-radius" : "5px",
				"left" : "0px",
				"border-top-color" : "black",
				"border-left-width" : "1px",
				"border-left-style" : "solid",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "";
			output_1.style.css({
				"text-align" : "center"
			});
			output_1.bind("value").toAppProperty("textNm");
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "";
			output_2.style.css({
				"text-align" : "center"
			});
			output_2.bind("value").toAppProperty("progress");
			output_2.style.bind("color").toExpression([
				"switch(value){",
				"\tcase \"완료\" : \"green\"",
				"\tcase \"진행중\": \"blue\"",
				"\tcase \"대기\" : \"red\"",
				"\tdefault : \"black\"",
				"}"
			].join("\n"));
			container.addChild(output_2, {
				"colIndex": 0,
				"rowIndex": 1,
				"horizontalAlign": "center",
				"verticalAlign": "bottom",
				"height": 20
			});
		}
	});
	internalApp.title = "process";
	
	// Type declaration for process
	cpr.utils.Util.ensurePackage("udc.flowChart").process = function(id){
		cpr.controls.UDCBase.call(this, "udc.flowChart.process", internalApp, id);
	};
	
	udc.flowChart.process.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.flowChart.process.prototype, "type", {
		get : function(){
			return "udc.flowChart.process";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.flowChart.process.prototype, "textNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("textNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("textNm", newValue, true);
		}
	});
	Object.defineProperty(udc.flowChart.process.prototype, "progress", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("progress");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("progress", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.flowChart.process
/// start - udc.flowChart.vector
/*
 * UDC Qualified Name: udc.flowChart.vector
 * App URI: udc/flowChart/vector
 * Source Location: udc/flowChart/vector.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/flowChart/vector", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hitman.js
			 * Created at 2020. 12. 14. 오전 9:26:39.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * 
			 * @param {Number} height
			 */
			exports.arrowBuild = function(height) {
				
				var vnHeight = height;
				
				var vcArrow = app.lookup("arrow");
				var vcCont1 = app.lookup("grp1");
				var vcCont2 = app.lookup("grp2");
				if (vnHeight > 0) {
					vcCont1.style.setClasses("");
					vcCont2.style.setClasses("");
					vcCont1.style.addClass("top-border");
					vcCont2.style.addClass("bottom-border");
					app.lookup("arrow").style.css("top", vnHeight - 25 + "px");
				} 
				else {
					vcCont1.style.setClasses("");
					vcCont2.style.setClasses("");
					vcCont1.style.addClass("bottom-border");
					vcCont2.style.addClass("top-border");
					app.lookup("arrow").style.css("top", vnHeight - 25 + "px");
				}
				
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("arrowRect", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "1fr", "10px"]);
			formLayout_1.setRows(["10px", "1fr", "1fr", "10px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_1);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_2 = new cpr.controls.Container("grp2");
			group_2.style.css({
				"border-left-style" : "solid",
				"border-left-color" : "black",
				"border-left-width" : "2px"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_2);
			(function(container){
			})(group_2);
			container.addChild(group_2, {
				"colIndex": 1,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var output_1 = new cpr.controls.Output("arrow");
			output_1.value = "";
			output_1.style.setClasses(["arrow-right"]);
			container.addChild(output_1, {
				"colIndex": 2,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "\t<style type='text/css'>\r\n\t.cl-container.top-border{\r\n\t\tborder-top : solid 2px black;\r\n\t}\r\n\t.cl-container.bottom-border{\r\n\t\tborder-bottom : solid 2px black;\r\n\t}\r\n\t.cl-output.arrow-right{\r\n\twidth : 0;\r\n\theight : 0;\r\n\tborder-left :  4px solid black;\r\n\tborder-top : 4px solid transparent;\r\n\tborder-bottom : 4px solid transparent;\r\n}\r\n\t\t<\/style>";
			container.addChild(hTMLSnippet_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 2,
				"rowSpan": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "vector";
	
	// Type declaration for vector
	cpr.utils.Util.ensurePackage("udc.flowChart").vector = function(id){
		cpr.controls.UDCBase.call(this, "udc.flowChart.vector", internalApp, id);
	};
	
	udc.flowChart.vector.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.flowChart.vector.prototype, "type", {
		get : function(){
			return "udc.flowChart.vector";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.flowChart.vector.prototype, "arrowRect", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("arrowRect");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("arrowRect", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.flowChart.vector
/// start - udc.grids.gridFilter
/*
 * UDC Qualified Name: udc.grids.gridFilter
 * App URI: udc/grids/gridFilter
 * Source Location: udc/grids/gridFilter.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/grids/gridFilter", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * gridFilter.js
			 * Created at 2020. 9. 24. 오후 4:18:41.
			 *
			 * @author csj
			 ************************************************/
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			
				var ds1 = app.lookup("ds1");
				
				/** @type cpr.controls.Grid */
				var grid = app.getAppProperty("grid");
				
				//컬럼 실제 width값
				var columnWidth = grid.header.getColumn(0).context.columnLayout 
				
				for(var i = 0; i < grid.header.cellCount; i++){
					app.lookup("ds1").addRowData({
						headerNm : grid.header.getColumn(i).text,
						columnWidth : columnWidth[i].width
					})
					
					//보이는 헤더컬럼 체크를 한다.
					if(grid.header.getColumn(i).visible == true){
						app.lookup("grd1").setCheckRowIndex(i, true);
					}
				}
			}
			
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				app.dispatchEvent(new cpr.events.CUIEvent("cnclClick"));
				app.close();
			}
			
			
			/*
			 * "확인" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** @type cpr.controls.Grid */
				var grid = app.getAppProperty("grid");
				
				var vaSelectIndex = app.lookup("grd1").getCheckRowIndices();
				var cnt = app.lookup("ds1").getRowCount();
				for(var i=0;i<cnt;i++){
					//모든 컬럼숨김
					grid.header.getColumn(i).visible = false;
					for(var j=0;j<vaSelectIndex.length;j++){
						//체크된 컬럼만 보임
						if(i == vaSelectIndex[j]){
							grid.header.getColumn(i).visible = true;
							grid.header.getColumn(0).context.columnLayout[i].width = parseInt(app.lookup("ds1").getValue(i, "columnWidth"));
						}
					}
				}
				grid.redraw();
				
				app.dispatchEvent(new cpr.events.CUIEvent("okClick"));
				app.close();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("grid", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns" : [
					{"name": "headerNm"},
					{"name": "columnWidth"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-left-color" : "black",
				"border-bottom-width" : "1px",
				"border-right-color" : "black",
				"border-right-style" : "solid",
				"background-color" : "white",
				"border-bottom-color" : "black",
				"top" : "0px",
				"border-top-style" : "solid",
				"left" : "0px",
				"border-top-color" : "black",
				"border-left-width" : "1px",
				"border-left-style" : "solid",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "5px";
			formLayout_1.verticalSpacing = "5px";
			formLayout_1.setColumns(["1fr", "1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["30px", "1fr", "20px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "컬럼 설정";
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 4,
				"rowSpan": 1
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"autoFit": "1, 2",
				"columns": [
					{"width": "25px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "headerNm";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "컬럼명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "columnWidth";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "너비(px)";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "headerNm";
								cell.style.css({
									"cursor" : "pointer",
									"text-align" : "left"
								});
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "columnWidth";
								cell.control = (function(){
									var inputBox_1 = new cpr.controls.InputBox("ipb1");
									inputBox_1.bind("value").toDataColumn("columnWidth");
									return inputBox_1;
								})();
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 4,
				"rowSpan": 1
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "확인";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"colIndex": 1,
				"rowIndex": 2
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "취소";
			if(typeof onButtonClick == "function") {
				button_2.addEventListener("click", onButtonClick);
			}
			container.addChild(button_2, {
				"colIndex": 2,
				"rowIndex": 2
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "gridFilter";
	
	// Type declaration for gridFilter
	cpr.utils.Util.ensurePackage("udc.grids").gridFilter = function(id){
		cpr.controls.UDCBase.call(this, "udc.grids.gridFilter", internalApp, id);
	};
	
	udc.grids.gridFilter.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.grids.gridFilter.prototype, "type", {
		get : function(){
			return "udc.grids.gridFilter";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.grids.gridFilter.prototype, "grid", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("grid");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("grid", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.grids.gridFilter
/// start - udc.grids.gridFilter2
/*
 * UDC Qualified Name: udc.grids.gridFilter2
 * App URI: udc/grids/gridFilter2
 * Source Location: udc/grids/gridFilter2.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/grids/gridFilter2", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * gridFIlter2.js
			 * Created at 2020. 10. 12. 오전 9:45:25.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function() {
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				
				/** @type cpr.controls.UIControl */
				var vcGrid = app.getAppProperty("gridControl");
				
				if (vcGrid instanceof cpr.controls.Grid) {
					
					var voColumnLayout = vcGrid.getColumnLayout();
					vcGrid.setColumnLayout(voColumnLayout);
					
					var voHeader = voColumnLayout.header;
					
					var vaColName = [];
					voHeader.forEach(function(each) {
						
						vaColName.push(vcGrid.header.getColumn(each.cellIndex).getText());
						
					});
					var vaGridData = [];
					var vsGridWidth = vcGrid.getActualRect().width;
					var abc = 0;
					voColumnLayout.columnLayout.forEach(function(each, idx) {
						if (each.visible) {
							
							abc += each.width;
						}
					});
					vaColName.forEach(function(each, idx) {
						
						var voTempData = {
							"COL_NM": each,
							"width": 0,
							"visible": "",
							"autoFit": "",
							"CELL_IDX": 0
						};
						
						var voColLayout = voColumnLayout.columnLayout[idx];
			//			var resultWidth;
			//			if (voColLayout.visible) {
			//				if (voColLayout.autoFit) {
			//					resultWidth = Math.round(vsGridWidth * voColLayout.width / abc);
			//				} else {
			//					resultWidth = voColLayout.width;
			//				}
			//			} else {
			//				resultWidth = 0;
			//			}
						voTempData.width = voColLayout.width;
						voTempData.visible = voColLayout.visible;
						voTempData.autoFit = voColLayout.autoFit;
						voTempData.CELL_IDX = voColumnLayout.header[idx].cellIndex;
						vaGridData.push(voTempData);
					});
					
					app.lookup("ds1").build(vaGridData);
					
					vcGrid.redraw();
				}
				
			}
			
			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.dispatchEvent(new cpr.events.CUIEvent("btnCl"));
				app.close();
			}
			
			/*
			 * "확인" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				/** @type cpr.controls.Grid */
				var vcGrid = app.getAppProperty("gridControl");
				
				var vcDs = app.lookup("ds1");
				
				var voColLayout = vcGrid.getColumnLayout();
				
				var vnAllWidth = 0;
				
				voColLayout.columnLayout.forEach(function(each) {
					
					vnAllWidth += each.width;
				});
				
				var vnGridWidthRect = vcGrid.getActualRect().width;
				var a = voColLayout.columnLayout;
				voColLayout.columnLayout = [];
				var vaVisibles = [];
				var vsVisi = "";
				vcDs.getRowDataRanged().forEach(function(each, idx) {
					
			//		var realWidth = each.autoFit == "true" ? Math.round(each.width * (vnAllWidth - a[idx].width) / (vnGridWidthRect - each.width)) : each.width;
			//		a[idx].width = realWidth;
					var colLayout = {
						width: each.width,
						visible: each.visible == "true" ? true : false,
						autoFit: each.autoFit == "true" ? true : false
					}
					vaVisibles.push({
						"visi": each.visible,
						"idxs": each.CELL_IDX
					});
					if (each.autoFit == "true") {
						vsVisi += each.CELL_IDX + ",";
					}
					voColLayout.columnLayout.push(colLayout);
				});
				
				vcGrid.setColumnLayout(voColLayout);
				
				vaVisibles.forEach(function(each) {
					
					vcGrid.columnVisible(each.idxs, each.visi == "true" ? true : false);
				});
				
				vsVisi = vsVisi.substring(0, vsVisi.length - 1);
				vcGrid.autoFit = vsVisi;
				console.log()
				vcGrid.redraw();
				app.dispatchEvent(new cpr.events.CUIEvent("btnCl"));
				app.close();
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("gridControl", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"stateRestore": true,
				"columns": [
					{"name": "COL_NM"},
					{
						"name": "width",
						"dataType": "number"
					},
					{"name": "visible"},
					{"name": "autoFit"},
					{
						"name": "CELL_IDX",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-right-style" : "solid",
				"background-color" : "#ffffff",
				"border-top-color" : "lightgray",
				"top" : "0px",
				"border-top-style" : "solid",
				"left" : "0px",
				"border-right-color" : "lightgray",
				"border-left-width" : "1px",
				"border-left-style" : "solid",
				"border-left-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-bottom-color" : "lightgray",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["32px", "1fr", "32px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "그리드 설정창";
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 2,
				"rowSpan": 1
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "확인";
			if(typeof onButtonClick2 == "function") {
				button_1.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_1, {
				"colIndex": 0,
				"rowIndex": 2
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "취소";
			if(typeof onButtonClick == "function") {
				button_2.addEventListener("click", onButtonClick);
			}
			container.addChild(button_2, {
				"colIndex": 1,
				"rowIndex": 2
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "visible";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "숨김처리";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "COL_NM";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "컬럼명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "width";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "너비(px)";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.text = "자동크기";
								cell.control = (function(){
									var output_2 = new cpr.controls.Output();
									output_2.tooltip = "그리드에 여유공간이 남을 경우, 지정된 크기에서\r\n자동으로 크기를 늘려서 사용할지에 대한 여부를 표시합니다.";
									output_2.value = "Output";
									output_2.style.css({
										"text-align" : "center"
									});
									return output_2;
								})();
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "visible";
								cell.control = (function(){
									var checkBox_1 = new cpr.controls.CheckBox("cbx1");
									checkBox_1.falseValue = "false";
									checkBox_1.bind("value").toDataColumn("visible");
									return checkBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "COL_NM";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "width";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
									numberEditor_1.bind("value").toDataColumn("width");
									return numberEditor_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "autoFit";
								cell.control = (function(){
									var checkBox_2 = new cpr.controls.CheckBox("cbx2");
									checkBox_2.falseValue = "false";
									checkBox_2.bind("value").toDataColumn("autoFit");
									return checkBox_2;
								})();
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 2,
				"rowSpan": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "gridFilter2";
	
	// Type declaration for gridFilter2
	cpr.utils.Util.ensurePackage("udc.grids").gridFilter2 = function(id){
		cpr.controls.UDCBase.call(this, "udc.grids.gridFilter2", internalApp, id);
	};
	
	udc.grids.gridFilter2.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.grids.gridFilter2.prototype, "type", {
		get : function(){
			return "udc.grids.gridFilter2";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.grids.gridFilter2.prototype, "gridControl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridControl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridControl", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.grids.gridFilter2
/// start - udc.grids.gridFitButton
/*
 * UDC Qualified Name: udc.grids.gridFitButton
 * App URI: udc/grids/gridFitButton
 * Source Location: udc/grids/gridFitButton.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/grids/gridFitButton", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * gridFitButton.js
			 * Created at 2020. 9. 29. 오전 10:10:04.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * "B" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				
				var voHostAppIns = app.getHostAppInstance();
				
				
				
				var voLocation = app.getHost().getActualRect();
				
				var voConstraint = {
					right : document.body.offsetWidth- voLocation.width - voLocation.left+"px",
					top : voLocation.bottom+"px",
					width : "430px",
					height : "490px"
				}	
				
				
				
				var vbBool = voHostAppIns.getContainer().getAllRecursiveChildren().every(function(each){
					return each.type != "udc.grids.gridFilter2";
				});
				if(vbBool){
					
					var vcUdc = new udc.grids.gridFilter2();
					vcUdc.gridControl = app.getAppProperty("gridControl");
					voHostAppIns.getContainer().floatControl(vcUdc, voConstraint);
					
					vcUdc.addEventListener("btnCl", function(e){
						
						vcUdc.dispose();
					});
				}
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				/** @type cpr.controls.Grid */
				var vcGrid = app.getAppProperty("gridControl");
				
				if(vcGrid && vcGrid instanceof cpr.controls.Grid) {
			//		vcGrid.autoFit = "none";
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("gridControl", null);
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "B";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "gridFitButton";
	
	// Type declaration for gridFitButton
	cpr.utils.Util.ensurePackage("udc.grids").gridFitButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.grids.gridFitButton", internalApp, id);
	};
	
	udc.grids.gridFitButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.grids.gridFitButton.prototype, "type", {
		get : function(){
			return "udc.grids.gridFitButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.grids.gridFitButton.prototype, "gridControl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridControl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridControl", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.grids.gridFitButton
/// start - udc.han.cmb
/*
 * UDC Qualified Name: udc.han.cmb
 * App URI: udc/han/cmb
 * Source Location: udc/han/cmb.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/han/cmb", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * cmb.js
			 * Created at 2021. 1. 5. 오전 10:09:25.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * Select DOM의 value change 이벤트를 처리합니다.
			 */
			function selectListener(/* Event */ e){
				// 앱의 value 속성 변경
				app.setAppProperty("value", e.target.value, true);
						
				// value-change 이벤트 디스패치.
				var changeEvent = new cpr.events.CValueChangeEvent("value-change", {
					newValue:e.target.value
				});
				
				app.dispatchEvent(changeEvent);
			}
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shell = e.control;
				var rootDiv = e.content;
				
				var select = document.createElement("select");
				select.style.position = "absolute";
				select.style.width = "100%";
				select.style.height = "100%";
				select.style.borderRadius = "0px";
				select.setAttribute("class", "cl-control cl-combobox cl-text");
				select.style["-webkit-appearance"] = "none";
				
					var currentValue = app.getAppProperty("value");
					
					/** @type {cpr.data.DataSet} */
					var dataSet = app.getAppProperty("targetDs")
					var labelColumnName = app.getAppProperty("labelC");
					var valueColumnName = app.getAppProperty("valueC");
					
						select.disabled = false;
						select.style.background = "#fff";
					
					var rowCount = dataSet.getRowCount();
					var row;
					var option = document.createElement("option");
					option.setAttribute("value","");
					select.appendChild(option);
					for(var idx = 0;idx < rowCount;idx++){
						(function(){
							var row = dataSet.getRow(idx);
							var option = document.createElement("option");
							var value = row.getValue(valueColumnName);
							option.setAttribute("value", value);
							option.textContent = row.getValue(labelColumnName);
							if(value == currentValue){
								option.setAttribute("selected", true);
							}
							select.appendChild(option);
						})();
					}
					select.addEventListener("change", selectListener);
				
				e.content.appendChild(select);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("targetDs", null);
			app.declareAppProperty("labelC", null);
			app.declareAppProperty("valueC", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "cmb";
	
	// Type declaration for cmb
	cpr.utils.Util.ensurePackage("udc.han").cmb = function(id){
		cpr.controls.UDCBase.call(this, "udc.han.cmb", internalApp, id);
	};
	
	udc.han.cmb.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.han.cmb.prototype, "type", {
		get : function(){
			return "udc.han.cmb";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.han.cmb.prototype, "targetDs", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("targetDs");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("targetDs", newValue, true);
		}
	});
	Object.defineProperty(udc.han.cmb.prototype, "labelC", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("labelC");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("labelC", newValue, true);
		}
	});
	Object.defineProperty(udc.han.cmb.prototype, "valueC", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("valueC");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("valueC", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.han.cmb
/// start - udc.han.DateInput
/*
 * UDC Qualified Name: udc.han.DateInput
 * App URI: udc/han/DateInput
 * Source Location: udc/han/DateInput.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/han/DateInput", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onUIControlShellLoad(/* cpr.events.CUIEvent */ e){
				
				/**
				 * @type {HTMLDivElement}
				 */
				var shellElement = e.content;
				var shell = e.control;
				var input = document.createElement("input");
			
				input.type="time";
				input.value = app.getAppProperty("value");
				input.style.width ="100%";
			//	input.classList.add("cl-text");
			
				input.addEventListener("change",function(evt){
					var oldValue = app.getAppProperty("value");
					//var splitNewValue = evt.target.value.split('-'); 	// 업무단에서 처리
					//var newValue = splitNewValue[0] + splitNewValue[1] + splitNewValue[2];  // 업무단에서 처리
					var newValue = evt.target.value;
					
					var prevent = app.dispatchEvent(new cpr.events.CValueChangeEvent("before-value-change",{"newValue":newValue,"oldValue":oldValue}));
					if(!prevent){
						evt.preventDefault();
						evt.target.value = oldValue;
						return;
					}
					app.setAppProperty("value", newValue, true);
					app.dispatchEvent(new cpr.events.CValueChangeEvent("value-change",{"newValue":newValue,"oldValue":oldValue}));
				});
				input.addEventListener("focus",function(evt){
					shell.style.addClass("cl-focus");
				});
				input.addEventListener("blur",function(evt){
					shell.style.removeClass("cl-focus");
				});
				shellElement.appendChild(input);
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				app.getContainer().redraw();
			}
			
			exports.getText = function(){
				var value = app.getAppProperty("value");
				if(!value){
					return
				}
				return value.toLocaleString();
			};;
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", 0);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell();
			uIControlShell_1.style.setClasses(["cl-dateinput"]);
			if(typeof onUIControlShellLoad == "function") {
				uIControlShell_1.addEventListener("load", onUIControlShellLoad);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "DateInput";
	
	// Type declaration for DateInput
	cpr.utils.Util.ensurePackage("udc.han").DateInput = function(id){
		cpr.controls.UDCBase.call(this, "udc.han.DateInput", internalApp, id);
	};
	
	udc.han.DateInput.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.han.DateInput.prototype, "type", {
		get : function(){
			return "udc.han.DateInput";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.han.DateInput.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.han.DateInput
/// start - udc.han.DateInput_P
/*
 * UDC Qualified Name: udc.han.DateInput_P
 * App URI: udc/han/DateInput_P
 * Source Location: udc/han/DateInput_P.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/han/DateInput_P", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onUIControlShellLoad(/* cpr.events.CUIEvent */ e){
				
				/**
				 * @type {HTMLDivElement}
				 */
				var shellElement = e.content;
				var shell = e.control;
				var input = document.createElement("input");
			
				input.type="date";
				input.value = app.getAppProperty("value");
				input.style.width ="100%";
				input.classList.add("cl-text");
				
				var disabled = app.getAppProperty("disabled");
				if (disabled) {
					input.disabled = true;
					shellElement.style.background = "#cccccc";
				} else {
					input.disabled = false;
				}
			
				input.addEventListener("change",function(evt){
					var oldValue = app.getAppProperty("value");
					//var splitNewValue = evt.target.value.split('-'); 	// 업무단에서 처리
					//var newValue = splitNewValue[0] + splitNewValue[1] + splitNewValue[2];  // 업무단에서 처리
					var newValue = evt.target.value;
					
					var prevent = app.dispatchEvent(new cpr.events.CValueChangeEvent("before-value-change",{"newValue":newValue,"oldValue":oldValue}));
					if(!prevent){
						evt.preventDefault();
						evt.target.value = oldValue;
						return;
					}
					app.setAppProperty("value", newValue, true);
					app.dispatchEvent(new cpr.events.CValueChangeEvent("value-change",{"newValue":newValue,"oldValue":oldValue}));
				});
				input.addEventListener("focus",function(evt){
					shell.style.addClass("cl-focus");
				});
				input.addEventListener("blur",function(evt){
					shell.style.removeClass("cl-focus");
				});
				shellElement.appendChild(input);
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				app.getContainer().redraw();
			}
			
			exports.getText = function(){
				var value = app.getAppProperty("value");
				if(!value){
					return
				}
				return value.toLocaleString();
			};;
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", 0);
			app.declareAppProperty("disabled", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell();
			uIControlShell_1.style.setClasses(["cl-dateinput"]);
			uIControlShell_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "#fddebb",
				"border-right-width" : "1px",
				"border-left-color" : "#fddebb",
				"font-size" : "0.9em",
				"border-right-color" : "#fddebb",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-top-color" : "#fddebb",
				"border-bottom-style" : "solid"
			});
			if(typeof onUIControlShellLoad == "function") {
				uIControlShell_1.addEventListener("load", onUIControlShellLoad);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "DateInput_P";
	
	// Type declaration for DateInput_P
	cpr.utils.Util.ensurePackage("udc.han").DateInput_P = function(id){
		cpr.controls.UDCBase.call(this, "udc.han.DateInput_P", internalApp, id);
	};
	
	udc.han.DateInput_P.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.han.DateInput_P.prototype, "type", {
		get : function(){
			return "udc.han.DateInput_P";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.han.DateInput_P.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.han.DateInput_P.prototype, "disabled", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("disabled");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("disabled", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.han.DateInput_P
/// start - udc.han.LoadPortStatusBox
/*
 * UDC Qualified Name: udc.han.LoadPortStatusBox
 * App URI: udc/han/LoadPortStatusBox
 * Source Location: udc/han/LoadPortStatusBox.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/han/LoadPortStatusBox", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * LoadPortStatusBox.js
			 * Created at 2021. 6. 14. 오전 10:37:18.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * 
			 * @param {Number} pnNumber
			 */
			cpr.expression.ExpressionEngine.INSTANCE.registerFunction("getTranslatedColor",function(pnNumber){
				var vsReturnColor = "";
				switch(pnNumber){
					case 0 :
						vsReturnColor = "blue";
						break;
					case 1 :
						vsReturnColor = "skyblue";
						break;
					case 2 :
						vsReturnColor = "green";
						break;
					case 3 :
						vsReturnColor = "yellow";
						break;
					case 4 :
						vsReturnColor = "red";
						break;
					case 5 :
						vsReturnColor = "orange";
						break;
					default :
						vsReturnColor = ""
						break;
				}
				return vsReturnColor;
			});
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			exports.dataConnect = function(){
				/** @type cpr.data.DataMap */
				var vcLPDm = app.getAppProperty("lpDataMap");
				
				var vcDm = app.lookup("dmLP");
				
				var voBuildData = vcLPDm.getDatas();
				var vsReplaced = app.getAppProperty("targetId");
				
				
				var vaKeys = Object.keys(voBuildData);
				vaKeys.forEach(function(each){
					
					var repl = each.replace(vsReplaced, "LP");
					voBuildData[repl] = voBuildData[each];
					delete voBuildData[each];
				});
				vcDm.build(voBuildData);
				app.getContainer().redraw();
			}
			
			
			/*
			 * 데이터맵에서 load 이벤트 발생 시 호출.
			 * build 메소드에 의해 데이터 구조가 재구성될 때 발생하는 이벤트. 초기 생성시에도 발생합니다.
			 */
			function onDmLPLoad(/* cpr.events.CDataEvent */ e){
				/** 
				 * @type cpr.data.DataMap
				 */
				var dmLP = e.control;
				
				var vnCnt = dmLP.getValue("CTC__LP_WfrCount");
				var vnFoupExist = dmLP.getValue("LP__FoupPlacedStatus");
				var vcFoup = app.lookup("grpFoup");
				var voFormLayout = app.getContainer().getLayout();
				
				if (vnFoupExist == 1) {
					
					voFormLayout.setRowVisible(2, true);
					var voFoupLayout = app.lookup("grpFoup").getLayout();
					var vnLength = voFoupLayout.getColumns().length;
					
					for (var i = vnCnt; i < vnLength; i++) {
						
						voFoupLayout.setColumnVisible(i, false);
					}
					
				} else if (vnFoupExist == 0) {
					
					voFormLayout.setRowVisible(2, false);
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("lpDataMap", null);
			app.declareAppProperty("targetId", "LP");
			var dataMap_1 = new cpr.data.DataMap("dmLP");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "LP",
						"defaultValue": "LP"
					},
					{
						"name": "CTC.LP_Exist",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_UsageType",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_WfrCount",
						"dataType": "number"
					},
					{
						"name": "LP.FoupPlacedStatus",
						"dataType": "number"
					},
					{
						"name": "TMC.SimIop.sim_LP_MPLine1",
						"defaultValue": "z"
					},
					{
						"name": "TMC.SimIop.sim_LP_MPLine2",
						"defaultValue": "zz"
					},
					{
						"name": "CTC.LP_Wfr01",
						"dataType": "number",
						"defaultValue": ""
					},
					{
						"name": "CTC.LP_Wfr02",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr03",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr04",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr05",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr06",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr07",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr08",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr09",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr10",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr11",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr12",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr13",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr14",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr15",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr16",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr17",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr18",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr19",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr20",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr21",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr22",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr23",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr24",
						"dataType": "number"
					},
					{
						"name": "CTC.LP_Wfr25",
						"dataType": "number"
					}
				]
			});
			if(typeof onDmLPLoad == "function") {
				dataMap_1.addEventListener("load", onDmLPLoad);
			}
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-form-group"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			container.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_Exist\") == 0 ? true : false");
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["25px", "2fr", "1fr"]);
			formLayout_1.setUseRowShade(0, true);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt9");
			output_1.style.setClasses(["label", "pl-2"]);
			output_1.bind("value").toAppProperty("targetId");
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.spacing = 0;
			group_1.setLayout(verticalLayout_1);
			(function(container){
				var output_2 = new cpr.controls.Output("opt1");
				output_2.style.setClasses(["text-center", "small"]);
				output_2.bind("value").toDataMap(app.lookup("dmLP"), "TMC.SimIop.sim_LP_MPLine1");
				output_2.bind("visible").toExpression("value != \"\" ? true : false");
				container.addChild(output_2, {
					"width": "100px",
					"height": "20px"
				});
				var output_3 = new cpr.controls.Output("opt2");
				output_3.style.setClasses(["text-center", "small"]);
				output_3.bind("value").toDataMap(app.lookup("dmLP"), "TMC.SimIop.sim_LP_MPLine2");
				output_3.bind("visible").toExpression("value != \"\" ? true : false");
				container.addChild(output_3, {
					"width": "100px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 1
			});
			
			var group_2 = new cpr.controls.Container("grp14");
			group_2.style.setClasses(["form-wafer"]);
			// Layout
			var formLayout_2 = new cpr.controls.layouts.FormLayout();
			formLayout_2.topMargin = "0px";
			formLayout_2.rightMargin = "0px";
			formLayout_2.bottomMargin = "0px";
			formLayout_2.leftMargin = "0px";
			formLayout_2.horizontalSpacing = "0px";
			formLayout_2.verticalSpacing = "0px";
			formLayout_2.verticalSeparatorWidth = 1;
			formLayout_2.setColumns(["1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr", "1fr"]);
			formLayout_2.setRows(["1fr"]);
			group_2.setLayout(formLayout_2);
			(function(container){
				var output_4 = new cpr.controls.Output("opt59");
				output_4.value = "01";
				output_4.dataType = "number";
				output_4.style.bind("background-color").toExpression("getTranslatedColor(#dmLP.getValue(\"CTC.LP_Wfr01\"))");
				output_4.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_4, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_5 = new cpr.controls.Output("opt60");
				output_5.value = "02";
				output_5.dataType = "number";
				output_5.style.bind("background-color").toExpression("getTranslatedColor(#dmLP.getValue(\"CTC.LP_Wfr02\"))");
				output_5.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_5, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_6 = new cpr.controls.Output("opt61");
				output_6.value = "03";
				output_6.dataType = "number";
				output_6.style.bind("background-color").toExpression("getTranslatedColor(#dmLP.getValue(\"CTC.LP_Wfr03\"))");
				output_6.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_6, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var output_7 = new cpr.controls.Output("opt62");
				output_7.value = "04";
				output_7.dataType = "number";
				output_7.style.bind("background-color").toExpression("getTranslatedColor(#dmLP.getValue(\"CTC.LP_Wfr04\"))");
				output_7.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_7, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var output_8 = new cpr.controls.Output("opt63");
				output_8.value = "05";
				output_8.dataType = "number";
				output_8.style.bind("background-color").toExpression("getTranslatedColor(#dmLP.getValue(\"CTC.LP_Wfr05\"))");
				output_8.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_8, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var output_9 = new cpr.controls.Output("opt64");
				output_9.value = "06";
				output_9.dataType = "number";
				output_9.style.bind("background-color").toExpression("getTranslatedColor(#dmLP.getValue(\"CTC.LP_Wfr06\"))");
				output_9.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_9, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var output_10 = new cpr.controls.Output("opt65");
				output_10.value = "07";
				output_10.dataType = "number";
				output_10.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_10, {
					"colIndex": 6,
					"rowIndex": 0
				});
				var output_11 = new cpr.controls.Output("opt66");
				output_11.value = "08";
				output_11.dataType = "number";
				output_11.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_11, {
					"colIndex": 7,
					"rowIndex": 0
				});
				var output_12 = new cpr.controls.Output("opt67");
				output_12.value = "09";
				output_12.dataType = "number";
				output_12.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_12, {
					"colIndex": 8,
					"rowIndex": 0
				});
				var output_13 = new cpr.controls.Output("opt68");
				output_13.value = "10";
				output_13.dataType = "number";
				output_13.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_13, {
					"colIndex": 9,
					"rowIndex": 0
				});
				var output_14 = new cpr.controls.Output("opt69");
				output_14.value = "11";
				output_14.dataType = "number";
				output_14.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_14, {
					"colIndex": 10,
					"rowIndex": 0
				});
				var output_15 = new cpr.controls.Output("opt70");
				output_15.value = "12";
				output_15.dataType = "number";
				output_15.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_15, {
					"colIndex": 11,
					"rowIndex": 0
				});
				var output_16 = new cpr.controls.Output("opt71");
				output_16.value = "13";
				output_16.dataType = "number";
				output_16.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_16, {
					"colIndex": 12,
					"rowIndex": 0
				});
				var output_17 = new cpr.controls.Output("opt72");
				output_17.value = "14";
				output_17.dataType = "number";
				output_17.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_17, {
					"colIndex": 13,
					"rowIndex": 0
				});
				var output_18 = new cpr.controls.Output("opt73");
				output_18.value = "15";
				output_18.dataType = "number";
				output_18.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_18, {
					"colIndex": 14,
					"rowIndex": 0
				});
				var output_19 = new cpr.controls.Output("opt74");
				output_19.value = "16";
				output_19.dataType = "number";
				output_19.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_19, {
					"colIndex": 15,
					"rowIndex": 0
				});
				var output_20 = new cpr.controls.Output("opt75");
				output_20.value = "17";
				output_20.dataType = "number";
				output_20.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_20, {
					"colIndex": 16,
					"rowIndex": 0
				});
				var output_21 = new cpr.controls.Output("opt76");
				output_21.value = "18";
				output_21.dataType = "number";
				output_21.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_21, {
					"colIndex": 17,
					"rowIndex": 0
				});
				var output_22 = new cpr.controls.Output("opt77");
				output_22.value = "19";
				output_22.dataType = "number";
				output_22.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_22, {
					"colIndex": 18,
					"rowIndex": 0
				});
				var output_23 = new cpr.controls.Output("opt78");
				output_23.value = "20";
				output_23.dataType = "number";
				output_23.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_23, {
					"colIndex": 19,
					"rowIndex": 0
				});
				var output_24 = new cpr.controls.Output("opt79");
				output_24.value = "21";
				output_24.dataType = "number";
				output_24.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_24, {
					"colIndex": 20,
					"rowIndex": 0
				});
				var output_25 = new cpr.controls.Output("opt80");
				output_25.value = "22";
				output_25.dataType = "number";
				output_25.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_25, {
					"colIndex": 21,
					"rowIndex": 0
				});
				var output_26 = new cpr.controls.Output("opt81");
				output_26.value = "23";
				output_26.dataType = "number";
				output_26.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_26, {
					"colIndex": 22,
					"rowIndex": 0
				});
				var output_27 = new cpr.controls.Output("opt82");
				output_27.value = "24";
				output_27.dataType = "number";
				output_27.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_27, {
					"colIndex": 23,
					"rowIndex": 0
				});
				var output_28 = new cpr.controls.Output("opt83");
				output_28.value = "25";
				output_28.dataType = "number";
				output_28.bind("visible").toExpression("#dmLP.getValue(\"CTC.LP_WfrCount\") >= Number(value) ? true : false");
				container.addChild(output_28, {
					"colIndex": 24,
					"rowIndex": 0
				});
			})(group_2);
			container.addChild(group_2, {
				"colIndex": 0,
				"rowIndex": 2
			});
		}
	});
	internalApp.title = "LoadPortStatusBox";
	
	// Type declaration for LoadPortStatusBox
	cpr.utils.Util.ensurePackage("udc.han").LoadPortStatusBox = function(id){
		cpr.controls.UDCBase.call(this, "udc.han.LoadPortStatusBox", internalApp, id);
	};
	
	udc.han.LoadPortStatusBox.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.han.LoadPortStatusBox.prototype, "type", {
		get : function(){
			return "udc.han.LoadPortStatusBox";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.han.LoadPortStatusBox.prototype, "lpDataMap", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("lpDataMap");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("lpDataMap", newValue, true);
		}
	});
	Object.defineProperty(udc.han.LoadPortStatusBox.prototype, "targetId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("targetId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("targetId", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.han.LoadPortStatusBox
/// start - udc.han.slots
/*
 * UDC Qualified Name: udc.han.slots
 * App URI: udc/han/slots
 * Source Location: udc/han/slots.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/han/slots", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * slots.js
			 * Created at 2021. 7. 15. 오후 5:06:06.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			exports.creater = function(pcDm){
				
				/** @type cpr.data.DataMap */
				var vcDm = pcDm;
				app.setAppProperty("hanhab", vcDm);
				
				vcDm.getColumnNames().forEach(function(each){
					
					(function(colNm){
						
					var output = new cpr.controls.Output();
			//		output.bind("value").toDataMap(vcDm, each);
						console.log(colNm);
					output.bind("value").toExpression("@hanhab.getValue('"+colNm+"')");
					app.getContainer().addChild(output, {
						width : "100px",
						height: "20px",
						autoSize:"none"
					});
					})(each)
				});
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("newProperty1", null);
			app.declareAppProperty("newProperty2", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
		}
	});
	internalApp.title = "slots";
	
	// Type declaration for slots
	cpr.utils.Util.ensurePackage("udc.han").slots = function(id){
		cpr.controls.UDCBase.call(this, "udc.han.slots", internalApp, id);
	};
	
	udc.han.slots.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.han.slots.prototype, "type", {
		get : function(){
			return "udc.han.slots";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.han.slots.prototype, "newProperty1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty1", newValue, true);
		}
	});
	Object.defineProperty(udc.han.slots.prototype, "newProperty2", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty2");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty2", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.han.slots
/// start - udc.han.test
/*
 * UDC Qualified Name: udc.han.test
 * App URI: udc/han/test
 * Source Location: udc/han/test.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/han/test", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * test.js
			 * Created at 2021. 11. 12. 오후 2:51:45.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("newProperty1", null);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.bind("value").toDataColumn("column1");
			container.addChild(inputBox_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_2 = new cpr.controls.InputBox("ipb2");
			inputBox_2.bind("value").toDataColumn("column2");
			container.addChild(inputBox_2, {
				"top": "50px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_3 = new cpr.controls.InputBox("ipb3");
			inputBox_3.bind("value").toDataColumn("column3");
			container.addChild(inputBox_3, {
				"top": "80px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			container.addChild(button_1, {
				"top": "50px",
				"left": "140px",
				"width": "100px",
				"height": "20px"
			});
			
			var inputBox_4 = new cpr.controls.InputBox("ipb4");
			inputBox_4.bind("value").toExpression("@newProperty1");
			container.addChild(inputBox_4, {
				"top": "110px",
				"left": "20px",
				"width": "229px",
				"height": "36px"
			});
		}
	});
	internalApp.title = "test";
	
	// Type declaration for test
	cpr.utils.Util.ensurePackage("udc.han").test = function(id){
		cpr.controls.UDCBase.call(this, "udc.han.test", internalApp, id);
	};
	
	udc.han.test.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.han.test.prototype, "type", {
		get : function(){
			return "udc.han.test";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.han.test.prototype, "newProperty1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty1", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.han.test
/// start - udc.han.testest
/*
 * UDC Qualified Name: udc.han.testest
 * App URI: udc/han/testest
 * Source Location: udc/han/testest.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/han/testest", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * testest.js
			 * Created at 2021. 6. 14. 오전 10:58:26.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			exports.binders = function(){
				console.log(app.getAppProperty("dataset").getDatas());
				app.lookup("dm1").build(app.getAppProperty("dataset").getDatas());
				
				app.getContainer().redraw();
			}
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				if(e.property == "dataset") {
					
					console.log("ㅋㅋㅋ");
				}
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				
				console.log(app.getAppProperty("dataset").getDatas())
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				var opt = app.lookup("opt1");
				
				var info = opt.getBindInfo("value");
				console.log(info);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dataset", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.bind("value").toDataMap(app.lookup("dm1"), "column1");
			container.addChild(output_1, {
				"width": "100px",
				"height": "20px"
			});
			
			var output_2 = new cpr.controls.Output("opt2");
			output_2.bind("value").toDataMap(app.lookup("dm1"), "column2");
			container.addChild(output_2, {
				"width": "100px",
				"height": "20px"
			});
			
			var output_3 = new cpr.controls.Output("opt3");
			output_3.bind("value").toDataMap(app.lookup("dm1"), "column3");
			container.addChild(output_3, {
				"width": "100px",
				"height": "20px"
			});
			
			var output_4 = new cpr.controls.Output("opt4");
			output_4.bind("value").toDataMap(app.lookup("dm1"), "column4");
			container.addChild(output_4, {
				"width": "100px",
				"height": "20px"
			});
			
			var output_5 = new cpr.controls.Output("opt5");
			output_5.bind("value").toDataMap(app.lookup("dm1"), "column5");
			container.addChild(output_5, {
				"width": "100px",
				"height": "20px"
			});
			
			var output_6 = new cpr.controls.Output("opt6");
			output_6.bind("value").toDataMap(app.lookup("dm1"), "column6");
			container.addChild(output_6, {
				"width": "100px",
				"height": "20px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "testest";
	
	// Type declaration for testest
	cpr.utils.Util.ensurePackage("udc.han").testest = function(id){
		cpr.controls.UDCBase.call(this, "udc.han.testest", internalApp, id);
	};
	
	udc.han.testest.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.han.testest.prototype, "type", {
		get : function(){
			return "udc.han.testest";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.han.testest.prototype, "dataset", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataset");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataset", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.han.testest
/// start - udc.HansTest
/*
 * UDC Qualified Name: udc.HansTest
 * App URI: udc/HansTest
 * Source Location: udc/HansTest.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/HansTest", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * HansTest.js
			 * Created at 2020. 6. 5. 오후 1:24:14.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			exports.values = getValues();
			
			function getValues() {
				
				return app.getAppProperty("valuezz");
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("gridDs", null);
			app.declareAppProperty("valuezz", "qweqwe");
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "column1",
						"defaultValue": "ab"
					},
					{"name": "column2"}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.value = "zz";
			container.addChild(inputBox_1, {
				"top": "210px",
				"left": "32px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "HansTest";
	
	// Type declaration for HansTest
	cpr.utils.Util.ensurePackage("udc").HansTest = function(id){
		cpr.controls.UDCBase.call(this, "udc.HansTest", internalApp, id);
	};
	
	udc.HansTest.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.HansTest.prototype, "type", {
		get : function(){
			return "udc.HansTest";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.HansTest.prototype, "gridDs", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridDs");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridDs", newValue, true);
		}
	});
	Object.defineProperty(udc.HansTest.prototype, "valuezz", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("valuezz");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("valuezz", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.HansTest
/// start - udc.HintCheckBox
/*
 * UDC Qualified Name: udc.HintCheckBox
 * App URI: udc/HintCheckBox
 * Source Location: udc/HintCheckBox.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/HintCheckBox", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hintCheckBox.js
			 * Created at 2020. 3. 19. 오후 3:34:34.
			 *
			 * @author HANS
			 ************************************************/
			var hints = [];
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function() {
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbx1ValueChange( /* cpr.events.CValueChangeEvent */ e) {
				/** 
				 * @type cpr.controls.CheckBox
				 */
				var cbx1 = e.control;
			
				var voHostApp = app.getHostAppInstance();
			
				if (cbx1.checked) {
			
					var vcContainer = voHostApp.getContainer();
					vcContainer.getAllRecursiveChildren().forEach(function( /** cpr.controls.UIControl*/ each, idx) {
			
						if (each instanceof cpr.controls.Grid) {
							var rowHeights = each.header.getRowHeights();
							var rowHeights2 = each.detail.getRowHeights();
			
							var gridAR = each.getActualRect();
			
							var topRight = gridAR.topRight;
							var trY = topRight.y;
							var trX = topRight.x;
			
							var a = rowHeights.concat(rowHeights2);
			
							var width = 40;
							a.forEach(function(each) {
								if (each.height) {
			
									var horizontal = new udc.Horizontal();
			
									horizontal.optValue = each.height;
			
									app.getContainer().floatControl(horizontal, {
										"width": width + "px",
										"height": each.height + "px",
										"left": topRight.x - width + "px",
										"top": trY + "px"
									});
									trY += each.height;
								}
							});
							var heightHori = new udc.Horizontal();
							heightHori.optValue = gridAR.height;
							app.getContainer().floatControl(heightHori, {
								"width": "40px",
								height: gridAR.height + "px",
								"left": trX - 2 * width + "px",
								"top": topRight.y + "px"
							});
						} else if (each instanceof cpr.controls.Container) {
							
							
							
						} else {
							var classUserAttr = each.userAttr("viewClass");
							var hasClass = each.style.getClasses();
							if (
								//				classUserAttr =="Y"
								hasClass.length > 0
							) {
								var classes = each.style.getClasses();
			
								var voActualRect = each.getActualRect().bottomCenter;
								var voViewPortRect = vcContainer.getViewPortRect();
			
								var vcOptHint = new cpr.controls.Output();
								vcOptHint.value = "class : " + classes;
								vcOptHint.unselectable = false;
								vcOptHint.style.setClasses("hint-box", "top");
								vcContainer.floatControl(vcOptHint, {
									"width": "150px",
									"left": voActualRect.x - 75 + "px",
									"top": voActualRect.y + voViewPortRect.top + 10 + "px"
								});
								hints.push(vcOptHint);
			
								vcOptHint.addEventListener("mouseenter", function(e) {
									vcOptHint.style.css("z-index", "5");
								});
								vcOptHint.addEventListener("mouseleave", function(e) {
									vcOptHint.style.removeStyle("z-index");
								});
			
							}
						}
			
					});
				} else {
			
					hints.forEach(function(each) {
						each.dispose();
					});
				}
			}
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["transparent-back"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "힌트보이기";
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var checkBox_1 = new cpr.controls.CheckBox("cbx1");
			if(typeof onCbx1ValueChange == "function") {
				checkBox_1.addEventListener("value-change", onCbx1ValueChange);
			}
			container.addChild(checkBox_1, {
				"colIndex": 0,
				"rowIndex": 1
			});
		}
	});
	internalApp.title = "HintCheckBox";
	
	// Type declaration for HintCheckBox
	cpr.utils.Util.ensurePackage("udc").HintCheckBox = function(id){
		cpr.controls.UDCBase.call(this, "udc.HintCheckBox", internalApp, id);
	};
	
	udc.HintCheckBox.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.HintCheckBox.prototype, "type", {
		get : function(){
			return "udc.HintCheckBox";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.HintCheckBox
/// start - udc.hollow
/*
 * UDC Qualified Name: udc.hollow
 * App URI: udc/hollow
 * Source Location: udc/hollow.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/hollow", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hollow.js
			 * Created at 2020. 12. 29. 오전 9:06:27.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			exports.hello = function(){
				return "안녕";
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				var exp = new cpr.expression.Expression(app.getAppProperty("prop"));
				console.log(app.lookup("opt2").value);
				var a = exp.evaluate();
				console.log(a);
			}
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				console.log(app.getAppProperty("aaaa"));
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("prop", null);
			app.declareAppProperty("aaaa", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.bind("value").toExpression("@prop");
			container.addChild(button_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var output_1 = new cpr.controls.Output("opt2");
			output_1.value = "Output";
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "hollow";
	
	// Type declaration for hollow
	cpr.utils.Util.ensurePackage("udc").hollow = function(id){
		cpr.controls.UDCBase.call(this, "udc.hollow", internalApp, id);
	};
	
	udc.hollow.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.hollow.prototype, "type", {
		get : function(){
			return "udc.hollow";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.hollow.prototype, "prop", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("prop");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("prop", newValue, true);
		}
	});
	Object.defineProperty(udc.hollow.prototype, "aaaa", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("aaaa");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("aaaa", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.hollow
/// start - udc.Horizontal
/*
 * UDC Qualified Name: udc.Horizontal
 * App URI: udc/Horizontal
 * Source Location: udc/Horizontal.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/Horizontal", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * horizontal.js
			 * Created at 2020. 3. 19. 오후 5:41:02.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("optValue", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-width" : "1px",
				"border-bottom-color" : "red",
				"border-top-color" : "red",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"border-top-width" : "1px",
				"left" : "0px",
				"border-top-style" : "solid"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.style.css({
				"text-align" : "right"
			});
			output_1.bind("value").toAppProperty("optValue");
			container.addChild(output_1, {
				"right": "0px",
				"left": "0px",
				"height": "30px",
				"top": "calc(50% - 15px)"
			});
			
			var output_2 = new cpr.controls.Output("opt2");
			output_2.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "red",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-left-color" : "red",
				"border-top-color" : "red",
				"border-bottom-style" : "solid",
				"border-right-color" : "red",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			container.addChild(output_2, {
				"top": "0px",
				"bottom": "0px",
				"width": "1px",
				"left": "calc(50% - 0px)"
			});
		}
	});
	internalApp.title = "Horizontal";
	
	// Type declaration for Horizontal
	cpr.utils.Util.ensurePackage("udc").Horizontal = function(id){
		cpr.controls.UDCBase.call(this, "udc.Horizontal", internalApp, id);
	};
	
	udc.Horizontal.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.Horizontal.prototype, "type", {
		get : function(){
			return "udc.Horizontal";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.Horizontal.prototype, "optValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("optValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("optValue", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.Horizontal
/// start - udc.hycu
/*
 * UDC Qualified Name: udc.hycu
 * App URI: udc/hycu
 * Source Location: udc/hycu.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/hycu", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hycu.js
			 * Created at 2019. 9. 30. 오후 2:38:00.
			 *
			 * @author HANS
			 ************************************************/
			 var vnContainerNumber = 1;
			 
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * 
			 * @param {cpr.controls.Container} container
			 */
			function getRemainHeight(container){
				
				var height = container.getActualRect().height;
				
				/** @type cpr.controls.layouts.VerticalLayout */
				var layout = container.getLayout();
				
				var realHeight = height - layout.topMargin - layout.bottomMargin;
				
				container.getAllRecursiveChildren().forEach(function(each){
					
			//		if(realHeight < 0 ) {
					console.log("빼버리는 컨트롤 :" +each.value);
					console.log("현재 크기 : " + realHeight);
					console.log("빼는 크기 : "+ each.getActualRect().height);
					console.log("간격 : "+ layout.spacing);
			//			return realHeight;
			
			//		}
					
					realHeight = realHeight - each.getActualRect().height - layout.spacing;
			
				});
				
				return realHeight;
			}
			
			
			/**
			 * 
			 * @param {Array} paramLabelArray
			 * @param {Array} paramValueArray
			 */
			 function setMenuContent(paramLabelArray,paramValueArray) {
			/** @type cpr.data.DataSet */
				var vcDataSet = app.getAppProperty("dataS");
					var MainGrp = app.lookup("grpContent");
				paramValueArray.forEach(function(each){
					
					var childrenValues = vcDataSet.findAllRow("parentValue =='"+each+"'").map(function(each){
						return each.getValue("label");		
						});
					var parentLabel = vcDataSet.findFirstRow("value =='"+each+"'").getValue("label");
			//			console.log(childrenValues);
			//		var udcs = new udc.hycuMenu();
			//		udcs.configMenu(each,childrenValues);
			//		insertIntoMenu(udcs);
			
			
			//		vnContainerNumber++;
					
					var opt = new cpr.controls.Output("opt"+parentLabel);
					opt.style.addClass("menu-title");
					opt.value = parentLabel;
					
					/** @type cpr.controls.Container */
					var container = app.lookup("grp"+vnContainerNumber);
			
					console.log("아니 뭔데 : " + container.id);
			//		if(getRemainHeight(container) > 0) {
						container.addChild(opt, {
							"width" : "100px",
							"height": "35px",
						});	
			//		} else {
			//			vnContainerNumber++;
			//			var container = new cpr.controls.Container("grp"+vnContainerNumber);
			//			console.log(container.id);
			//			var vLayout = new cpr.controls.layouts.VerticalLayout();
			//			vLayout.bottomMargin = 10;
			//			vLayout.topMargin = 10;
			//			vLayout.leftMargin = 10;
			//			vLayout.rightMargin = 10;
			//			
			//			container.setLayout(vLayout);
			//			
			//				MainGrp.addChild(container, {
			//				"width" : "142px",
			//				"height" : "330px",
			//				"autoSize" : "none"
			//			});
			//			
			//			container.addChild(opt, {
			//				"width" : "100px",
			//				"height": "35px",
			//			});	
			//		}
					
					
				childrenValues.forEach(function(eacha){
					
				var miniOpt = new cpr.controls.Output();
					miniOpt.value = eacha;
					
					var insContainer = app.lookup("grp"+vnContainerNumber);
					insContainer.addChild(miniOpt, {
						"width" : "100px",
						"height": "20px",
						"autoSize":"height"
					});
					
					insContainer.redraw();
					cpr.core.DeferredUpdateManager.INSTANCE.update();
					console.log("현재 비교중인 컨테이너 : "+insContainer.id);
					if(getRemainHeight(insContainer) < 0) {
			
						insContainer.removeChild(miniOpt);
						
						vnContainerNumber++;
						
						var instantContainer = new cpr.controls.Container("grp"+vnContainerNumber);
						console.log("자리가 모질라서 생성되는 컨테이너 :" +instantContainer.id);
						var vLayout = new cpr.controls.layouts.VerticalLayout();
						vLayout.bottomMargin = 10;
						vLayout.topMargin = 10;
						vLayout.leftMargin = 10;
						vLayout.rightMargin = 10;
						
						instantContainer.setLayout(vLayout);
						
						var instOpt = new cpr.controls.Output();
							instOpt.style.addClass("menu-title");
							instOpt.value = parentLabel;
						instantContainer.addChild(instOpt, {
						"width" : "100px",
						"height": "35px",
						});
						
						MainGrp.addChild(instantContainer, {
							"width" : "142px",
							"height" : "330px",
							"autoSize" : "none"
						});
						miniOpt = new cpr.controls.Output();
						miniOpt.value = eacha;
						
						instantContainer.addChild(miniOpt, {
							"width" : "100px",
							"height": "20px",
							"autoSize":"height"
						});
					}
					
					
				});
					
				});
				
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				/** @type cpr.data.DataSet */
				var vcDataSet = app.getAppProperty("dataS");
				
				
				var parentRowValue = vcDataSet.findAllRow("parentValue == ''").map(function(each){
					return each.getValue("value");
				});
				var parentRowLabel = vcDataSet.findAllRow("parentValue == ''").map(function(each){
					return each.getValue("label");
				});
				setMenuContent(parentRowLabel,parentRowValue);
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dataS", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btn1");
				button_1.value = "";
				if(typeof onBtn1Click == "function") {
					button_1.addEventListener("click", onBtn1Click);
				}
				container.addChild(button_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"width": "55px"
				});
				var radioButton_1 = new cpr.controls.RadioButton("rdb1");
				(function(radioButton_1){
					radioButton_1.addItem(new cpr.controls.Item("교과", "value1"));
					radioButton_1.addItem(new cpr.controls.Item("수업", "value2"));
					radioButton_1.addItem(new cpr.controls.Item("업무3", "value3"));
					radioButton_1.addItem(new cpr.controls.Item("업무4", "value4"));
					radioButton_1.addItem(new cpr.controls.Item("업무5", "value5"));
					radioButton_1.addItem(new cpr.controls.Item("업무6", "value6"));
					radioButton_1.addItem(new cpr.controls.Item("업무7", "value7"));
				})(radioButton_1);
				container.addChild(radioButton_1, {
					"top": "0px",
					"bottom": "0px",
					"left": "0px",
					"width": "800px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "1000px",
				"height": "50px"
			});
			
			var group_2 = new cpr.controls.Container("grpContent");
			group_2.style.setClasses(["cl-form-group"]);
			group_2.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.scrollable = false;
			flowLayout_1.lineWrap = false;
			group_2.setLayout(flowLayout_1);
			(function(container){
				var group_3 = new cpr.controls.Container("grp1");
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_1.spacing = 0;
				verticalLayout_1.leftMargin = 10;
				verticalLayout_1.rightMargin = 10;
				verticalLayout_1.topMargin = 10;
				verticalLayout_1.bottomMargin = 10;
				group_3.setLayout(verticalLayout_1);
				(function(container){
				})(group_3);
				container.addChild(group_3, {
					"width": "142px",
					"height": "330px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "50px",
				"left": "0px",
				"width": "820px",
				"height": "340px"
			});
			
			var group_4 = new cpr.controls.Container();
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_4.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.hycuMenu();
				container.addChild(userDefinedControl_1, {
					"width": "98px",
					"height": "191px"
				});
			})(group_4);
			container.addChild(group_4, {
				"top": "50px",
				"left": "850px",
				"width": "150px",
				"height": "350px"
			});
			
			var group_5 = new cpr.controls.Container();
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_5.setLayout(xYLayout_3);
			(function(container){
				var button_2 = new cpr.controls.Button("btn2");
				button_2.value = "";
				container.addChild(button_2, {
					"bottom": "38px",
					"left": "3px",
					"width": "24px",
					"height": "20px"
				});
				var button_3 = new cpr.controls.Button("btn3");
				button_3.value = "";
				container.addChild(button_3, {
					"bottom": "11px",
					"left": "3px",
					"width": "24px",
					"height": "20px"
				});
			})(group_5);
			container.addChild(group_5, {
				"top": "50px",
				"left": "820px",
				"width": "30px",
				"height": "350px"
			});
			
			var group_6 = new cpr.controls.Container();
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_6.setLayout(xYLayout_4);
			(function(container){
			})(group_6);
			container.addChild(group_6, {
				"top": "390px",
				"left": "0px",
				"width": "820px",
				"height": "10px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "hycu";
	
	// Type declaration for hycu
	cpr.utils.Util.ensurePackage("udc").hycu = function(id){
		cpr.controls.UDCBase.call(this, "udc.hycu", internalApp, id);
	};
	
	udc.hycu.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.hycu.prototype, "type", {
		get : function(){
			return "udc.hycu";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.hycu.prototype, "dataS", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataS");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataS", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.hycu
/// start - udc.hycu2
/*
 * UDC Qualified Name: udc.hycu2
 * App URI: udc/hycu2
 * Source Location: udc/hycu2.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/hycu2", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hycu.js
			 * Created at 2019. 9. 30. 오후 2:38:00.
			 *
			 * @author HANS
			 ************************************************/
			 var vnContainerNumber = 1;
			 
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * 
			 * @param {Number} paramHeight
			 */
			function isScrolled(paramHeight) {
			/** @type cpr.controls.Container */
			var container = app.lookup("grp"+vnContainerNumber);
			
			var vnHeight = container.getActualRect().height;
				
				if(vnHeight > paramHeight) {
					
					return true;
				} else {
					return false;
				}
			}
			
			/**
			 * 
			 * @param {cpr.controls.Container} container
			 */
			function getRemainHeight(container){
				
				var height = container.getActualRect().height;
				
				/** @type cpr.controls.layouts.VerticalLayout */
				var layout = container.getLayout();
				
				var realHeight = height - layout.topMargin - layout.bottomMargin;
				
				container.getAllRecursiveChildren().forEach(function(each){
					console.log(each.getActualRect().height);
					realHeight = realHeight - each.getActualRect().height - layout.spacing;
				});
				
				console.log(realHeight);
				return realHeight;
			}
			/**
			 * 
			 * @param {String} paramMasterString
			 * @param {Array} paramSlaveArray
			 */
			 function setMenuContent(paramMasterString,paramSlaveArray) {
			/** @type cpr.data.DataSet */
				var vcDataSet = app.getAppProperty("dataS");
				
				
				var opt = new cpr.controls.Output();
				
				opt.style.addClass("instantClass");
				opt.value = paramMasterString;
			
				var container = app.lookup("grp1");
					container.insertChild(0,opt, {
						"width" : "100px",
						"height": "35px",
					});
					
					
				paramSlaveArray.forEach(function(each){
					
				var miniOpt = new cpr.controls.Output();
					miniOpt.value = each;
					
					/** @type cpr.controls.Container */
					var insContainer = app.lookup("grp"+vnContainerNumber);
					
					insContainer.addChild(miniOpt, {
						"width" : "100px",
						"height": "20px",
						"autoSize":"height"
					});
					
					insContainer.redraw();
					cpr.core.DeferredUpdateManager.INSTANCE.update();
					
					if(getRemainHeight(insContainer) < 0) {
						
						insContainer.removeChild(miniOpt);
						
						vnContainerNumber++;
						
						var instantContainer = new cpr.controls.Container();
						
						var vLayout = new cpr.controls.layouts.VerticalLayout();
						vLayout.bottomMargin = 10;
						vLayout.topMargin = 10;
						instantContainer.setLayout(vLayout);
						
						instantContainer.addChild(opt, {
						"width" : "100px",
						"height": "35px",
						});
						
						var MainGrp = app.lookup("grpContent");
						MainGrp.addChild(instantContainer, {
							"width" : "117px",
							"height" : "328px",
							"autoSize" : "none"
						});
						
						instantContainer.addChild(miniOpt, {
							"width" : "100px",
							"height": "20px",
							"autoSize":"height"
						});
					}
					
					
				});
			}
			
			/*
			 * "교과" 아웃풋(opt3)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onOpt3Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Output
				 */
				var opt3 = e.control;
				
				/** @type cpr.data.DataSet */
				var vcDataSet = app.getAppProperty("dataS");
				
				var rootRow = vcDataSet.findFirstRow("label == '"+opt3.value+"'");
				
				var rootValue = rootRow.getValue("value");
				
				var slaveRows = vcDataSet.findAllRow("parentValue == '"+rootValue+"'").map(function(each){
					return each.getValue("label");
				});;
				
				setMenuContent(rootValue, slaveRows);
			}
			
			
			/*
			 * 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				var container = app.lookup("grp1");
				
			//	console.log(container.getActualRect());
			//	
			//	console.log(container.getViewPortRect());
			
				getRemainHeight(app.lookup("grp1"));
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dataS", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "30px", "150px"]);
			formLayout_1.setRows(["50px", "1fr", "10px"]);
			formLayout_1.setRowVisible(2, false);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("opt1");
				output_1.value = "업무3";
				container.addChild(output_1, {
					"top": "0px",
					"bottom": "0px",
					"left": "358px",
					"width": "100px"
				});
				var output_2 = new cpr.controls.Output("opt2");
				output_2.value = "수업";
				container.addChild(output_2, {
					"top": "0px",
					"bottom": "0px",
					"left": "259px",
					"width": "100px"
				});
				var output_3 = new cpr.controls.Output("opt3");
				output_3.value = "교과";
				if(typeof onOpt3Mouseup == "function") {
					output_3.addEventListener("mouseup", onOpt3Mouseup);
				}
				if(typeof onOpt3Mouseenter == "function") {
					output_3.addEventListener("mouseenter", onOpt3Mouseenter);
				}
				if(typeof onOpt3Click == "function") {
					output_3.addEventListener("click", onOpt3Click);
				}
				container.addChild(output_3, {
					"top": "0px",
					"bottom": "0px",
					"left": "160px",
					"width": "100px"
				});
				var output_4 = new cpr.controls.Output("opt4");
				output_4.value = "업무4";
				container.addChild(output_4, {
					"top": "0px",
					"bottom": "0px",
					"left": "457px",
					"width": "100px"
				});
				var output_5 = new cpr.controls.Output("opt5");
				output_5.value = "업무5";
				container.addChild(output_5, {
					"top": "0px",
					"bottom": "0px",
					"left": "556px",
					"width": "100px"
				});
				var button_1 = new cpr.controls.Button("btn1");
				button_1.value = "";
				if(typeof onBtn1Click == "function") {
					button_1.addEventListener("click", onBtn1Click);
				}
				container.addChild(button_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"width": "55px"
				});
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 3,
				"rowSpan": 1
			});
			
			var group_2 = new cpr.controls.Container("grpContent");
			group_2.style.setClasses(["cl-form-group"]);
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.scrollable = false;
			flowLayout_1.lineWrap = false;
			group_2.setLayout(flowLayout_1);
			(function(container){
				var group_3 = new cpr.controls.Container("grp1");
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_1.leftMargin = 10;
				verticalLayout_1.rightMargin = 10;
				verticalLayout_1.topMargin = 10;
				verticalLayout_1.bottomMargin = 10;
				group_3.setLayout(verticalLayout_1);
				(function(container){
				})(group_3);
				container.addChild(group_3, {
					"width": "117px",
					"height": "328px"
				});
			})(group_2);
			container.addChild(group_2, {
				"colIndex": 0,
				"rowIndex": 1
			});
			
			var group_4 = new cpr.controls.Container();
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_4.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.hycuMenu();
				container.addChild(userDefinedControl_1, {
					"width": "98px",
					"height": "191px"
				});
			})(group_4);
			container.addChild(group_4, {
				"colIndex": 2,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_5 = new cpr.controls.Container();
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_5.setLayout(xYLayout_2);
			(function(container){
				var button_2 = new cpr.controls.Button("btn2");
				button_2.value = "";
				container.addChild(button_2, {
					"bottom": "38px",
					"left": "3px",
					"width": "24px",
					"height": "20px"
				});
				var button_3 = new cpr.controls.Button("btn3");
				button_3.value = "";
				container.addChild(button_3, {
					"bottom": "11px",
					"left": "3px",
					"width": "24px",
					"height": "20px"
				});
			})(group_5);
			container.addChild(group_5, {
				"colIndex": 1,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_6 = new cpr.controls.Container();
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_6.setLayout(xYLayout_3);
			(function(container){
			})(group_6);
			container.addChild(group_6, {
				"colIndex": 0,
				"rowIndex": 2
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "hycu2";
	
	// Type declaration for hycu2
	cpr.utils.Util.ensurePackage("udc").hycu2 = function(id){
		cpr.controls.UDCBase.call(this, "udc.hycu2", internalApp, id);
	};
	
	udc.hycu2.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.hycu2.prototype, "type", {
		get : function(){
			return "udc.hycu2";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.hycu2.prototype, "dataS", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataS");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataS", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.hycu2
/// start - udc.hycu3
/*
 * UDC Qualified Name: udc.hycu3
 * App URI: udc/hycu3
 * Source Location: udc/hycu3.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/hycu3", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hycu.js
			 * Created at 2019. 9. 30. 오후 2:38:00.
			 *
			 * @author HANS
			 ************************************************/
			 var vnContainerNumber = 1;
			 
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * 
			 * @param {cpr.controls.Container} container
			 */
			function getRemainHeight(container){
				
					var height = container.getActualRect().height;
				
				/** @type cpr.controls.layouts.VerticalLayout */
				var layout = container.getLayout();
				
				var realHeight = height - layout.topMargin - layout.bottomMargin;
				
				container.getAllRecursiveChildren().forEach(function(each){
					
			//		if(realHeight < 0 ) {
					console.log("빼버리는 컨트롤 :" +each.value);
					console.log("현재 크기 : " + realHeight);
					console.log("빼는 크기 : "+ each.getActualRect().height);
					console.log("간격 : "+ layout.spacing);
			//			return realHeight;
			
			//		}
					
					realHeight = realHeight - each.getActualRect().height - layout.spacing;
			
				});
				
				return realHeight;
			}
			
			
			/**
			 * 
			 * @param {Array} paramLabelArray
			 * @param {Array} paramValueArray
			 */
			 function setMenuContent(paramLabelArray,paramValueArray) {
			/** @type cpr.data.DataSet */
				var vcDataSet = app.getAppProperty("dataS");
				
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				/** @type cpr.data.DataSet */
				var vcDataSet = app.getAppProperty("dataS");
				
				var voMenuTitle = vcDataSet.findAllRow("parentValue == ''");
				var vcContentContainer = app.lookup("grpContent");
				
				
				voMenuTitle.forEach(function(each){
					
					
			//		vcDataSet.findAllRow("")
			
					var lbxs = new cpr.controls.ListBox("lbx"+vnContainerNumber);
							
				});	
					
				
			
				 var vcDsView = new cpr.data.DataView("", vcDataSet);
				 vcDsView.parseData({"filterCondition": "idx < 14"});
				 
				 var lbx = app.lookup("lbx1");
				 
				 lbx.setItemSet(vcDsView,{
				 	label : "label",
				 	value : "value",
				 	icon : null,
				 	tooltip : null
				 });
				 
				
			}
			
			
			
			/*
			 * 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				var listBox = app.lookup("lbx1");
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dataS", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button("btn1");
				button_1.value = "";
				if(typeof onBtn1Click == "function") {
					button_1.addEventListener("click", onBtn1Click);
				}
				container.addChild(button_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"width": "55px"
				});
				var radioButton_1 = new cpr.controls.RadioButton("rdb1");
				(function(radioButton_1){
					radioButton_1.addItem(new cpr.controls.Item("교과", "value1"));
					radioButton_1.addItem(new cpr.controls.Item("수업", "value2"));
					radioButton_1.addItem(new cpr.controls.Item("업무3", "value3"));
					radioButton_1.addItem(new cpr.controls.Item("업무4", "value4"));
					radioButton_1.addItem(new cpr.controls.Item("업무5", "value5"));
					radioButton_1.addItem(new cpr.controls.Item("업무6", "value6"));
					radioButton_1.addItem(new cpr.controls.Item("업무7", "value7"));
				})(radioButton_1);
				container.addChild(radioButton_1, {
					"top": "0px",
					"bottom": "0px",
					"left": "0px",
					"width": "800px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "1000px",
				"height": "50px"
			});
			
			var group_2 = new cpr.controls.Container("grpContent");
			group_2.style.setClasses(["cl-form-group"]);
			group_2.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "lightgray",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-left-color" : "lightgray",
				"border-top-color" : "lightgray",
				"border-bottom-style" : "solid",
				"border-right-color" : "lightgray",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.scrollable = false;
			flowLayout_1.lineWrap = false;
			group_2.setLayout(flowLayout_1);
			(function(container){
				var group_3 = new cpr.controls.Container();
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				group_3.setLayout(verticalLayout_1);
				(function(container){
					var listBox_1 = new cpr.controls.ListBox("lbx1");
					listBox_1.enabledItemExp = "parentValue != \"\" ? true : false";
					listBox_1.style.setClasses(["hlbx"]);
					(function(listBox_1){
					})(listBox_1);
					container.addChild(listBox_1, {
						"width": "157px",
						"height": "330px"
					});
				})(group_3);
				container.addChild(group_3, {
					"width": "168px",
					"height": "339px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "50px",
				"left": "0px",
				"width": "820px",
				"height": "340px"
			});
			
			var group_4 = new cpr.controls.Container();
			// Layout
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_4.setLayout(verticalLayout_2);
			(function(container){
				var userDefinedControl_1 = new udc.hycuMenu();
				container.addChild(userDefinedControl_1, {
					"width": "98px",
					"height": "191px"
				});
			})(group_4);
			container.addChild(group_4, {
				"top": "50px",
				"left": "850px",
				"width": "150px",
				"height": "350px"
			});
			
			var group_5 = new cpr.controls.Container();
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_5.setLayout(xYLayout_3);
			(function(container){
				var button_2 = new cpr.controls.Button("btn2");
				button_2.value = "";
				container.addChild(button_2, {
					"bottom": "38px",
					"left": "3px",
					"width": "24px",
					"height": "20px"
				});
				var button_3 = new cpr.controls.Button("btn3");
				button_3.value = "";
				container.addChild(button_3, {
					"bottom": "11px",
					"left": "3px",
					"width": "24px",
					"height": "20px"
				});
			})(group_5);
			container.addChild(group_5, {
				"top": "50px",
				"left": "820px",
				"width": "30px",
				"height": "350px"
			});
			
			var group_6 = new cpr.controls.Container();
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_6.setLayout(xYLayout_4);
			(function(container){
			})(group_6);
			container.addChild(group_6, {
				"top": "390px",
				"left": "0px",
				"width": "820px",
				"height": "10px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "hycu3";
	
	// Type declaration for hycu3
	cpr.utils.Util.ensurePackage("udc").hycu3 = function(id){
		cpr.controls.UDCBase.call(this, "udc.hycu3", internalApp, id);
	};
	
	udc.hycu3.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.hycu3.prototype, "type", {
		get : function(){
			return "udc.hycu3";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.hycu3.prototype, "dataS", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataS");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataS", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.hycu3
/// start - udc.hycuMenu
/*
 * UDC Qualified Name: udc.hycuMenu
 * App URI: udc/hycuMenu
 * Source Location: udc/hycuMenu.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/hycuMenu", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hycuMenu.js
			 * Created at 2019. 9. 30. 오후 2:53:41.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			exports.configMenu = configMenu;
			
			
			/**
			 * 
			 * @param {String} parentValue
			 * @param {Array} childValues
			 */
			function configMenu(parentValue,childValues){
				
				var vcOptParent = app.lookup("optParent");
				
				vcOptParent.value = parentValue;
				
				var container = app.getContainer();
					
				
				childValues.forEach(function(each){
					
					var opts = new cpr.controls.Output();
					opts.value = each;
					
					app.getContainer().addChild(opts, {
						"width" : "100px",
						"height" : "20px",
						"autoSize" : "none"
						
					});
					
				});
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.leftMargin = 10;
			verticalLayout_1.rightMargin = 10;
			verticalLayout_1.topMargin = 10;
			verticalLayout_1.bottomMargin = 10;
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("optParent");
			output_1.style.css({
				"border-bottom-color" : "lightgray",
				"font-weight" : "bold",
				"border-bottom-width" : "2px",
				"font-size" : "12pt",
				"border-bottom-style" : "solid",
				"text-align" : "center"
			});
			container.addChild(output_1, {
				"width": "100px",
				"height": "44px"
			});
			
			var output_2 = new cpr.controls.Output("opt1");
			output_2.value = "";
			container.addChild(output_2, {
				"width": "100px",
				"height": "5px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "hycuMenu";
	
	// Type declaration for hycuMenu
	cpr.utils.Util.ensurePackage("udc").hycuMenu = function(id){
		cpr.controls.UDCBase.call(this, "udc.hycuMenu", internalApp, id);
	};
	
	udc.hycuMenu.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.hycuMenu.prototype, "type", {
		get : function(){
			return "udc.hycuMenu";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.hycuMenu
/// start - udc.InitLoadTestUDC
/*
 * UDC Qualified Name: udc.InitLoadTestUDC
 * App URI: udc/InitLoadTestUDC
 * Source Location: udc/InitLoadTestUDC.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/InitLoadTestUDC", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * InitLoadTestUDC.js
			 * Created at 2020. 4. 24. 오후 1:18:36.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				console.log("UDC LOAD EVENT");
			
				var loadEvent = new cpr.events.CUIEvent("loads");
				
				app.dispatchEvent(loadEvent);	
			}
			
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				console.log("UDC INIT EVENT");
			
				var inits = new cpr.events.CUIEvent("intt");
				
				app.dispatchEvent(inits);
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "40px"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "";
			container.addChild(button_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			container.addChild(inputBox_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	internalApp.title = "InitLoadTestUDC";
	
	// Type declaration for InitLoadTestUDC
	cpr.utils.Util.ensurePackage("udc").InitLoadTestUDC = function(id){
		cpr.controls.UDCBase.call(this, "udc.InitLoadTestUDC", internalApp, id);
	};
	
	udc.InitLoadTestUDC.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.InitLoadTestUDC.prototype, "type", {
		get : function(){
			return "udc.InitLoadTestUDC";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.InitLoadTestUDC
/// start - udc.InitTestUDC
/*
 * UDC Qualified Name: udc.InitTestUDC
 * App URI: udc/InitTestUDC
 * Source Location: udc/InitTestUDC.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/InitTestUDC", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * InitTestUDC.js
			 * Created at 2020. 4. 24. 오후 1:43:03.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	internalApp.title = "InitTestUDC";
	
	// Type declaration for InitTestUDC
	cpr.utils.Util.ensurePackage("udc").InitTestUDC = function(id){
		cpr.controls.UDCBase.call(this, "udc.InitTestUDC", internalApp, id);
	};
	
	udc.InitTestUDC.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.InitTestUDC.prototype, "type", {
		get : function(){
			return "udc.InitTestUDC";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.InitTestUDC
/// start - udc.ipbs
/*
 * UDC Qualified Name: udc.ipbs
 * App URI: udc/ipbs
 * Source Location: udc/ipbs.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ipbs", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * ipbs.js
			 * Created at 2020. 1. 6. 오후 4:32:21.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			/**
			 * 검색창의 값을 지정하는 함수입니다.
			 * @param {String} psIpbValue
			 */
			exports.setIpbValue = function(psIpbValue) {
				
				app.lookup("ipb1").value = psIpbValue;
			//	app.lookup("ipbSearch").redraw();
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("newProperty1", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.placeholder = "place";
			container.addChild(inputBox_1, {
				"top": "0px",
				"right": "0px",
				"left": "0px",
				"height": "39px"
			});
		}
	});
	internalApp.title = "ipbs";
	
	// Type declaration for ipbs
	cpr.utils.Util.ensurePackage("udc").ipbs = function(id){
		cpr.controls.UDCBase.call(this, "udc.ipbs", internalApp, id);
	};
	
	udc.ipbs.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ipbs.prototype, "type", {
		get : function(){
			return "udc.ipbs";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ipbs.prototype, "newProperty1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty1", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ipbs
/// start - udc.loadmask
/*
 * UDC Qualified Name: udc.loadmask
 * App URI: udc/loadmask
 * Source Location: udc/loadmask.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/loadmask", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			app.declareAppProperty("text", "처리 중입니다...");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-loadmask"]);
			group_1.style.css({
				"background-color" : "lightgray"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "";
				output_1.style.setClasses(["loading"]);
				output_1.bind("value").toAppProperty("text");
				container.addChild(output_1, {
					"width": "148px",
					"height": "32px",
					"left": "calc(50% - 74px)",
					"top": "calc(50% - 16px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "200px",
				"height": "50px",
				"left": "calc(50% - 100px)",
				"top": "calc(50% - 25px)"
			});
		}
	});
	internalApp.title = "loadmask";
	
	// Type declaration for loadmask
	cpr.utils.Util.ensurePackage("udc").loadmask = function(id){
		cpr.controls.UDCBase.call(this, "udc.loadmask", internalApp, id);
	};
	
	udc.loadmask.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.loadmask.prototype, "type", {
		get : function(){
			return "udc.loadmask";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.loadmask.prototype, "text", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("text");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("text", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.loadmask
/// start - udc.loadmask.loadmask
/*
 * UDC Qualified Name: udc.loadmask.loadmask
 * App URI: udc/loadmask/loadmask
 * Source Location: udc/loadmask/loadmask.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/loadmask/loadmask", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				setTimeout(function(){
					
					app.lookup("btn1").visible = true;
				}, 3000);
			}
			
			
			/*
			 * "끝내기" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				app.close();
				
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px",
				"background-color" : "transparent"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "#959697",
				"border-right-width" : "2px",
				"border-left-color" : "#959697",
				"border-right-color" : "#959697",
				"border-left-width" : "2px",
				"border-top-style" : "solid",
				"background-color" : "#ffffff",
				"border-left-style" : "solid",
				"border-bottom-width" : "2px",
				"border-top-color" : "#959697",
				"border-bottom-style" : "solid"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "Loading...";
				output_1.style.css({
					"padding-top" : "7px",
					"background-repeat" : "no-repeat",
					"font-weight" : "bold",
					"padding-left" : "40px",
					"padding-bottom" : "0px",
					"background-image" : "url('theme/loader.gif')",
					"padding-right" : "0px"
				});
				container.addChild(output_1, {
					"width": "138px",
					"height": "32px",
					"left": "calc(50% - 69px)",
					"top": "calc(50% - 16px)"
				});
				var button_1 = new cpr.controls.Button("btn1");
				button_1.visible = false;
				button_1.value = "끝내기";
				if(typeof onBtn1Click == "function") {
					button_1.addEventListener("click", onBtn1Click);
				}
				container.addChild(button_1, {
					"right": "19px",
					"bottom": "20px",
					"width": "100px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "loadmask";
	
	// Type declaration for loadmask
	cpr.utils.Util.ensurePackage("udc.loadmask").loadmask = function(id){
		cpr.controls.UDCBase.call(this, "udc.loadmask.loadmask", internalApp, id);
	};
	
	udc.loadmask.loadmask.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.loadmask.loadmask.prototype, "type", {
		get : function(){
			return "udc.loadmask.loadmask";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.loadmask.loadmask
/// start - udc.loadmask.loadmaskprogress
/*
 * UDC Qualified Name: udc.loadmask.loadmaskprogress
 * App URI: udc/loadmask/loadmaskprogress
 * Source Location: udc/loadmask/loadmaskprogress.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/loadmask/loadmaskprogress", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var intervalID = null;
			
			exports.start = function() {
				var progressbar = app.lookup("progressbar");
				
				if(intervalID) {
					window.clearInterval(intervalID);
					intervalID = null;
				}
				
				intervalID = window.setInterval(function() {
					var pValue = progressbar.numberValue;
					pValue += 4;
					if(pValue > progressbar.max) {
						progressbar.numberValue = 0;
					} else {
						progressbar.numberValue = pValue;
					}
				}, 100);
			}
			
			exports.end = function() {
				if(intervalID) {
					window.clearInterval(intervalID);
					var progressbar = app.lookup("progressbar");
					progressbar.numberValue = 0;
					intervalID = null;
				}
			}
			// End - User Script
			
			// Header
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var progress_1 = new cpr.controls.Progress("progressbar");
				progress_1.value = "0";
				progress_1.max = 100.0;
				container.addChild(progress_1, {
					"top": "50px",
					"right": "20px",
					"left": "20px",
					"height": "20px"
				});
				var output_1 = new cpr.controls.Output();
				output_1.value = "Loading...";
				output_1.style.css({
					"font-weight" : "bold",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "98px",
					"right": "130px",
					"left": "130px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	internalApp.title = "loadmaskprogress";
	
	// Type declaration for loadmaskprogress
	cpr.utils.Util.ensurePackage("udc.loadmask").loadmaskprogress = function(id){
		cpr.controls.UDCBase.call(this, "udc.loadmask.loadmaskprogress", internalApp, id);
	};
	
	udc.loadmask.loadmaskprogress.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.loadmask.loadmaskprogress.prototype, "type", {
		get : function(){
			return "udc.loadmask.loadmaskprogress";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.loadmask.loadmaskprogress
/// start - udc.loadmask_1
/*
 * UDC Qualified Name: udc.loadmask_1
 * App URI: udc/loadmask_1
 * Source Location: udc/loadmask_1.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/loadmask_1", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "#959697",
				"border-right-width" : "2px",
				"border-left-color" : "#959697",
				"border-right-color" : "#959697",
				"border-left-width" : "2px",
				"border-top-style" : "solid",
				"background-color" : "#ffffff",
				"border-left-style" : "solid",
				"border-bottom-width" : "2px",
				"border-top-color" : "#959697",
				"border-bottom-style" : "solid"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "3~4분이상 소요됩니다.";
				output_1.style.css({
					"padding-top" : "7px",
					"background-repeat" : "no-repeat",
					"font-weight" : "bold",
					"padding-left" : "40px",
					"padding-bottom" : "0px",
					"background-image" : "url('image/loader.gif')",
					"padding-right" : "0px"
				});
				container.addChild(output_1, {
					"width": "252px",
					"height": "38px",
					"left": "calc(50% - 126px)",
					"top": "calc(50% - 19px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	internalApp.title = "loadmask_1";
	
	// Type declaration for loadmask_1
	cpr.utils.Util.ensurePackage("udc").loadmask_1 = function(id){
		cpr.controls.UDCBase.call(this, "udc.loadmask_1", internalApp, id);
	};
	
	udc.loadmask_1.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.loadmask_1.prototype, "type", {
		get : function(){
			return "udc.loadmask_1";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.loadmask_1
/// start - udc.MinimizeButton
/*
 * UDC Qualified Name: udc.MinimizeButton
 * App URI: udc/MinimizeButton
 * Source Location: udc/MinimizeButton.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/MinimizeButton", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * MinimizeButton.js
			 * Created at 2019. 12. 3. 오후 1:38:49.
			 *
			 * @author ryu
			 ************************************************/
			
			
			exports.abc = function(){
				alert("ㅠㅠㅠㅠㅠ!");
			}
			
			exports.def = function(){
				
				alert("lol~");
			}
			
			
			/*
			 * "-" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				// 크기가 조절되는 타겟 컨트롤
				
				/** @type cpr.controls.Container */
				var vcTarget = app.getAppProperty("target");
				
				
				if (vcTarget == null){
					return;
				}
					
				// 타켓이 그룹일 때와 탭 폴더인 경우에 대한 처리 방식을 다르게 가진다.
				if (vcTarget.type == "container"){
					var voTargetLayout = vcTarget.getLayout();
			
					// 레이아웃의 종류가 폼 레이아웃일 경우에만 적용될 수 있도록 한다.
					if (voTargetLayout instanceof cpr.controls.layouts.FormLayout){
						// 최소화 여부에 따라 행을 표시 또는 미표시한다.
							var minimize = app.getAppProperty("minimize");
							var vaMinimizeIdx = app.getAppProperty("minimizeIndex").split(",");
							
							vaMinimizeIdx.forEach(function(each){
								voTargetLayout.setRowVisible(parseInt(each), minimize);
							});
							app.setAppProperty("minimize", !minimize);
					}
					
				} else if (vcTarget.type == "tabfolder") {
					/** @type cpr.controls.Container */
					var vcParent = vcTarget.getParent();
					
					if (!app.getAppProperty("minimize")){
						vcParent.updateConstraint(vcTarget, {
							height : "31px"
						});
						
						app.setAppProperty("minimize", true);
					} else {
						vcParent.updateConstraint(vcTarget, {
							height : "187px"
						});
			
						app.setAppProperty("minimize", false);
					}
					
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("target", null);
			app.declareAppProperty("minimize", false);
			app.declareBindableAppProperty("minimizeIndex", "1");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn");
			button_1.bind("value").toExpression("@minimize == true ? \"+\" : \"-\"");
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "MinimizeButton";
	
	// Type declaration for MinimizeButton
	cpr.utils.Util.ensurePackage("udc").MinimizeButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.MinimizeButton", internalApp, id);
	};
	
	udc.MinimizeButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.MinimizeButton.prototype, "type", {
		get : function(){
			return "udc.MinimizeButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.MinimizeButton.prototype, "target", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("target");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("target", newValue, true);
		}
	});
	Object.defineProperty(udc.MinimizeButton.prototype, "minimize", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("minimize");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("minimize", newValue, true);
		}
	});
	Object.defineProperty(udc.MinimizeButton.prototype, "minimizeIndex", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("minimizeIndex");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("minimizeIndex", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.MinimizeButton
/// start - udc.saveme.Arrow
/*
 * UDC Qualified Name: udc.saveme.Arrow
 * App URI: udc/saveme/Arrow
 * Source Location: udc/saveme/Arrow.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/saveme/Arrow", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Arrow.js
			 * Created at 2019. 4. 4. 오전 11:38:15.
			 *
			 * @author daye
			 ************************************************/
			
			exports.getLine1Rect = getLine1Rect;
			exports.getLine2Rect = getLine2Rect;
			exports.setArrowMargin = setArrowStyleArrow;
			
			/**
			 * @return line1 컨트롤 위치
			 */
			function getLine1Rect() {
				var voActualRect = app.lookup("line1").getActualRect();
				return voActualRect	
			}
			
			
			/**
			 *  @return line2 컨트롤 위치
			 */
			function getLine2Rect() {
				var voActualRect = app.lookup("line2").getActualRect();
				return voActualRect	
			}
			
			
			/**
			 * Arrow margin setting
			 * @param {any} vsArrowPosition
			 * @param {any} vsMarginPosition
			 * @param {any} margin
			 */
			function setArrowStyleArrow(vsArrowPosition, vsMarginPosition, margin) {
				vsMarginPosition = "margin-"+vsMarginPosition;
				app.lookup("arr_" + vsArrowPosition).style.css(vsMarginPosition,  margin + "px");
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				var container = app.getContainer();
				var line1 = app.lookup("line1");
				var line2 = app.lookup("line2");
			
				if(e.property == "shape"){
					var shape = app.getAppProperty("shape");
			
					// 1. 기존 적용된 클래스 삭제
					if(container.style.hasClass("horizontal-up")){
						container.style.removeClass("horizontal-up");
					}else if(container.style.hasClass("horizontal-bottom")){
						container.style.removeClass("horizontal-bottom");
					}else{
						container.style.removeClass("vertical");
					}
					
					// 2. type에 해당하는 클래스 추가
					container.style.addClass(shape);
			
					switch(shape){
						case "horizontal-bottom" : {
							// 화살표 visible 설정
							app.lookup("arr_top").visible = false;
							app.lookup("arr_bottom").visible = false;
							app.lookup("arr_left").visible = true;
							app.lookup("arr_right").visible = true;
							
							// 폼레이아웃 설정
							container.updateConstraint(line1, {
								rowIndex : 1, 
								colIndex : 1, 
								colSpan : 1,
								rowSpan : 2
							});
							container.updateConstraint(line2, {
								rowIndex : 1, 
								colIndex : 2, 
								colSpan : 1,
								rowSpan : 2
							});
							break;
						}
						case "horizontal-up" : {
							// 화살표 visible 설정
							app.lookup("arr_top").visible = false;
							app.lookup("arr_bottom").visible = false;
							app.lookup("arr_left").visible = true;
							app.lookup("arr_right").visible = true;
							
							// 폼레이아웃 설정
							container.updateConstraint(line1, {
								rowIndex : 1, 
								colIndex : 1, 
								colSpan : 1,
								rowSpan : 2
							});
							container.updateConstraint(line2, {
								rowIndex : 1, 
								colIndex : 2, 
								colSpan : 1,
								rowSpan : 2
							});
							break;
						}
						
						case "vertical" : {
							// 화살표 visible 설정
							app.lookup("arr_top").visible = true;
							app.lookup("arr_bottom").visible = true;
							app.lookup("arr_left").visible = false;
							app.lookup("arr_right").visible = false;
							
							// 폼레이아웃 설정
							container.updateConstraint(line1, {
								rowIndex : 1, 
								colIndex : 1, 
								colSpan : 2,
								rowSpan : 1
							});
							container.updateConstraint(line2, {
								rowIndex : 2, 
								colIndex : 1, 
								colSpan : 2,
								rowSpan : 1
							});
							break;
						}
					}
				}
			}
			
			
			/*
			 * Body에서 contextmenu 이벤트 발생 시 호출.
			 * 마우스의 오른쪽 버튼이 클릭되거나 컨텍스트 메뉴 키가 눌려지면 호출되는 이벤트.
			 */
			function onBodyContextmenu(/* cpr.events.CMouseEvent */ e){
				var dsMenu = app.lookup("dsMenu");
				
				// 시스템 기본동작 방지
				e.preventDefault();
				
				/** @type cpr.controls.Menu */
				var menu = new cpr.controls.Menu();
				menu.setItemSet(dsMenu, {
					label: "label",
					value: "value",
					icon: "icon",
					parentValue: "parent"
				});
				
				app.getRootAppInstance().floatControl(menu, {
					position: "absolute",
					top: e.clientY + "px",
					left: e.clientX + "px",
					width: "150px"
				});
				menu.focus();
				
				// 메뉴 삭제
				menu.addEventListener("blur", function(e){
					app.getRootAppInstance().removeFloatingControl(menu);
				});
				
				// 메뉴 선택
				menu.addEventListener("selection-change", function(e){
					switch(menu.value){
						case "del" : {
							app.getRootAppInstance().removeAllFloatingControls();
			
							var event = new cpr.events.CUIEvent("deleteLine");
							app.dispatchEvent(event);
							
							break;
						}
					}
				});
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("shape", null);
			var dataSet_1 = new cpr.data.DataSet("dsMenu");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "icon"},
					{"name": "parent"}
				],
				"rows": [{"label": "연결 삭제", "value": "del"}]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["10px", "1fr", "1fr", "10px"]);
			formLayout_1.setRows(["10px", "1fr", "1fr", "10px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("line1");
			group_1.style.setClasses(["line1"]);
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_1);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 1,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_2 = new cpr.controls.Container("line2");
			group_2.style.setClasses(["line2"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_2);
			(function(container){
			})(group_2);
			container.addChild(group_2, {
				"colIndex": 2,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_3 = new cpr.controls.Container("arr_right");
			group_3.style.setClasses(["arrow-right"]);
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_3);
			(function(container){
			})(group_3);
			container.addChild(group_3, {
				"colIndex": 3,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_4 = new cpr.controls.Container("arr_left");
			group_4.style.setClasses(["arrow-left"]);
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_4.setLayout(xYLayout_4);
			(function(container){
			})(group_4);
			container.addChild(group_4, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_5 = new cpr.controls.Container("arr_top");
			group_5.style.setClasses(["arrow-top"]);
			// Layout
			var xYLayout_5 = new cpr.controls.layouts.XYLayout();
			group_5.setLayout(xYLayout_5);
			(function(container){
			})(group_5);
			container.addChild(group_5, {
				"colIndex": 1,
				"rowIndex": 0,
				"colSpan": 2,
				"rowSpan": 1
			});
			
			var group_6 = new cpr.controls.Container("arr_bottom");
			group_6.style.setClasses(["arrow-down"]);
			// Layout
			var xYLayout_6 = new cpr.controls.layouts.XYLayout();
			group_6.setLayout(xYLayout_6);
			(function(container){
			})(group_6);
			container.addChild(group_6, {
				"colIndex": 1,
				"rowIndex": 3,
				"colSpan": 2,
				"rowSpan": 1
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyContextmenu == "function"){
				app.getContainer().addEventListener("contextmenu", onBodyContextmenu);
			}
		}
	});
	internalApp.title = "Arrow";
	
	// Type declaration for Arrow
	cpr.utils.Util.ensurePackage("udc.saveme").Arrow = function(id){
		cpr.controls.UDCBase.call(this, "udc.saveme.Arrow", internalApp, id);
	};
	
	udc.saveme.Arrow.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.saveme.Arrow.prototype, "type", {
		get : function(){
			return "udc.saveme.Arrow";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.saveme.Arrow.prototype, "shape", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("shape");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("shape", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.saveme.Arrow
/// start - udc.saveme.flow
/*
 * UDC Qualified Name: udc.saveme.flow
 * App URI: udc/saveme/flow
 * Source Location: udc/saveme/flow.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/saveme/flow", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * flow.js
			 * Created at 2020. 12. 8. 오전 10:03:22.
			 * 해당 UDC는 플로우 차트를 그리기 위해 작성된 UDC 입니다.
			 * 해당 UDC를 동작 시키기 위해서는 UDC를 사용하는 화면에서 drawProcess 함수를 실행시켜야 하며, 
			 * 필수적으로 dsChart, columnConfig에 대한 값을 집어넣어야 합니다.
			 * dsChart는 플로우 차트의 데이터를 구성하는 데이터셋객체이며,
			 * columnConfig는 차트를 구성하는데 필요한 데이터들을 가진 컬럼 명을 지정해야 합니다.
			 * @author HANS
			 ************************************************/
			
			var voDsColNms = {
				textCol : "processNm",//업무명이 담긴 컬럼명
				valueCol : "value", //업무별 파트를 구분할 컬럼입니다. 이 값이 동일한 업무들을 하나의 파트로 묶어서 화살표로 연걸하게 만듭니다.
				sortCol : "sortNum",//같은 파트의 업무에서 업무별 순서를 지정할 수 있는 컬럼입니다.
				arrowTargetCol :"arrowValue", //파트의 각 업무들은 다음 파트의 첫번째 업무에 화살표가 연결되나, 
				progressCol : "progress" //진행상태를 표시하는 컬럼명
			}
			
			var vnProcessWidth = 150;		//업무 컴포넌트의 가로크기
			var vnProcessHeight = "40px";	//업무 컴포넌트의 세로크기
			var vnPartHeight = "50px";		//파트 최소크기 (스크립트를 통해 자동 크기를 사용합니다)
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * 플로우차트에서 업무별로 직선 화살표 객체를 생성하여 이어주는 함수입니다.
			 */
			function drawArrow(){
				
				var vaProcessCont = app.getContainer().getChildren();
				var voActualRect = app.getHost().getActualRect();
				
				for(var i =0 ; i < vaProcessCont.length-1 ; i++){
					
					/** @type cpr.controls.Container */
					var prev = vaProcessCont[i];
					/** @type cpr.controls.Container */
					var next = vaProcessCont[i+1];
					prev.getAllRecursiveChildren().forEach(function(each){
						
						next.getAllRecursiveChildren().forEach(function(eachs){
							
							var nextChild = eachs.getActualRect().centerLeft;
							var prevChild = each.getActualRect().centerRight;
							var vnLeft = prevChild.x;
							var vnTop = prevChild.y - 10;
							var voDifference = nextChild.getDifference(prevChild);
							var vnHeight = voDifference.height;
							if (voDifference.width > 0) {
								
								var arrow = new udc.saveme.hitman();
								if (vnHeight == 0) {
									vnHeight = 22;
								} else if (vnHeight < 0) {
									vnTop += vnHeight;
									vnHeight -= 20;
								} else {
									vnHeight += 20;
								}
								arrow.arrowBuild(vnHeight);
								
								app.getContainer().floatControl(arrow, {
									"left": vnLeft-voActualRect.left + "px",
									"top": vnTop-voActualRect.top + "px",
									"width": voDifference.width + 5 + "px",
									"height": Math.abs(vnHeight) + "px"
								});
							}
							
							
						});
					});
				}
			}	
			
			/**
			 * 플로우차트에서 업무별로 대각선 화살표 객체를 생성하여 이어주는 함수입니다.
			 */
			function drawSvg(){
				
				var vaProcessCont = app.getContainer().getChildren();
				var aqqq = app.getHost().getActualRect();
				for(var i =0 ; i < vaProcessCont.length-1 ; i++){
					
					/** @type cpr.controls.Container */
					var prev = vaProcessCont[i];
					/** @type cpr.controls.Container */
					var next = vaProcessCont[i+1];
					prev.getAllRecursiveChildren().forEach(function(each){
						
						next.getAllRecursiveChildren().forEach(function(eachs){
							
							var nextChild = eachs.getActualRect().centerLeft;
							var prevChild = each.getActualRect().centerRight;
							var left = prevChild.x;
							var top = prevChild.y;
							var differ = nextChild.getDifference(prevChild);
							var heights = differ.height;
							var arrow = new cpr.controls.HTMLSnippet();
							if(heights == 0) {
								var vnSvgWidth = differ.width-5;
								arrow.value = '<svg width="100%" height="100%">' +
									'<defs>' +
									'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
									'markerWidth="3" markerHeight="6"' +
									'orient="auto-start-reverse">' +
									'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
									'</defs>' +
									'<line x1="0" y1="5" x2="'+vnSvgWidth+'" y2="5" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
									'</svg>';
									
									heights = 15;
							}
							else if (heights > 0) {
								heights += 10;
								var vnSvgEndX  = differ.width-5;
								var vnSvgEndY = heights-5;
								arrow.value = '<svg width="100%" height="100%">' +
									"<defs>" +
									'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
									'markerWidth="3" markerHeight="6"' +
									'orient="auto-start-reverse">' +
									'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
									'</defs>' +
									'<line x1="0" y1="5" x2="'+vnSvgEndX+'" y2="'+vnSvgEndY+'" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
									'</svg>';
									
							} else {
								
								var vnSvgStartY = Math.abs(heights);
								heights +=5;
								var vnSvgEndX = differ.width-5;
								arrow.value = '<svg width="100%" height="100%">' +
									"<defs>" +
									'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
									'markerWidth="3" markerHeight="6"' +
									'orient="auto-start-reverse">' +
									'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
									'</defs>' +
									'<line x1="0" y1="'+vnSvgStartY+'" x2="'+vnSvgEndX+'" y2="5" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
									'</svg>';
								top += heights;
							}
							
							app.getContainer().floatControl(arrow,{
								"left" : left-aqqq.left+"px",
								"top" : top-5 - aqqq.top+"px",
								"width":differ.width+"px",
								"height":Math.abs(heights)+10+"px"
							});
							
						});
					});
				}
			}
			
			/**
			 * 플로우차트에서 파트별 업무 객체를 생성하여 배치하는 함수입니다.해당함수를 사용하여 차트를 그릴 때, 차트를 그리기 위해 보낸 데이터셋과,
			 * udc 내의 데이터셋의 컬럼명, 그리고 udc의 스크립트의 최상단에 위치한 udc내 전역변수 voDsColNms의 컬럼명을 일치시켜야, 정상적으로 차트가 그려질 수 있습니다.
			 * progressCol:진행상태를 표시하는 컬럼, arrowTargetCol:다음 파트의 특정 sortCol업무를 찾아 이동, sortCol :같은 파트의 업무에서 업무별 순서를 지정, textCol : 업무명이 담긴 컬럼
			 * @param {cpr.data.DataSet} pcDataSet
			 * @param {Number} widths
			 * @param {{textCol : String, valueCol:String, sortCol:String,arrowTargetCol:String, progressCol:String}} poColumnConfig
			 */
			function drawProcess(pcDataSet,widths,poColumnConfig) {
				
				app.getContainer().removeAllChildren();
				
				/** @type cpr.data.DataSet */
				var vcDSet = pcDataSet;
				var vcDs = app.lookup("ds1");
				if(poColumnConfig != null && poColumnConfig != undefined){
					voDsColNms = poColumnConfig;
				}
				
				if (vcDSet) {
					var voOriginColNm = vcDSet.getColumnNames();
					var voCopyColNm = vcDs.getColumnNames();
					
					try {
						if (voOriginColNm.toString() == voCopyColNm.toString()) {
							
							var voRowDatas = vcDSet.getRowDataRanged();
							vcDs.build(voRowDatas);
						} else {
							
							throw new Error("차트를 그리기 위해서 보낸 데이터셋과, udc내에서 사용하는 컬럼명이 일치하지 않아 플로우 차트를 그려지지 않읗 수 있습니다. flow udc내의 데이터셋과" +
								"상단의 전역변수인 voDsColNms에 담긴 컬럼명을 차트를 그리기 위해 보낸 데이터셋의 컬렴명과 일치시키십시오.");
						}
					} catch (err) {
						console.log(err);
					}
					
				}
				var vcDs = app.lookup("ds1");
				vcDs.setSort(voDsColNms.valueCol+" asc,"+voDsColNms.sortCol+" asc");
				
				var vnRowCnt = vcDs.getRowCount();
				var vaUnfilteredCol = vcDs.getUnfilteredDistinctValues(voDsColNms.valueCol);
				var vnLength = vaUnfilteredCol.length;
				
				
				var voLayout = app.getContainer().getLayout();
				
				voLayout.horizontalSpacing = "30px";
				voLayout.verticalSpacing = "30px";
				var vnWhile = 0;
				var vnWhile2= true;
				var vaCols = [];
				var voRows = [vnPartHeight];
				
				for(var i = 0 ; i < vaUnfilteredCol.length ; i++){
					
					
					if(vnWhile+vnProcessWidth < widths){
						vnWhile += vnProcessWidth+30;
						if(vnWhile2)
						vaCols.push(vnProcessWidth+"px");
					} else {
						voRows.push(vnPartHeight);
						vnWhile2 = false;
						vnWhile = vnProcessWidth;
						vaUnfilteredCol.splice(i,0,vaUnfilteredCol[i-1]);
						
					}
				}
				voRows.pop();
				voRows.push(vnProcessHeight);
				voLayout.setRows(voRows);
				voLayout.setColumns(vaCols);
				voRows.forEach(function(each,idx){
					
				voLayout.setRowAutoSizing(idx,true);
				});
				
				vaUnfilteredCol.forEach(function(each,idx) {
					var allRow = vcDs.findAllRow(voDsColNms.valueCol+" =='" + each + "'");
					if (allRow.length > 0) {
						
						var vertical = new cpr.controls.Container();
						var vLayout = new cpr.controls.layouts.VerticalLayout();
						vLayout.spacing = 20;
						vertical.setLayout(vLayout);
						
						allRow.forEach(function(eachRow) {
							var vcProc = new udc.saveme.process();
							vcProc.userAttr("target", eachRow.getValue(voDsColNms.arrowTargetCol));
							vcProc.textNm = eachRow.getValue(voDsColNms.textCol);
							vcProc.progress = eachRow.getValue(voDsColNms.progressCol);
							vertical.addChild(vcProc, {
								"width": "100px",
								"height": vnProcessHeight,
								"autoSize": "none"
							});
						});
						
						var vnCI = idx%vaCols.length;
						var vnRI = Math.floor(idx/vaCols.length);
						app.getContainer().addChild(vertical, {
							colIndex : vnCI,
							rowIndex : vnRI
						});
					}
					
				});
				cpr.core.DeferredUpdateManager.INSTANCE.update();
				
				if(app.getAppProperty("arrowType")=="straight") {
					
					drawArrow();
				} else if(app.getAppProperty("arrowType")=="diagonal"){
					
					drawSvg();
				}
				
			}
			
			exports.drawProcess = drawProcess;
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dsChart", null);
			app.declareAppProperty("arrowType", "straight");
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"alterColumnLayout": "server",
				"columns": [
					{"name": "processNm"},
					{
						"name": "value",
						"dataType": "number"
					},
					{
						"name": "sortNum",
						"dataType": "number"
					},
					{
						"name": "arrowValue",
						"dataType": "number"
					},
					{"name": "progress"}
				],
				"rows": [
					{"processNm": "연간사업추진일정", "value": "1", "arrowValue": "0", "sortNum": "0"},
					{"processNm": "정보보호대책서", "value": "2", "arrowValue": "0", "sortNum": "0"},
					{"processNm": "사업예산산정", "value": "2", "arrowValue": "0", "sortNum": "1"},
					{"processNm": "체계규격심의", "value": "2", "arrowValue": "0", "sortNum": "2"},
					{"processNm": "사업계획수립", "value": "3", "arrowValue": "0", "sortNum": "0"},
					{"processNm": "제안요청서검토", "value": "4", "arrowValue": "0", "sortNum": "0"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyMeasureSize == "function"){
				app.getContainer().addEventListener("measure-size", onBodyMeasureSize);
			}
		}
	});
	internalApp.title = "flow";
	
	// Type declaration for flow
	cpr.utils.Util.ensurePackage("udc.saveme").flow = function(id){
		cpr.controls.UDCBase.call(this, "udc.saveme.flow", internalApp, id);
	};
	
	udc.saveme.flow.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.saveme.flow.prototype, "type", {
		get : function(){
			return "udc.saveme.flow";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.saveme.flow.prototype, "dsChart", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dsChart");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dsChart", newValue, true);
		}
	});
	Object.defineProperty(udc.saveme.flow.prototype, "arrowType", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("arrowType");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("arrowType", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.saveme.flow
/// start - udc.saveme.hitman
/*
 * UDC Qualified Name: udc.saveme.hitman
 * App URI: udc/saveme/hitman
 * Source Location: udc/saveme/hitman.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/saveme/hitman", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hitman.js
			 * Created at 2020. 12. 14. 오전 9:26:39.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * 
			 * @param {Number} height
			 */
			exports.arrowBuild = function(height) {
				
				var vnHeight = height;
				
				var vcArrow = app.lookup("arrow");
				var vcCont1 = app.lookup("grp1");
				var vcCont2 = app.lookup("grp2");
				if (vnHeight > 0) {
					vcCont1.style.setClasses("");
					vcCont2.style.setClasses("");
					vcCont1.style.addClass("top-border");
					vcCont2.style.addClass("bottom-border");
					app.lookup("arrow").style.css("top", vnHeight - 25 + "px");
				} 
				else {
					vcCont1.style.setClasses("");
					vcCont2.style.setClasses("");
					vcCont1.style.addClass("bottom-border");
					vcCont2.style.addClass("top-border");
					app.lookup("arrow").style.css("top", vnHeight - 25 + "px");
				}
				
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				
				app.lookup("arrow").redraw();
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("arrowRect", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "1fr", "10px"]);
			formLayout_1.setRows(["10px", "1fr", "1fr", "10px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_1);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_2 = new cpr.controls.Container("grp2");
			group_2.style.css({
				"border-left-style" : "solid",
				"border-left-color" : "black",
				"border-left-width" : "2px"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_2);
			(function(container){
			})(group_2);
			container.addChild(group_2, {
				"colIndex": 1,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var output_1 = new cpr.controls.Output("arrow");
			output_1.value = "";
			output_1.style.setClasses(["arrow-right"]);
			container.addChild(output_1, {
				"colIndex": 2,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "\t<style type='text/css'>\r\n\t.cl-container.top-border{\r\n\t\tborder-top : solid 2px black;\r\n\t}\r\n\t.cl-container.bottom-border{\r\n\t\tborder-bottom : solid 2px black;\r\n\t}\r\n\t.cl-output.arrow-right{\r\n\twidth : 0;\r\n\theight : 0;\r\n\tborder-left :  4px solid black;\r\n\tborder-top : 4px solid transparent;\r\n\tborder-bottom : 4px solid transparent;\r\n}\r\n\t\t<\/style>";
			container.addChild(hTMLSnippet_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 2,
				"rowSpan": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "hitman";
	
	// Type declaration for hitman
	cpr.utils.Util.ensurePackage("udc.saveme").hitman = function(id){
		cpr.controls.UDCBase.call(this, "udc.saveme.hitman", internalApp, id);
	};
	
	udc.saveme.hitman.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.saveme.hitman.prototype, "type", {
		get : function(){
			return "udc.saveme.hitman";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.saveme.hitman.prototype, "arrowRect", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("arrowRect");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("arrowRect", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.saveme.hitman
/// start - udc.saveme.PivotGrid
/*
 * UDC Qualified Name: udc.saveme.PivotGrid
 * App URI: udc/saveme/PivotGrid
 * Source Location: udc/saveme/PivotGrid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/saveme/PivotGrid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * pivot.js
			 * Created at 2020. 4. 2. 오후 5:13:08.
			 ************************************************/
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				var propName = e.property;
				var propValue = e.newValue;
				
				switch(propName) {
					case "suppressedCellType" : {
						var grd = app.lookup("grd1");
						grd.suppressedCellType = propValue;
						break;
					}
				}
			}
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				return "Not Support";
			};
			exports.setRowGroup = function(){
				
				var vcGrid = app.lookup("grd1");
				var initConfig = vcGrid.getInitConfig();
				var vaColNm = app.lookup("ds").getColumnNames();
				var voRowGroup = {
					"groupCondition" : "secret",
					"gheader" :{
						"rows":[
							
						],
						"cells":[]
					}
				};
				
				voRowGroup.gheader.rows.push({"height" : "36px"});
				initConfig.detail.cells.forEach(function(each,idx){
					
					var tempGrpCellInfo = {
						constraint : {
							"rowIndex" : 0,
							"colIndex" : each.constraint.colIndex
						},
						configurator : function(cell) {
							cell.expr = idx==0 ? "'구분'" : "getSum('"+vaColNm[idx]+"')";
						}
					}
					
					voRowGroup.gheader.cells.push(tempGrpCellInfo);
				});
				initConfig.rowGroup  = [];
				initConfig.rowGroup.push(voRowGroup);
				
				vcGrid.init(initConfig);
			}
			
			exports.getColCnt = function(){
				return app.lookup("grd1").columnCount;
			}
			
			exports.getRowCnt = function(){
				return app.lookup("grd1").getRowCount();
			}
			/**
			 * PivotGrid를 그리기 위해 설정하는 함수.
			 * @param {cpr.data.DataSet} dataset
			 * @param {cols:{column:string}[], rows:{column:string, label:string}[], values:{column:string, label:string, aggregator:(sum|avg|min|max|count)}[]}
			 */
			function setup(/* cpr.data.DataSet */ dataset, config) {
				var ds = app.lookup("ds");
				var grd = app.lookup("grd1");
				ds.clear(true);
				/**
				 * {
				 *   key:{
				 *    [newColumnName1]: value(config.rows[0].column),
				 *    [newColumnName1]: value(config.rows[1].column),
				 *    ...
				 *   },
				 *   data : { [value(config.cols[0].column)]: { [value(config.cols[1].column)]..: { [config.values[0].label]: 0+,  [config.values[1].label]: 0+ } } }
				 * }[]
				 */
				var dataRows = []; // PivotGrid에 적용할 DataSet의 Data를 가진 Row의 중간형태
				var objMap = new cpr.utils.ObjectMap(); // Entry{keyobj:{[key:string]:string}, valueObj:{[depthValue]:{[depthValue]:{[leaf1Label]:number, [leaf2Label]:number, ...}}}}
				/**
				 * DataSet Column 의  dataRows에서의 값 경로
				 * {Path:string[]}[]
				 */
				var dataCols = [];
				/**
				 * DataSet Column 정보
				 * {name:string, dataType:string|number|decimal, aggregator?:(sum|avg|min|max|count)}[]
				 */
				var dsColumns = [];
				
				var rowColLeng = config.rows.length; // 행으로 처리될 컬럼의 개수
				for(var idx = 0; idx < rowColLeng; idx++) {
					var rowCol = config.rows[idx]; // {column:string, label:string}
					var columnName = "column" + (idx + 1);
					/**
					 * @type cpr.data.header.Header
					 */
					var rowColHeader = dataset.getColumn(rowCol.column).getHeader();
					var dataType = rowColHeader.getDataType();
					
					dataCols[dataCols.length] = [columnName];
					dsColumns[dsColumns.length] = {
						name : columnName,
						dataType : dataType
					};
				}
				
				var colLeng = config.cols.length; // 컬럼 필드의 개수
				var valLeng = config.values.length; // 값 필드의 개수
				
				var rowCount = dataset.getRowCount();
				// 소스 DataSet의 값 집계
				for(var idx = 0; idx < rowCount; idx++) {
					/*
					 * @type cpr.data.Row
					 */
					var row = dataset.getRow(idx);
			
					var isNew = false;
					var keyObj = {};
					for(var rci = 0; rci < rowColLeng; rci++) {
						var rowCol = config.rows[rci]; // {column:string, label:string}
						keyObj["column" + (rci + 1)] = row.getValue(rowCol.column);
					}
					
					var objMapEntry = objMap.findEntry(function(key, value, index) {
						for(var rci = 0; rci < rowColLeng; rci++) {
							var colNm = "column" + (rci + 1);
							if(key[colNm] != keyObj[colNm]) {
								return false;
							}
						}
						return true;
					});
					var valueObj = null;
					if(objMapEntry) {
						valueObj = objMapEntry.value;
						isNew = false;
					} else {
						valueObj = {};
						objMap.put(keyObj, valueObj);
						isNew = true;
					}
					
					var colPath = []; // 새로운 데이터셋의 데이터경로
					var parentValueWrap = valueObj;
					for(var ci = 0; ci < colLeng; ci++) {
						var colConf = config.cols[ci]; // {column:string, label:string}
						var colValue = row.getValue(colConf.column);
						colPath[colPath.length] = colValue;
			
						var valueCol = parentValueWrap[colValue];
						if(valueCol == null) {
							valueCol = {};
							parentValueWrap[colValue] = valueCol;
						}
						parentValueWrap = valueCol;
					}
					
					// 통계 데이터 생성
					for(var vi = 0; vi < valLeng; vi++) {
						var valConf = config.values[vi]; // {column:string, label:string, aggregator:(sum|avg|min|max|count)}
						var value = row.getValue(valConf.column);
						var valLabel = valConf.label;
						var aggregator = valConf.aggregator;
						if(!aggregator) {
							aggregator = "sum";
						}
						
						// 통계함수별 처리(Nexacro는 sum, avg, count, min, max, function을 제공)
						switch(aggregator) {
							case "sum" : {
								if(parentValueWrap.hasOwnProperty(valLabel)) {
									parentValueWrap[valLabel] += value;
								} else {
									parentValueWrap[valLabel] = value;
								}
								break;
							}
							case "avg" : {
								if(parentValueWrap.hasOwnProperty(valLabel)) { // 총합
									parentValueWrap[valLabel] += value;
								} else {
									parentValueWrap[valLabel] = value;
								}
								var dataCountLabel = valLabel + "_cnt"; // 카운트 저장 필드명
								if(parentValueWrap.hasOwnProperty(dataCountLabel)) {
									parentValueWrap[dataCountLabel] += 1;
								} else {
									parentValueWrap[dataCountLabel] = 1;
								}
								break;
							}
							case "min" : {
								if(parentValueWrap.hasOwnProperty(valLabel)) {
									var oldValue = parentValueWrap[valLabel];
									if(oldValue > value) {
										parentValueWrap[valLabel] = value;
									}
								} else {
									parentValueWrap[valLabel] = value;
								}
								break;
							}
							case "max" : {
								if(parentValueWrap.hasOwnProperty(valLabel)) {
									var oldValue = parentValueWrap[valLabel];
									if(oldValue < value) {
										parentValueWrap[valLabel] = value;
									}
								} else {
									parentValueWrap[valLabel] = value;
								}
								break;
							}
							case "count" : {
								if(parentValueWrap.hasOwnProperty(valLabel)) {
									parentValueWrap[valLabel] += 1;
								} else {
									parentValueWrap[valLabel] = 1;
								}
								break;
							}
							default : {
								if(parentValueWrap.hasOwnProperty(valLabel)) {
									parentValueWrap[valLabel] += value;
								} else {
									parentValueWrap[valLabel] = value;
								}
							}
						}
			
						var colContains = false;
						var leafPath = colPath.concat([valLabel]);
						outer : for(var pi = rowColLeng; pi < dataCols.length; pi++) {
							var dsColPath = dataCols[pi];
							for(var pci = 0; pci < leafPath.length; pci++) {
								if(leafPath[pci] != dsColPath[pci]) {
									continue outer;
								}
							}
							colContains = true;
							break outer;
						}
						if(colContains == false) { // 기존 컬럼이 없을 경우 컬럼 추가
							dataCols[dataCols.length] = leafPath;
							// TODO 정밀도, 단위환산 등 처리
							dsColumns[dsColumns.length] = {
								name : "column" + dataCols.length,
								dataType : cpr.data.tabledata.DataType.NUMBER,
								aggregator : aggregator
							};
						}
					}
					
					if(isNew) { // 새로운 통계 행일 경우 행 추가
						dataRows[dataRows.length] = {key: keyObj, data: valueObj};
					}
				}
			
				// dataSet 초기화
				ds.parseData({"columns" : dsColumns});
			
				// DataSet row 생성
				for(var idx = 0; idx < dataRows.length; idx++) {
					var dataRow = dataRows[idx];
					
					var row = ds.pushRow();
					for(var ci = 0; ci < dataCols.length; ci++) {
						var dataCol = dataCols[ci]; // path:string[]
						
						var columnName = "column" + (ci + 1);
						var columnValue = null;
						
						if(ci < rowColLeng) {
							columnValue = dataRow.key[columnName];
						} else {
							var parentData = null;
							var dataWrapper = dataRow.data;
							var vpi = 0;
							valueLoop : for(; vpi < dataCol.length; vpi++) {
								if(dataWrapper[dataCol[vpi]] == null) {
									dataWrapper = null;
									break valueLoop;
								} else {
									parentData = dataWrapper;
									dataWrapper = dataWrapper[dataCol[vpi]];
								}
							}
							var aggregator = dsColumns[ci].aggregator;
							switch(aggregator) {
								case "avg" : {
									var total = dataWrapper;
									var dataCountLabel = dataCol[vpi - 1] + "_cnt";
									var dataCnt = parentData[dataCountLabel];
									
									// TODO 정밀도 처리
									columnValue = (total / dataCnt).toFixed(2);
									break;
								}
								default : {
									columnValue = dataWrapper;
								}
							}
						}
						
						row.setValue(columnName, columnValue);
					}
					row.setState(cpr.data.tabledata.RowState.UNCHANGED);
				}
			//	ds.setRowStateAll(cpr.data.tabledata.RowState.UNCHANGED);
				
				/**
				 * @type cpr.controls.gridpart.GridConfig
				 */
				var gridInfo = createGridConfig(config, dataCols, dsColumns);
				
				// dataSet 설정
				gridInfo.dataSet = ds;
				
				gridInfo.header.rows[gridInfo.header.rows.length -1] = {"height" : "0px"};
				console.log(gridInfo);
				// pivot grid 초기화
				grd.init(gridInfo);
				// pivot grid redraw
				grd.redraw();
			
			}
			exports.setup = setup;
			/**
			 * @param {cpr.data.DataSet} dataset
			 * @param {Object} configs
			 */
			exports.easyDraw = function(dataset,configs){
				var vcDs = dataset
				
			
						var vaConfig = {
							"cols" : [],
							"rows" : [],
							"values":[]
						};
					var instantConfig = configs;
					
					
					if(instantConfig.cols.length > 0) {
						instantConfig.cols.forEach(function(each){
							
							var temp = {
								"column" : each,
								"label" : vcDs.getHeader(each).getInfo() != undefined ? vcDs.getHeader(each).getInfo() : each
							}
							vaConfig.cols.push(temp);
						});
					}
					if(instantConfig.rows.length > 0) {
						
						instantConfig.rows.forEach(function(each,idx){
							var rowTemp = {
								"column" : each,
								"label" : vcDs.getHeader(each).getInfo() != undefined ? vcDs.getHeader(each).getInfo() : each,
								"suppressRef" : (idx-1),
								"sippressible" : true
							}
							vaConfig.rows.push(rowTemp);
						});
					}
					if(instantConfig.values.length > 0) {
						
						instantConfig.values.forEach(function(each){
							
							var valueTemp = {
								"column" : each,
								"label" : vcDs.getHeader(each).getInfo() != undefined ? vcDs.getHeader(each).getInfo() : each,
								"aggregator" : vcDs.getHeader(each).getDataType() == "number" ? "sum" : "count"
							}
							
							vaConfig.values.push(valueTemp);
						});
					}
					
					setup(dataset, vaConfig);
							
			}
			/**
			 * GridConfig 객체를 생성하여 리턴한다.
			 * @param {cols:{column:string}[], rows:{column:string, label:string}[], values:{column:string, label:string}[]} config
			 * @param [path:string][] dataCols 각 컬럼의 값 경로
			 * @param {name:string, dataType:string|number|decimal}[] dsColumns
			 * @return cpr.controls.gridpart.GridConfig
			 */
			function createGridConfig(config, dataCols, dsColumns) {
				var rowColLeng = config.rows.length; // 행으로 처리될 컬럼의 개수
				/**
				 * Grid의 header cell 정보
				 * {label:string,
				 *  target:"columnName",
				 *  control?:string, // Control Type
				 *  sub:{label:string,..}[]}[]
				 */
				var headerCells = [];
				var hRowCnt = 0;
				
				for(var idx = 0; idx < dataCols.length; idx++) {
					var dataCol = dataCols[idx]; // Path:string[]
					var dataColumn = dsColumns[idx]; // {name:string, dataType:string|number|decimal}
					
					if(hRowCnt < dataCol.length) {
						hRowCnt = dataCol.length;
					}
					
					if(rowColLeng > idx) {
						var headerCell = {
							label: config.rows[idx].label,
							target : dataColumn.name,
							sub: null
						};
						if(config.rows[idx].hasOwnProperty("suppressible")) {
							headerCell.suppressible = config.rows[idx]["suppressible"];
						}
						if(config.rows[idx].hasOwnProperty("suppressRef")) {
							headerCell.suppressRef = config.rows[idx]["suppressRef"];
						}
						// 단일 구조
						headerCells[headerCells.length] = headerCell;
					} else {
						// 계층형 구조
						var parentCellContainer = headerCells;
						var headerCell = null;
						for(var i = 0; i < dataCol.length; i++) {
							var label = dataCol[i];
							var match = false;
							var nextContainer = null;
							check : for(var j = 0; j < parentCellContainer.length; j++) {
								headerCell = parentCellContainer[j];
								if(headerCell && headerCell.label == label) { // TODO rowlabel의 cell은 비교 대상에서 제거
									match = true;
									nextContainer = headerCell.sub;
									if(nextContainer == null) {
										nextContainer = [];
										headerCell.sub = nextContainer;
									}
									break check;
								}
							}
							if(match == false) {
								nextContainer = [];
								headerCell = {
									label : label,
									target : null,
									sub : nextContainer
								};
								parentCellContainer[parentCellContainer.length] = headerCell;
							}
							parentCellContainer = nextContainer;
						}
						if(headerCell) {
							headerCell.sub = null;
							headerCell.target = dataColumn.name;
							headerCell.control = "number"; // 값을 출력하는 DetailCell은 NumberEditor로 처리
						} else {
							console.log("GridCell is null!!!");
						}
					}
				}
				
				/**
				 * @type cpr.controls.gridpart.GridConfig
				 */
				var gridInfo = {};
				/**
				 * Detail Cell에 매핑할 dataset의 columnName 및 셀의 속성 배열
				 * {
				 *  column:string,
				 *  suppressible?:boolean,
				 *  suppressRef?:number,
				 *  control?:string // detail cell의 컨트롤 타입
				 * }
				 */
				var detailCells = [];
				
				// grid columns 설정
				gridInfo.columns = [];
				for(var i = 0; i < dsColumns.length; i++) {
					gridInfo.columns[gridInfo.columns.length] = {width: "100px"};
				}
				
				// grid header 생성
				gridInfo.header = function() {
					var headerInfo = {
						rows: [],
						cells: []
					};
					// grid header의 행 설정
					for(var i = 0; i < hRowCnt; i++) {
						headerInfo.rows[headerInfo.rows.length] = {height: "38px"};
					}
					
					var startRowIdx = 0;
					var startColIdx = 0;
					var maxRowSpan = hRowCnt;
					
					var cellCreator = function(headerCell, idx) {
						var cellInfo = {
							constraint: {},
							configurator: function(cell) {
								if(headerCell.target) {
									cell.targetColumnName = headerCell.target;
									cell.sortable = true;
								}
								cell.text = headerCell.label;
							}
						};
						cellInfo.constraint.rowIndex = startRowIdx;
						cellInfo.constraint.colIndex = startColIdx;
						cellInfo.constraint.rowSpan = maxRowSpan - getMaxDepth(headerCell) + 1;
						cellInfo.constraint.colSpan = getColSpan(headerCell);
						if(headerCell.target) {
							var detailCell = {
								column: headerCell.target
							};
							
							if(headerCell.hasOwnProperty("suppressible")) {
								detailCell.suppressible = headerCell["suppressible"];
							}
							if(headerCell.hasOwnProperty("suppressRef")) {
								detailCell.suppressRef = headerCell["suppressRef"];
							}
							if(headerCell.control === "number") {
								detailCell.control = "number";
							}
							
							detailCells[cellInfo.constraint.colIndex] = detailCell;
						}
						
						headerInfo.cells[headerInfo.cells.length] = cellInfo;
						
						if(headerCell.sub && headerCell.sub.length > 0) {
							var maxRowSpanBack = maxRowSpan;
							
							startRowIdx += cellInfo.constraint.rowSpan;
							startColIdx = cellInfo.constraint.colIndex;
							maxRowSpan -= cellInfo.constraint.rowSpan;
			
							headerCell.sub.forEach(cellCreator); // header group을 처리하기 위해 재귀호출
							
							maxRowSpan = maxRowSpanBack; // 재귀호출 후 값 원복
						}
						
						// 다음셀 연산을 위해 인덱스 값 초기화
						startRowIdx = cellInfo.constraint.rowIndex;
						startColIdx = cellInfo.constraint.colIndex + cellInfo.constraint.colSpan;
					}
					
					headerCells.forEach(cellCreator);
					
					
					return headerInfo;
				}();
				
				// grid detail 생성
				gridInfo.detail = function() {
					var detailInfo = {
						rows: [{height: "36px"}], // detail은 한 행
						cells: []
					};
					
					detailCells.forEach(function(detailCell, idx) {
						var cellInfo = {
							constraint: {rowIndex: 0, colIndex: idx},
							configurator: function(cell) {
								cell.columnName = detailCell.column;
								
								if(detailCell.control == "number") {
									cell.control = (function() {
										var numberEditor = new cpr.controls.NumberEditor();
										numberEditor.style.css({
											"text-align" : "right"
										});
										numberEditor.bind("value").toDataColumn(detailCell.column);
										
										// TODO 정밀도, 표현형식 처리
										
										return numberEditor;
									})();
								}
								if(detailCell.suppressible) {
									cell.suppressible = true;
								}
								if(detailCell.hasOwnProperty("suppressRef")) {
									cell.suppressRef = detailCell["suppressRef"];
								}
							}
						};
						detailInfo.cells[detailInfo.cells.length] = cellInfo;
					});
					
					return detailInfo;
				}();
				
				return gridInfo;
			}
			
			/**
			 * 전달받은 gridCell이 포함하는 최하단 노드의 개수를 리턴한다.
			 * @param {label:string, target:"columnName", sub:{label:string,..}[]} gridCell
			 * @return
			 */
			function getColSpan(gridCell) {
				var colSpan = 0;
				
				if(gridCell.sub == null || gridCell.sub.length == 0) {
					colSpan += 1;
				} else {
					var sub = gridCell.sub;
					for(var idx = 0; idx < sub.length; idx++) {
						colSpan += getColSpan(sub[idx]);
					}
				}
				
				return colSpan;
			}
			
			/**
			 * 전달받은 gridCell이 포함하는 최하단 노드까지의 깊이를 리턴한다.
			 * @param {label:string, target:"columnName", sub:{label:string,..}[]} gridCell
			 */
			function getMaxDepth(gridCell) {
				var sub = gridCell.sub;
				if(sub == null || sub.length == 0) {
					return 1;
				}
				var depth = 0;
				for(var i = 0; i < sub.length; i++) {
					var subcell = sub[i];
					var subCellDepth = getMaxDepth(subcell);
					if(depth < subCellDepth) {
						depth = subCellDepth;
					}
				}
				return depth + 1;
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("suppressedCellType", "split");
			var dataSet_1 = new cpr.data.DataSet("ds");
			dataSet_1.parseData({
				"sortCondition": "",
				"columns": []
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.readOnly = true;
			grid_1.init({
				"dataSet": app.lookup("ds"),
				"autoRowHeight": "none",
				"autoFit": "all"
			});
			grid_1.style.setClasses(["pivot"]);
			container.addChild(grid_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "PivotGrid";
	
	// Type declaration for PivotGrid
	cpr.utils.Util.ensurePackage("udc.saveme").PivotGrid = function(id){
		cpr.controls.UDCBase.call(this, "udc.saveme.PivotGrid", internalApp, id);
	};
	
	udc.saveme.PivotGrid.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.saveme.PivotGrid.prototype, "type", {
		get : function(){
			return "udc.saveme.PivotGrid";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.saveme.PivotGrid.prototype, "suppressedCellType", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("suppressedCellType");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("suppressedCellType", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.saveme.PivotGrid
/// start - udc.saveme.process
/*
 * UDC Qualified Name: udc.saveme.process
 * App URI: udc/saveme/process
 * Source Location: udc/saveme/process.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/saveme/process", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * process.js
			 * Created at 2020. 12. 17. 오후 3:20:48.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("textNm", null);
			app.declareAppProperty("progress", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-left-color" : "black",
				"border-bottom-width" : "1px",
				"border-right-color" : "black",
				"border-right-style" : "solid",
				"border-bottom-color" : "black",
				"top" : "0px",
				"border-top-style" : "solid",
				"border-radius" : "5px",
				"left" : "0px",
				"border-top-color" : "black",
				"border-left-width" : "1px",
				"border-left-style" : "solid",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "";
			output_1.style.css({
				"text-align" : "center"
			});
			output_1.bind("value").toAppProperty("textNm");
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "";
			output_2.style.css({
				"text-align" : "center"
			});
			output_2.bind("value").toAppProperty("progress");
			output_2.style.bind("color").toExpression([
				"switch(value){",
				"\tcase \"완료\" : \"green\"",
				"\tcase \"진행중\": \"blue\"",
				"\tcase \"대기\" : \"red\"",
				"\tdefault : \"black\"",
				"}"
			].join("\n"));
			container.addChild(output_2, {
				"colIndex": 0,
				"rowIndex": 1,
				"horizontalAlign": "center",
				"verticalAlign": "bottom",
				"height": 20
			});
		}
	});
	internalApp.title = "process";
	
	// Type declaration for process
	cpr.utils.Util.ensurePackage("udc.saveme").process = function(id){
		cpr.controls.UDCBase.call(this, "udc.saveme.process", internalApp, id);
	};
	
	udc.saveme.process.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.saveme.process.prototype, "type", {
		get : function(){
			return "udc.saveme.process";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.saveme.process.prototype, "textNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("textNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("textNm", newValue, true);
		}
	});
	Object.defineProperty(udc.saveme.process.prototype, "progress", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("progress");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("progress", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.saveme.process
/// start - udc.SideMenu
/*
 * UDC Qualified Name: udc.SideMenu
 * App URI: udc/SideMenu
 * Source Location: udc/SideMenu.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/SideMenu", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * SideMenu.js
			 * Created at 2018. 12. 14. 오후 12:34:06.
			 *
			 * @author jeeeyul
			 ************************************************/
			
			var settings = {
				menuItemHeight: 20
			}
			
			/** @type HTMLDivElement */
			var rootNode;
			
			/** @type String */
			var selectedAppId;
			
			var rendered = false;
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onMenuShellLoad( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var menuShell = e.control;
			
				rootNode = e.content;
				if(!rootNode){
					return;
				}
			
				var ds = app.lookup("menuData");
				var rootGroupRows = ds.findAllRow("parent == null || parent == ''");
			
				rootGroupRows.forEach(function( /* cpr.data.Row */ each) {
					var group = createRootGroup(each);
					rootNode.appendChild(group);
				});
				
				// 첫번째 그룹을 자동 펼침
				var firstGroup = rootNode.querySelector(".menu-group .content-pane .menu-group");
				if(firstGroup){
					removeClass(firstGroup, "collapsed");
				}
				
				rendered = true;
			}
			
			/**
			 * @param {cpr.data.Row }row
			 */
			function hasChildren(row) {
				var dataSet = app.lookup("menuData");
				var filter = _.template("parent == '<%=data%>'")({
					data: row.getValue("id")
				});
				return dataSet.findFirstRow(filter) != null;
			}
			
			/**
			 * @param {cpr.data.Row }row
			 */
			function getChildren(row) {
				var dataSet = app.lookup("menuData");
				var filter = _.template("parent == '<%=data%>'")({
					data: row.getValue("id")
				});
				return dataSet.findAllRow(filter);
			}
			
			/**
			 * 
			 * @param {cpr.data.Row} data
			 */
			function createRootGroup(data) {
				var group = document.createElement("div");
				group.className = "menu-group";
			
				group.appendChild(createMenuItemNode(data));
			
				var contentPane = document.createElement("div");
				contentPane.className = "content-pane";
				group.appendChild(contentPane);
			
				var children = getChildren(data);
				children.forEach(function( /* cpr.data.Row */ each) {
					var subGroups = createSubGroup(each);
					contentPane.appendChild(subGroups);
				});
			
				return group;
			}
			
			/**
			 * 
			 * @param {cpr.data.Row} row
			 */
			function createMenuItemNode(row) {
				var menuItem = document.createElement("div");
				menuItem.className = "menu-item";
				var depth = getDepth(row);
			
				if (depth >= 2) {
					menuItem.style.paddingLeft = (depth * 20) + "px";
				}
			
				var icon = document.createElement("div");
				icon.className = "icon";
				/** @type String */
				var iconURL = row.getValue("icon");
				if (iconURL && iconURL.trim().length > 0) {
					icon.style.backgroundImage = "url(" + iconURL + ")";
				}
			
				menuItem.appendChild(icon);
			
				var title = document.createElement("div");
				title.className = "title";
				title.textContent = row.getValue("title");
				menuItem.appendChild(title);
			
				/** @type String */
				var parent = row.getValue("parent");
				var hasParent = parent && parent.trim().length > 0;
				if (hasParent && hasChildren(row)) {
					var expandArea = document.createElement("div");
					expandArea.className = "expand-area";
					menuItem.appendChild(expandArea);
			
					var expandButton = document.createElement("div");
					expandButton.className = "expand-button";
					expandArea.appendChild(expandButton);
				}
			
				/** @type String */
				var appId = row.getValue("app");
				if (appId && appId.trim().length > 0) {
					menuItem.setAttribute("data-app", appId);
					menuItem.addEventListener("click", function() {
						select(appId);
					});
				}
			
				return menuItem;
			}
			
			/**
			 * @param {HTMLElement} dom
			 * @param {String} className
			 */
			function addClass(dom, className) {
				var names = dom.className.split(/\s+/g);
				var index = names.indexOf(className);
				if (index === -1) {
					names.push(className);
					dom.className = names.join(" ");
				}
			}
			
			/**
			 * @param {HTMLElement} dom
			 * @param {String} className
			 */
			function removeClass(dom, className) {
				var names = dom.className.split(/\s+/g);
				var index = names.indexOf(className);
				if (index !== -1) {
					names.splice(index, 1);
					dom.className = names.join(" ");
				}
			}
			
			/**
			 * 
			 * @param {HTMLDivElement} group
			 */
			function toggleGroup(group) {
				/** @type HTMLDivElement */
				var contentPane = group.querySelector(".content-pane");
			
				var classNames = group.className.split(/\s+/g);
			
				var collapseIndex = classNames.indexOf("collapsed");
				if (collapseIndex === -1) {
					closeGroup(group);
			
				} else {
					openGroup(group);
				}
			}
			
			/**
			 * 
			 * @param {HTMLDivElement} group
			 */
			function closeGroup(group) {
				var classNames = group.className.split(/\s+/g);
				var collapseIndex = classNames.indexOf("collapsed");
				if (collapseIndex === -1) {
					classNames.push("collapsed");
					group.className = classNames.join(" ");
				}
				
				app.getContainer().redraw();
			}
			
			/**
			 * 
			 * @param {HTMLDivElement} group
			 */
			function openGroup(group) {
				/** @type HTMLDivElement */
				var parentContentPane = group.parentNode;
				var nodeList = parentContentPane.querySelectorAll(".menu-group");
				for (var idx = 0; idx < nodeList.length; idx++) {
					/** @type HTMLDivElement */
					var each = nodeList.item(idx);
					if (each != group) {
						closeGroup(each);
					}
				}
			
				var classNames = group.className.split(/\s+/g);
				var collapseIndex = classNames.indexOf("collapsed");
				if (collapseIndex !== -1) {
					classNames.splice(collapseIndex, 1);
					group.className = classNames.join(" ");
				}
				
				app.getContainer().redraw();
			}
			
			/**
			 * 
			 * @param {cpr.data.Row} data
			 */
			function createSubGroup(data) {
				/**
				 * 
				 * @param {cpr.data.Row} data
				 */
			
				var group = document.createElement("div");
				group.className = "menu-group collapsed";
				var menuItem = createMenuItemNode(data);
				menuItem.addEventListener("click", function() {
					toggleGroup(group);
				});
				group.appendChild(menuItem);
			
				var contentPane = document.createElement("div");
				contentPane.className = "content-pane";
				group.appendChild(contentPane);
			
				getChildren(data).forEach(function( /* cpr.data.Row */ each) {
					if (hasChildren(each)) {
						contentPane.appendChild(createSubGroup(each));
					} else {
						contentPane.appendChild(createLeafItem(each));
					}
				});
			
				return group;
			}
			
			/**
			 * 
			 * @param {cpr.data.Row} row
			 */
			function createLeafItem(row) {
				var group = document.createElement("div");
				group.className = "leaf";
				group.appendChild(createMenuItemNode(row));
				return group;
			}
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onMenuShellInit( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var menuShell = e.control;
				if (rendered) {
					e.preventDefault();
				}
			}
			
			/*
			 * Body에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBodyClick( /* cpr.events.CMouseEvent */ e) {
				var event = new cpr.events.CUIEvent("click");
				app.dispatchEvent(event);
			}
			
			/*
			 * @param {String} appId
			 */
			function select(appId) {
				if (selectedAppId == appId) {
					return;
				}
				selectedAppId = appId;
				var nodeList = rootNode.querySelectorAll(".menu-item");
				for (var idx = 0; idx < nodeList.length; idx++) {
					/** @type HTMLElement */
					var each = nodeList.item(idx);
			
					if (each.getAttribute("data-app") == appId) {
						addClass(each, "selected");
					} else {
						removeClass(each, "selected");
					}
				}
			
				var event = new cpr.events.CUIEvent("app-select");
				event.userData = appId;
				app.dispatchEvent(event);
			}
			
			/**
			 * 
			 * @param {cpr.data.Row} row
			 */
			function hasParent(row) {
				/** @type String */
				var parent = row.getValue("parent");
			
				if (parent && parent.trim().length > 0) {
					return findRow(parent) != null;
				} else {
					return false;
				}
			}
			
			/**
			 * 
			 * @param {cpr.data.Row} row
			 */
			function getParent(row) {
				/** @type String */
				var parent = row.getValue("parent");
			
				if (parent && parent.trim().length > 0) {
					return findRow(parent)
				} else {
					return null;
				}
			}
			
			/**
			 * 
			 * @param {cpr.data.Row} row
			 */
			function getDepth(row) {
				var finger = row;
				var result = 0;
				while (hasParent(finger)) {
					finger = getParent(finger);
					result++;
				}
				return result;
			}
			
			/**
			 * 
			 * @param {String} id
			 */
			function findRow(id) {
				return app.lookup("menuData").findFirstRow("id == '" + id + "'");
			}
			
			/**
			 * 현재 미니 모드로 작동하고 있는지 여부를 표시합니다.
			 */
			exports.isMiniMode = function() {
				return app.lookup("menuShell").style.hasClass("mini");
			};
			
			/**
			 * 미니 모드에 진입합니다.
			 */
			exports.enterMiniMode = function() {
				app.lookup("menuShell").style.addClass("mini");
				console.log("enter");
			};
			
			/**
			 * 미니 모드를 중단합니다.
			 */
			exports.exitMiniMode = function() {
				app.lookup("menuShell").style.removeClass("mini");
				console.log("exit");
			};
			
			/*
			 * Body에서 mouseenter 이벤트 발생 시 호출.
			 * 마우스 포인터가 컨트롤 위에 진입할 때 발생하는 이벤트.
			 */
			function onBodyMouseenter(/* cpr.events.CMouseEvent */ e){
				var enterEvent  = new cpr.events.CUIEvent("enter");
				app.dispatchEvent(enterEvent);
			}
			
			
			/*
			 * Body에서 mouseleave 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 및 컨트롤의 자식 영역 바깥으로 마우스 포인터를 이동할 때 발생하는 이벤트.
			 */
			function onBodyMouseleave(/* cpr.events.CMouseEvent */ e){
				var leaveEvent  = new cpr.events.CUIEvent("leave");
				app.dispatchEvent(leaveEvent);
			}
			
			exports.select = select;
			
			exports.getMenuData = function(){
				return app.lookup("menuData");
			}
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("menuData");
			dataSet_1.parseData({
				"columns": [
					{"name": "id"},
					{"name": "title"},
					{"name": "icon"},
					{"name": "app"},
					{"name": "parent"}
				],
				"rows": [
					{"id": "examples", "title": "예제"},
					{"id": "show-case", "title": "쇼 케이스", "parent": "examples", "icon": "images/flower.png"},
					{"id": "dash-board", "title": "대시보드", "parent": "show-case", "app": "dashboard/Dashboard"},
					{"id": "floating-section", "title": "플로팅 섹션 헤더", "parent": "show-case", "app": "floating-section-header/Scroll"},
					{"id": "scroll", "title": "스크롤", "parent": "show-case"},
					{"id": "scroll-content-fetch", "title": "컨텐츠 페치", "parent": "scroll", "app": "scrolls/bottom-fetch"},
					{"id": "scroll-reveal", "title": "리빌 애니메이션", "parent": "scroll", "app": "scrolls/Reveal"},
					{"id": "field-ani", "title": "필드 애니메이션", "app": "animations/field-animation", "parent": "show-case"},
					{"id": "form-valid", "title": "폼 벨리데이션", "app": "animations/form-animation", "parent": "show-case"},
					{"id": "animations", "title": "애니메이션", "icon": "images/star.png", "parent": "examples"},
					{"id": "content1", "title": "컨텐트 애니메이션1", "parent": "animations", "app": "animations/content-animation-1"},
					{"id": "content2", "title": "컨텐트 애니메이션 2", "parent": "animations", "app": "animations/content-animation-2"},
					{"id": "auto-animate", "title": "자동 애니메이션", "app": "animations/auto-animate", "parent": "animations"},
					{"id": "css-ani", "title": "CSS  애니메이션", "parent": "animations", "app": "animations/CSS-Animation"},
					{"id": "number-ani", "title": "숫자 애니메이션", "app": "animations/NumberAnimation", "parent": "animations"},
					{"id": "others", "title": "기타 예제", "parent": "examples", "icon": "images/map.png"},
					{"id": "flow-layout", "title": "플로우 레이아웃", "parent": "others", "app": "layouts/FlowLayout"},
					{"id": "fr-margin", "title": "FR 마진", "parent": "others", "app": "layouts/FormLayoutFRMargin"},
					{"id": "drill-down", "title": "드릴 다운", "parent": "others", "app": "drill-down/drill-down-1"},
					{"id": "swipe-transition", "title": "스와이프 트랜지션", "app": "transition/SwipeTransition", "parent": "others"},
					{"id": "new", "title": "신규"},
					{"id": "new-items", "title": "예제", "icon": "images/star.png", "parent": "new"},
					{"id": "auto-size-tab", "title": "자동 크기 탭 폴더", "parent": "new-items", "app": "layouts/AutoSizingTab"},
					{"id": "slide", "title": "슬라이드", "app": "layouts/Slidify", "parent": "new-items"},
					{"id": "form-float", "title": "폼 플로팅", "parent": "new-items", "app": "floating-section-header/FormFloat"},
					{"id": "scroll-appear-effect", "title": "스크롤 등장 효과", "app": "scrolls/NewVisibleHighlight", "parent": "new-items"},
					{"id": "new-examples", "title": "신규 예제", "parent": "new"},
					{"id": "custom-combo", "title": "커스텀 콤보", "app": "customcombo/custom-combo", "parent": "new-examples"},
					{"id": "hint-slider", "title": "힌트 슬라이더", "app": "hintslider/hintslider", "parent": "new-examples"},
					{"id": "dynamic-form", "title": "다이나믹 플로우 폼", "app": "layouts/DynamicFlowFormExample", "parent": "new-examples"},
					{"id": "grid-header-snippet", "title": "그리드 + 스니펫", "app": "grids/GroupHTML", "parent": "new-examples"},
					{"id": "bixby", "title": "Bixby Like", "app": "animations/Bixby-Like", "parent": "new-examples"},
					{"id": "menu-item", "title": "메뉴 아이템", "icon": "", "app": "menuitem/menuitem", "parent": "new-examples"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1440px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1439px)", "tablet");
			app.supportMedia("all and (max-width: 799px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["side-menu-wrapper"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("menuShell");
			uIControlShell_1.style.setClasses(["side-menu", "cl-unselectable", "cl-scrollbar"]);
			if(typeof onMenuShellLoad == "function") {
				uIControlShell_1.addEventListener("load", onMenuShellLoad);
			}
			if(typeof onMenuShellInit == "function") {
				uIControlShell_1.addEventListener("init", onMenuShellInit);
			}
			container.addChild(uIControlShell_1, {
				"autoSize": "height",
				"width": "300px",
				"height": "300px"
			});
			if(typeof onBodyClick == "function"){
				app.getContainer().addEventListener("click", onBodyClick);
			}
			if(typeof onBodyMouseenter == "function"){
				app.getContainer().addEventListener("mouseenter", onBodyMouseenter);
			}
			if(typeof onBodyMouseleave == "function"){
				app.getContainer().addEventListener("mouseleave", onBodyMouseleave);
			}
		}
	});
	internalApp.title = "메인 사이드 메뉴";
	
	// Type declaration for SideMenu
	cpr.utils.Util.ensurePackage("udc").SideMenu = function(id){
		cpr.controls.UDCBase.call(this, "udc.SideMenu", internalApp, id);
	};
	
	udc.SideMenu.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.SideMenu.prototype, "type", {
		get : function(){
			return "udc.SideMenu";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.SideMenu
/// start - udc.storage.Arrow
/*
 * UDC Qualified Name: udc.storage.Arrow
 * App URI: udc/storage/Arrow
 * Source Location: udc/storage/Arrow.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/storage/Arrow", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Arrow.js
			 * Created at 2019. 4. 4. 오전 11:38:15.
			 *
			 * @author daye
			 ************************************************/
			
			exports.getLine1Rect = getLine1Rect;
			exports.getLine2Rect = getLine2Rect;
			exports.setArrowMargin = setArrowStyleArrow;
			
			/**
			 * @return line1 컨트롤 위치
			 */
			function getLine1Rect() {
				var voActualRect = app.lookup("line1").getActualRect();
				return voActualRect	
			}
			
			
			/**
			 *  @return line2 컨트롤 위치
			 */
			function getLine2Rect() {
				var voActualRect = app.lookup("line2").getActualRect();
				return voActualRect	
			}
			
			
			/**
			 * Arrow margin setting
			 * @param {any} vsArrowPosition
			 * @param {any} vsMarginPosition
			 * @param {any} margin
			 */
			function setArrowStyleArrow(vsArrowPosition, vsMarginPosition, margin) {
				vsMarginPosition = "margin-"+vsMarginPosition;
				app.lookup("arr_" + vsArrowPosition).style.css(vsMarginPosition,  margin + "px");
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				var container = app.getContainer();
				var line1 = app.lookup("line1");
				var line2 = app.lookup("line2");
			
				if(e.property == "shape"){
					var shape = app.getAppProperty("shape");
			
					// 1. 기존 적용된 클래스 삭제
					if(container.style.hasClass("horizontal-up")){
						container.style.removeClass("horizontal-up");
					}else if(container.style.hasClass("horizontal-bottom")){
						container.style.removeClass("horizontal-bottom");
					}else{
						container.style.removeClass("vertical");
					}
					
					// 2. type에 해당하는 클래스 추가
					container.style.addClass(shape);
			
					switch(shape){
						case "horizontal-bottom" : {
							// 화살표 visible 설정
							app.lookup("arr_top").visible = false;
							app.lookup("arr_bottom").visible = false;
							app.lookup("arr_left").visible = true;
							app.lookup("arr_right").visible = true;
							
							// 폼레이아웃 설정
							container.updateConstraint(line1, {
								rowIndex : 1, 
								colIndex : 1, 
								colSpan : 1,
								rowSpan : 2
							});
							container.updateConstraint(line2, {
								rowIndex : 1, 
								colIndex : 2, 
								colSpan : 1,
								rowSpan : 2
							});
							break;
						}
						case "horizontal-up" : {
							// 화살표 visible 설정
							app.lookup("arr_top").visible = false;
							app.lookup("arr_bottom").visible = false;
							app.lookup("arr_left").visible = true;
							app.lookup("arr_right").visible = true;
							
							// 폼레이아웃 설정
							container.updateConstraint(line1, {
								rowIndex : 1, 
								colIndex : 1, 
								colSpan : 1,
								rowSpan : 2
							});
							container.updateConstraint(line2, {
								rowIndex : 1, 
								colIndex : 2, 
								colSpan : 1,
								rowSpan : 2
							});
							break;
						}
						
						case "vertical" : {
							// 화살표 visible 설정
							app.lookup("arr_top").visible = true;
							app.lookup("arr_bottom").visible = true;
							app.lookup("arr_left").visible = false;
							app.lookup("arr_right").visible = false;
							
							// 폼레이아웃 설정
							container.updateConstraint(line1, {
								rowIndex : 1, 
								colIndex : 1, 
								colSpan : 2,
								rowSpan : 1
							});
							container.updateConstraint(line2, {
								rowIndex : 2, 
								colIndex : 1, 
								colSpan : 2,
								rowSpan : 1
							});
							break;
						}
					}
				}
			}
			
			
			/*
			 * Body에서 contextmenu 이벤트 발생 시 호출.
			 * 마우스의 오른쪽 버튼이 클릭되거나 컨텍스트 메뉴 키가 눌려지면 호출되는 이벤트.
			 */
			function onBodyContextmenu(/* cpr.events.CMouseEvent */ e){
				var dsMenu = app.lookup("dsMenu");
				
				// 시스템 기본동작 방지
				e.preventDefault();
				
				/** @type cpr.controls.Menu */
				var menu = new cpr.controls.Menu();
				menu.setItemSet(dsMenu, {
					label: "label",
					value: "value",
					icon: "icon",
					parentValue: "parent"
				});
				
				app.getRootAppInstance().floatControl(menu, {
					position: "absolute",
					top: e.clientY + "px",
					left: e.clientX + "px",
					width: "150px"
				});
				menu.focus();
				
				// 메뉴 삭제
				menu.addEventListener("blur", function(e){
					app.getRootAppInstance().removeFloatingControl(menu);
				});
				
				// 메뉴 선택
				menu.addEventListener("selection-change", function(e){
					switch(menu.value){
						case "del" : {
							app.getRootAppInstance().removeAllFloatingControls();
			
							var event = new cpr.events.CUIEvent("deleteLine");
							app.dispatchEvent(event);
							
							break;
						}
					}
				});
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("shape", null);
			var dataSet_1 = new cpr.data.DataSet("dsMenu");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "icon"},
					{"name": "parent"}
				],
				"rows": [{"label": "연결 삭제", "value": "del"}]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["10px", "1fr", "1fr", "10px"]);
			formLayout_1.setRows(["10px", "1fr", "1fr", "10px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("line1");
			group_1.style.setClasses(["line1"]);
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_1);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 1,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_2 = new cpr.controls.Container("line2");
			group_2.style.setClasses(["line2"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_2);
			(function(container){
			})(group_2);
			container.addChild(group_2, {
				"colIndex": 2,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_3 = new cpr.controls.Container("arr_right");
			group_3.style.setClasses(["arrow-right"]);
			// Layout
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_3);
			(function(container){
			})(group_3);
			container.addChild(group_3, {
				"colIndex": 3,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_4 = new cpr.controls.Container("arr_left");
			group_4.style.setClasses(["arrow-left"]);
			// Layout
			var xYLayout_4 = new cpr.controls.layouts.XYLayout();
			group_4.setLayout(xYLayout_4);
			(function(container){
			})(group_4);
			container.addChild(group_4, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_5 = new cpr.controls.Container("arr_top");
			group_5.style.setClasses(["arrow-top"]);
			// Layout
			var xYLayout_5 = new cpr.controls.layouts.XYLayout();
			group_5.setLayout(xYLayout_5);
			(function(container){
			})(group_5);
			container.addChild(group_5, {
				"colIndex": 1,
				"rowIndex": 0,
				"colSpan": 2,
				"rowSpan": 1
			});
			
			var group_6 = new cpr.controls.Container("arr_bottom");
			group_6.style.setClasses(["arrow-down"]);
			// Layout
			var xYLayout_6 = new cpr.controls.layouts.XYLayout();
			group_6.setLayout(xYLayout_6);
			(function(container){
			})(group_6);
			container.addChild(group_6, {
				"colIndex": 1,
				"rowIndex": 3,
				"colSpan": 2,
				"rowSpan": 1
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyContextmenu == "function"){
				app.getContainer().addEventListener("contextmenu", onBodyContextmenu);
			}
		}
	});
	internalApp.title = "Arrow";
	
	// Type declaration for Arrow
	cpr.utils.Util.ensurePackage("udc.storage").Arrow = function(id){
		cpr.controls.UDCBase.call(this, "udc.storage.Arrow", internalApp, id);
	};
	
	udc.storage.Arrow.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.storage.Arrow.prototype, "type", {
		get : function(){
			return "udc.storage.Arrow";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.storage.Arrow.prototype, "shape", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("shape");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("shape", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.storage.Arrow
/// start - udc.storage.flow
/*
 * UDC Qualified Name: udc.storage.flow
 * App URI: udc/storage/flow
 * Source Location: udc/storage/flow.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/storage/flow", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * flow.js
			 * Created at 2020. 12. 8. 오전 10:03:22.
			 *
			 * @author HANS
			 ************************************************/
			
			var voDsColNms = {
				textCol : "processNm",
				valueCol : "value",
				sortCol : "sortNum",
				parent :"parentValues",
				progress : "progress"
			}
			
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/**
			 * 플로우차트에서 업무별로 직선 화살표 객체를 생성하여 이어주는 함수입니다.
			 */
			function drawArrow(){
				
				var vaProcessCont = app.getContainer().getChildren();
				
				
				for(var i =0 ; i < vaProcessCont.length-1 ; i++){
					
					/** @type cpr.controls.Container */
					var prev = vaProcessCont[i];
					/** @type cpr.controls.Container */
					var next = vaProcessCont[i+1];
					prev.getAllRecursiveChildren().forEach(function(each){
						
						next.getAllRecursiveChildren().forEach(function(eachs){
							
							var nextChild = eachs.getActualRect().centerLeft;
							var prevChild = each.getActualRect().centerRight;
							var vnLeft = prevChild.x;
							var vnTop = prevChild.y - 10;
							var voDifference = nextChild.getDifference(prevChild);
							var vnHeight = voDifference.height;
							if (voDifference.width > 0) {
								
								var arrow = new udc.saveme.hitman();
								if (vnHeight == 0) {
									vnHeight = 22;
								} else if (vnHeight < 0) {
									vnTop += vnHeight;
									vnHeight -= 20;
								} else {
									vnHeight += 20;
								}
								arrow.arrowBuild(vnHeight);
								
								app.getRootAppInstance().getContainer().floatControl(arrow, {
									"left": vnLeft + "px",
									"top": vnTop + "px",
									"width": voDifference.width + 5 + "px",
									"height": Math.abs(vnHeight) + "px"
								});
							}
							
							
						});
					});
				}
			}	
			
			/**
			 * 플로우차트에서 업무별로 대각선 화살표 객체를 생성하여 이어주는 함수입니다.
			 */
			function drawSvg(){
				
				var vaProcessCont = app.getContainer().getChildren();
				
				for(var i =0 ; i < vaProcessCont.length-1 ; i++){
					
					/** @type cpr.controls.Container */
					var prev = vaProcessCont[i];
					/** @type cpr.controls.Container */
					var next = vaProcessCont[i+1];
					prev.getAllRecursiveChildren().forEach(function(each){
						
						next.getAllRecursiveChildren().forEach(function(eachs){
							
							var nextChild = eachs.getActualRect().centerLeft;
							var prevChild = each.getActualRect().centerRight;
							var left = prevChild.x;
							var top = prevChild.y;
							var differ = nextChild.getDifference(prevChild);
							var heights = differ.height;
							var arrow = new cpr.controls.HTMLSnippet();
							if(heights == 0) {
								var vnSvgWidth = differ.width-5;
								arrow.value = '<svg width="100%" height="100%">' +
									'<defs>' +
									'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
									'markerWidth="3" markerHeight="6"' +
									'orient="auto-start-reverse">' +
									'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
									'</defs>' +
									'<line x1="0" y1="5" x2="'+vnSvgWidth+'" y2="5" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
									'</svg>';
									
									heights = 15;
							}
							else if (heights > 0) {
								heights += 10;
								var vnSvgEndX  = differ.width-5;
								var vnSvgEndY = heights-5;
								arrow.value = '<svg width="100%" height="100%">' +
									"<defs>" +
									'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
									'markerWidth="3" markerHeight="6"' +
									'orient="auto-start-reverse">' +
									'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
									'</defs>' +
									'<line x1="0" y1="5" x2="'+vnSvgEndX+'" y2="'+vnSvgEndY+'" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
									'</svg>';
									
							} else {
								
								var vnSvgStartY = Math.abs(heights);
								heights +=5;
								var vnSvgEndX = differ.width-5;
								arrow.value = '<svg width="100%" height="100%">' +
									"<defs>" +
									'<marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"' +
									'markerWidth="3" markerHeight="6"' +
									'orient="auto-start-reverse">' +
									'<path d="M 0 0 L 10 5 L 0 10 z" fill="#000000"/>' +
									'</defs>' +
									'<line x1="0" y1="'+vnSvgStartY+'" x2="'+vnSvgEndX+'" y2="5" fill="none" stroke="#000000" stroke-width="2" marker-end="url(#arrow)" />' +
									'</svg>';
								top += heights;
							}
							
							app.getRootAppInstance().getContainer().floatControl(arrow,{
								"left" : left+"px",
								"top" : top-5+"px",
								"width":differ.width+"px",
								"height":Math.abs(heights)+10+"px"
							});
							
						});
					});
				}
			}
			
			/**
			 * 플로우차트에서 업무 객체를 생성하여 배치하는 함수입니다.
			 */
			function drawProcess() {
				/** @type cpr.data.DataSet */
				var vcDSet = app.getAppProperty("dsChart");
				var vcDs = app.lookup("ds1");
				
				if (vcDSet) {
					var voOriginColNm = vcDSet.getColumnNames();
					var voCopyColNm = vcDs.getColumnNames();
					
					try {
						if (voOriginColNm.toString() == voCopyColNm.toString()) {
							
							var voRowDatas = vcDSet.getRowDataRanged();
							vcDs.build(voRowDatas);
						} else {
							
							throw new Error("차트를 그리기 위해서 보낸 데이터셋과, udc내에서 사용하는 컬럼명이 일치하지 않아 플로우 차트를 그려지지 않읗 수 있습니다. flow udc내의 데이터셋과" +
								"상단의 전역변수인 voDsColNms에 담긴 컬럼명을 차트를 그리기 위해 보낸 데이터셋의 컬렴명과 일치시키십시오.");
						}
					} catch (err) {
						console.log(err);
					}
					
				}
				var vcDs = app.lookup("ds1");
				
				vcDs.setSort(voDsColNms.valueCol+" asc,"+voDsColNms.sortCol+" asc");
				
				var vnRowCnt = vcDs.getRowCount();
				var vaUnfilteredCol = vcDs.getUnfilteredDistinctValues(voDsColNms.valueCol);
				
				
				vaUnfilteredCol.forEach(function(each) {
					
					var allRow = vcDs.findAllRow(voDsColNms.valueCol+" =='" + each + "'");
					if (allRow.length > 0) {
						
						var vertical = new cpr.controls.Container();
						var vLayout = new cpr.controls.layouts.VerticalLayout();
						vLayout.spacing = 20;
						vertical.setLayout(vLayout);
						
						allRow.forEach(function(eachRow) {
			//				var buttons = new cpr.controls.Button();
							
			//				buttons.value = eachRow.getValue(voDsColNms.textCol);
							var buttons = new udc.saveme.process();
							buttons.textNm = eachRow.getValue(voDsColNms.textCol);
							buttons.progress = eachRow.getValue(voDsColNms.progress);
							vertical.addChild(buttons, {
								"width": "100px",
								"height": "60px",
								"autoSize": "none"
							});
						});
						
						app.getContainer().addChild(vertical, {
							width: "150px",
							height: "280px",
							autoSize: "none"
						});
					}
					
				});
				cpr.core.DeferredUpdateManager.INSTANCE.update();
				
				if(app.getAppProperty("arrowType")=="straight") {
					
					drawArrow();
				} else if(app.getAppProperty("arrowType")=="diagonal"){
					
					drawSvg();
				}
				
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				drawProcess();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dsChart", null);
			app.declareAppProperty("arrowType", "straight");
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"alterColumnLayout": "server",
				"columns": [
					{"name": "processNm"},
					{
						"name": "value",
						"dataType": "number"
					},
					{
						"name": "sortNum",
						"dataType": "number"
					},
					{"name": "parentValue"},
					{"name": "progress"}
				],
				"rows": [
					{"processNm": "연간사업추진일정", "value": "1", "parentValue": "0", "sortNum": "0"},
					{"processNm": "정보보호대책서", "value": "2", "parentValue": "0", "sortNum": "0"},
					{"processNm": "사업예산산정", "value": "2", "parentValue": "0", "sortNum": "1"},
					{"processNm": "체계규격심의", "value": "2", "parentValue": "0", "sortNum": "2"},
					{"processNm": "사업계획수립", "value": "3", "parentValue": "0", "sortNum": "0"},
					{"processNm": "제안요청서검토", "value": "4", "parentValue": "0", "sortNum": "0"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
			flowLayout_1.horizontalSpacing = 30;
			flowLayout_1.verticalSpacing = 30;
			container.setLayout(flowLayout_1);
			
			// UI Configuration
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyMeasureSize == "function"){
				app.getContainer().addEventListener("measure-size", onBodyMeasureSize);
			}
		}
	});
	internalApp.title = "flow";
	
	// Type declaration for flow
	cpr.utils.Util.ensurePackage("udc.storage").flow = function(id){
		cpr.controls.UDCBase.call(this, "udc.storage.flow", internalApp, id);
	};
	
	udc.storage.flow.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.storage.flow.prototype, "type", {
		get : function(){
			return "udc.storage.flow";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.storage.flow.prototype, "dsChart", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dsChart");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dsChart", newValue, true);
		}
	});
	Object.defineProperty(udc.storage.flow.prototype, "arrowType", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("arrowType");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("arrowType", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.storage.flow
/// start - udc.storage.hitman
/*
 * UDC Qualified Name: udc.storage.hitman
 * App URI: udc/storage/hitman
 * Source Location: udc/storage/hitman.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/storage/hitman", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * hitman.js
			 * Created at 2020. 12. 14. 오전 9:26:39.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * 
			 * @param {Number} height
			 */
			exports.arrowBuild = function(height) {
				
				var vnHeight = height;
				
				var vcArrow = app.lookup("arrow");
				var vcCont1 = app.lookup("grp1");
				var vcCont2 = app.lookup("grp2");
				if (vnHeight > 0) {
					vcCont1.style.setClasses("");
					vcCont2.style.setClasses("");
					vcCont1.style.addClass("top-border");
					vcCont2.style.addClass("bottom-border");
					app.lookup("arrow").style.css("top", vnHeight - 25 + "px");
				} 
				else {
					vcCont1.style.setClasses("");
					vcCont2.style.setClasses("");
					vcCont1.style.addClass("bottom-border");
					vcCont2.style.addClass("top-border");
					app.lookup("arrow").style.css("top", vnHeight - 25 + "px");
				}
				
			}
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("arrowRect", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "1fr", "10px"]);
			formLayout_1.setRows(["10px", "1fr", "1fr", "10px"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp1");
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_1);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"colIndex": 0,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var group_2 = new cpr.controls.Container("grp2");
			group_2.style.css({
				"border-left-style" : "solid",
				"border-left-color" : "black",
				"border-left-width" : "2px"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_2);
			(function(container){
			})(group_2);
			container.addChild(group_2, {
				"colIndex": 1,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var output_1 = new cpr.controls.Output("arrow");
			output_1.value = "";
			output_1.style.setClasses(["arrow-right"]);
			container.addChild(output_1, {
				"colIndex": 2,
				"rowIndex": 1,
				"colSpan": 1,
				"rowSpan": 2
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "\t<style type='text/css'>\r\n\t.cl-container.top-border{\r\n\t\tborder-top : solid 2px black;\r\n\t}\r\n\t.cl-container.bottom-border{\r\n\t\tborder-bottom : solid 2px black;\r\n\t}\r\n\t\t<\/style>";
			container.addChild(hTMLSnippet_1, {
				"colIndex": 0,
				"rowIndex": 0,
				"colSpan": 2,
				"rowSpan": 1
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "hitman";
	
	// Type declaration for hitman
	cpr.utils.Util.ensurePackage("udc.storage").hitman = function(id){
		cpr.controls.UDCBase.call(this, "udc.storage.hitman", internalApp, id);
	};
	
	udc.storage.hitman.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.storage.hitman.prototype, "type", {
		get : function(){
			return "udc.storage.hitman";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.storage.hitman.prototype, "arrowRect", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("arrowRect");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("arrowRect", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.storage.hitman
/// start - udc.storage.process
/*
 * UDC Qualified Name: udc.storage.process
 * App URI: udc/storage/process
 * Source Location: udc/storage/process.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/storage/process", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * process.js
			 * Created at 2020. 12. 17. 오후 3:20:48.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("textNm", null);
			app.declareAppProperty("progress", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-left-color" : "black",
				"border-bottom-width" : "1px",
				"border-right-color" : "black",
				"border-right-style" : "solid",
				"border-bottom-color" : "black",
				"top" : "0px",
				"border-top-style" : "solid",
				"border-radius" : "5px",
				"left" : "0px",
				"border-top-color" : "black",
				"border-left-width" : "1px",
				"border-left-style" : "solid",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["1fr", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "";
			output_1.style.css({
				"text-align" : "center"
			});
			output_1.bind("value").toAppProperty("textNm");
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "";
			output_2.style.css({
				"text-align" : "center"
			});
			output_2.bind("value").toAppProperty("progress");
			output_2.style.bind("color").toExpression([
				"switch(value){",
				"\tcase \"완료\" : \"green\"",
				"\tcase \"진행중\": \"blue\"",
				"\tcase \"대기\" : \"red\"",
				"\tdefault : \"black\"",
				"}"
			].join("\n"));
			container.addChild(output_2, {
				"colIndex": 0,
				"rowIndex": 1,
				"horizontalAlign": "center",
				"verticalAlign": "bottom",
				"height": 20
			});
		}
	});
	internalApp.title = "process";
	
	// Type declaration for process
	cpr.utils.Util.ensurePackage("udc.storage").process = function(id){
		cpr.controls.UDCBase.call(this, "udc.storage.process", internalApp, id);
	};
	
	udc.storage.process.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.storage.process.prototype, "type", {
		get : function(){
			return "udc.storage.process";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.storage.process.prototype, "textNm", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("textNm");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("textNm", newValue, true);
		}
	});
	Object.defineProperty(udc.storage.process.prototype, "progress", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("progress");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("progress", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.storage.process
/// start - udc.svg.PickingBot
/*
 * UDC Qualified Name: udc.svg.PickingBot
 * App URI: udc/svg/PickingBot
 * Source Location: udc/svg/PickingBot.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/svg/PickingBot", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Sample.js
			 * Created at 2021. 1. 22. 오전 10:34:42.
			 *
			 * @author jeeeyul
			 ************************************************/
			
			/** @type cpr.controls.HTMLObject */
			var image;
			
			/** @type Element */
			var directionAncor;
			
			/** @type Element */
			var mainArmAnchor;
			
			/** @type Element */
			var subAnchor;
			
			/** @type Element */
			var pickersAnchor;
			
			/** @type Element */
			var leftPicker;
			
			/** @type Element */
			var rightPicker;
			
			/** @type Element */
			var debugCircle;
			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit( /* cpr.events.CEvent */ e) {
				image = app.lookup("img");
				image.htmlAttr("id", image.uuid);
			}
			
			function update() {
				if (!mainArmAnchor) {
					return;
				}
				
				var angle = (app.getAppProperty("distance") / 100 * 80 + 10).toFixed(2);
				var pickAngle = (app.getAppProperty("picking") / 100 * 40 + 30).toFixed(2);
				
				directionAncor.setAttribute(
					"transform",
					cpr.utils.Util.template("rotate(${angle}, 100, 100)", {
						angle: app.getAppProperty("direction")
					})
				);
				
				mainArmAnchor.setAttribute(
					"transform",
					cpr.utils.Util.template("rotate(${angle}, 100, 100)", {
						angle: (90 - angle)
					})
				);
				
				subAnchor.setAttribute(
					"transform",
					cpr.utils.Util.template("rotate(${angle}, 100, 70)", {
						angle: (90 - angle) * -2
					})
				);
				
				pickersAnchor.setAttribute(
					"transform",
					cpr.utils.Util.template("rotate(${angle}, 100, 38)", {
						angle: 90 - angle
					})
				);
				
				leftPicker.setAttribute(
					"transform",
					cpr.utils.Util.template("rotate(-${angle}, 100, 38)", {
						angle: pickAngle
					})
				);
				
				rightPicker.setAttribute(
					"transform",
					cpr.utils.Util.template("rotate(${angle}, 100, 38)", {
						angle: pickAngle
					})
				);
			}
			
			/*
			 * HTML 오브젝트에서 load 이벤트 발생 시 호출.
			 * data속성의 값을 통해 가져오는 자료가 로드되었을때 발생되는 이벤트.
			 */
			function onImgLoad( /* cpr.events.CUIEvent */ e) {
				var node = document.querySelector(cpr.utils.Util.template("[data-usr-id=\"${id}\"]", {
					id: image.uuid
				}));
				var svgNode = node.querySelector("object").contentDocument.rootElement;
				
				directionAncor = svgNode.querySelector("#direction-anchor");
				mainArmAnchor = svgNode.querySelector("#main-arm-anchor");
				subAnchor = svgNode.querySelector("#sub-anchor");
				pickersAnchor = svgNode.querySelector("#pickers-anchor");
				leftPicker = svgNode.querySelector("#left-picker");
				rightPicker = svgNode.querySelector("#right-picker");
				debugCircle = svgNode.querySelector("#debug");
				console.log(debugCircle);
				update();
				
			}
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				update();
			}
			/**
			 * 
			 * @param {Number} distance
			 */
			exports.controlArm = function(distance) {
				var animator = new cpr.animation.Animator(1, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
				var base = app.getAppProperty("distance");
				var delta = distance - base;
				animator.addTask(function(time) {
					app.setAppProperty("distance", base + delta * time);
				});
				return animator.run();
			};
			
			exports.controlPicker = function(amount) {
				var animator = new cpr.animation.Animator(1, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
				var base = app.getAppProperty("picking");
				var delta = amount - base;
				animator.addTask(function(time) {
					app.setAppProperty("picking", base + delta * time);
					console.log(base + delta * time)
				});
				return animator.run();
			};
			
			exports.controlDirection = function(direction) {
				var animator = new cpr.animation.Animator(1, cpr.animation.TimingFunction.EASE_IN_OUT_CUBIC);
				var base = app.getAppProperty("direction");
				var delta = direction - base;
				animator.addTask(function(time) {
					app.setAppProperty("direction", base + delta * time);
					console.log(base + delta * time)
				});
				return animator.run();
			};
			
			exports.moveDebug = function(distance){
				
				debugCircle.setAttribute(
					"transform",
					cpr.utils.Util.template("translate(0px,0px)")
				);
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("distance", 100);
			app.declareAppProperty("picking", 100);
			app.declareAppProperty("direction", 0);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var hTMLObject_1 = new cpr.controls.HTMLObject("img");
			hTMLObject_1.data = "udc/svg/pickingBot.svg";
			hTMLObject_1.mediaType = "image/svg+xml";
			if(typeof onImgLoad == "function") {
				hTMLObject_1.addEventListener("load", onImgLoad);
			}
			container.addChild(hTMLObject_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "PickingBot";
	
	// Type declaration for PickingBot
	cpr.utils.Util.ensurePackage("udc.svg").PickingBot = function(id){
		cpr.controls.UDCBase.call(this, "udc.svg.PickingBot", internalApp, id);
	};
	
	udc.svg.PickingBot.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.svg.PickingBot.prototype, "type", {
		get : function(){
			return "udc.svg.PickingBot";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.svg.PickingBot.prototype, "distance", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("distance");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("distance", newValue, true);
		}
	});
	Object.defineProperty(udc.svg.PickingBot.prototype, "picking", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("picking");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("picking", newValue, true);
		}
	});
	Object.defineProperty(udc.svg.PickingBot.prototype, "direction", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("direction");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("direction", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.svg.PickingBot
/// start - udc.svg.PockingBotConsole
/*
 * UDC Qualified Name: udc.svg.PockingBotConsole
 * App URI: udc/svg/PockingBotConsole
 * Source Location: udc/svg/PockingBotConsole.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/svg/PockingBotConsole", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * PockingBotConsole.js
			 * Created at 2021. 1. 22. 오후 3:38:22.
			 *
			 * @author jeeeyul
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function() {
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				switch (e.property) {
					case "bot":
						/** @type udc.svg.PickingBot */
						var bot = e.newValue;
						app.lookup("armField").putValue(String(bot.distance));
						app.lookup("dirField").putValue(String(bot.direction));
						app.lookup("pickerField").putValue(String(bot.picking));
						break;
						
					default:
						break;
				}
			}
			
			/*
			 * 라디오 버튼에서 selection-change 이벤트 발생 시 호출.
			 * 라디오버튼 아이템을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onDirFieldSelectionChange(/* cpr.events.CSelectionEvent */ e){
				var bot = app.getAppProperty("bot");
				if(bot instanceof udc.svg.PickingBot){
					bot.controlDirection(parseInt(e.control.value));
				}
			}
			
			
			/*
			 * 라디오 버튼에서 selection-change 이벤트 발생 시 호출.
			 * 라디오버튼 아이템을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onArmFieldSelectionChange(/* cpr.events.CSelectionEvent */ e){
				var bot = app.getAppProperty("bot");
				if(bot instanceof udc.svg.PickingBot){
					bot.controlArm(parseInt(e.control.value))
				}
			}
			
			
			/*
			 * 라디오 버튼에서 selection-change 이벤트 발생 시 호출.
			 * 라디오버튼 아이템을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onPickerFieldSelectionChange(/* cpr.events.CSelectionEvent */ e){
				var bot = app.getAppProperty("bot");
				if(bot instanceof udc.svg.PickingBot){
					bot.controlPicker(parseInt(e.control.value))
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("bot", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-form-group"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["65px", "1fr"]);
			formLayout_1.setUseColumnShade(0, true);
			formLayout_1.setRows(["1fr", "1fr", "1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "방향";
			output_1.style.css({
				"text-align" : "right"
			});
			container.addChild(output_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var output_2 = new cpr.controls.Output();
			output_2.value = "팔";
			output_2.style.css({
				"text-align" : "right"
			});
			container.addChild(output_2, {
				"colIndex": 0,
				"rowIndex": 1
			});
			
			var output_3 = new cpr.controls.Output();
			output_3.value = "집게";
			output_3.style.css({
				"text-align" : "right"
			});
			container.addChild(output_3, {
				"colIndex": 0,
				"rowIndex": 2
			});
			
			var radioButton_1 = new cpr.controls.RadioButton("dirField");
			radioButton_1.value = "0";
			(function(radioButton_1){
				radioButton_1.addItem(new cpr.controls.Item("북", "0"));
				radioButton_1.addItem(new cpr.controls.Item("동", "90"));
				radioButton_1.addItem(new cpr.controls.Item("남", "180"));
				radioButton_1.addItem(new cpr.controls.Item("서", "270"));
			})(radioButton_1);
			if(typeof onDirFieldSelectionChange == "function") {
				radioButton_1.addEventListener("selection-change", onDirFieldSelectionChange);
			}
			container.addChild(radioButton_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var radioButton_2 = new cpr.controls.RadioButton("armField");
			radioButton_2.value = "0";
			(function(radioButton_2){
				radioButton_2.addItem(new cpr.controls.Item("접기", "0"));
				radioButton_2.addItem(new cpr.controls.Item("펼치기", "100"));
			})(radioButton_2);
			if(typeof onArmFieldSelectionChange == "function") {
				radioButton_2.addEventListener("selection-change", onArmFieldSelectionChange);
			}
			container.addChild(radioButton_2, {
				"colIndex": 1,
				"rowIndex": 1
			});
			
			var radioButton_3 = new cpr.controls.RadioButton("pickerField");
			radioButton_3.value = "0";
			(function(radioButton_3){
				radioButton_3.addItem(new cpr.controls.Item("잡기", "0"));
				radioButton_3.addItem(new cpr.controls.Item("놓기", "100"));
			})(radioButton_3);
			if(typeof onPickerFieldSelectionChange == "function") {
				radioButton_3.addEventListener("selection-change", onPickerFieldSelectionChange);
			}
			container.addChild(radioButton_3, {
				"colIndex": 1,
				"rowIndex": 2
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "PockingBotConsole";
	
	// Type declaration for PockingBotConsole
	cpr.utils.Util.ensurePackage("udc.svg").PockingBotConsole = function(id){
		cpr.controls.UDCBase.call(this, "udc.svg.PockingBotConsole", internalApp, id);
	};
	
	udc.svg.PockingBotConsole.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.svg.PockingBotConsole.prototype, "type", {
		get : function(){
			return "udc.svg.PockingBotConsole";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.svg.PockingBotConsole.prototype, "bot", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("bot");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("bot", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.svg.PockingBotConsole
/// start - udc.T11706_UDC
/*
 * UDC Qualified Name: udc.T11706_UDC
 * App URI: udc/T11706_UDC
 * Source Location: udc/T11706_UDC.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/T11706_UDC", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * NumberInput.js
			 * Created at 2020. 04. 21. 오후 2:52:14.
			 *
			 * @author tomato
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return app.getAppProperty("value");
			};
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onUIControlShellLoad(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var uIControlShell = e.control;
				var ele = e.content;
				var value = app.getAppProperty("value");
				var input = document.createElement("input");
				input.type ="tel";
				input.value = value?value:"";
				input.style.width ="100%";
				input.style.height = "100%";
			
				input.addEventListener("change", onchange);
			
				ele.appendChild(input);
			}
			
			function onchange(e){
				var oldValue = app.getAppProperty("value");
				var newValue = e.target.value;
				var event = new cpr.events.CValueChangeEvent("value-change", {oldValue:oldValue,newValue:newValue});
				app.setAppProperty("value", newValue);
				app.dispatchEvent(event);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell();
			if(typeof onUIControlShellLoad == "function") {
				uIControlShell_1.addEventListener("load", onUIControlShellLoad);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "T11706_UDC";
	
	// Type declaration for T11706_UDC
	cpr.utils.Util.ensurePackage("udc").T11706_UDC = function(id){
		cpr.controls.UDCBase.call(this, "udc.T11706_UDC", internalApp, id);
	};
	
	udc.T11706_UDC.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.T11706_UDC.prototype, "type", {
		get : function(){
			return "udc.T11706_UDC";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.T11706_UDC.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.T11706_UDC
/// start - udc.test
/*
 * UDC Qualified Name: udc.test
 * App URI: udc/test
 * Source Location: udc/test.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/test", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * test.js
			 * Created at 2019. 9. 26. 오후 1:31:30.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				console.log("UDC Init");
				console.log(app.getAppProperty("btn1Value"));
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				console.log("UDC Load");
			}
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e) {
				console.log("CHANGE");
				
				console.log(app.getAppProperty("btn1Value"));
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("btn1Value", null);
			app.declareAppProperty("btn2Value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["100px", "1fr", "35px"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			button_1.bind("value").toAppProperty("btn1Value");
			container.addChild(button_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var button_2 = new cpr.controls.Button("btn2");
			button_2.value = "Button";
			button_2.bind("value").toAppProperty("btn2Value");
			container.addChild(button_2, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var button_3 = new cpr.controls.Button("btn3");
			button_3.value = "Button";
			container.addChild(button_3, {
				"colIndex": 2,
				"rowIndex": 0
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "test";
	
	// Type declaration for test
	cpr.utils.Util.ensurePackage("udc").test = function(id){
		cpr.controls.UDCBase.call(this, "udc.test", internalApp, id);
	};
	
	udc.test.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.test.prototype, "type", {
		get : function(){
			return "udc.test";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.test.prototype, "btn1Value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("btn1Value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("btn1Value", newValue, true);
		}
	});
	Object.defineProperty(udc.test.prototype, "btn2Value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("btn2Value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("btn2Value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.test
/// start - udc.test04
/*
 * UDC Qualified Name: udc.test04
 * App URI: udc/test04
 * Source Location: udc/test04.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/test04", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * test04.js
			 * Created at 2020. 5. 22. 오후 3:19:31.
			 *
			 * @author HANS
			 ************************************************/
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("newProperty1", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.bind("value").toAppProperty("newProperty1");
			container.addChild(inputBox_1, {
				"top": "20px",
				"left": "20px",
				"width": "260px",
				"height": "32px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"top": "172px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
		}
	});
	internalApp.title = "test04";
	
	// Type declaration for test04
	cpr.utils.Util.ensurePackage("udc").test04 = function(id){
		cpr.controls.UDCBase.call(this, "udc.test04", internalApp, id);
	};
	
	udc.test04.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.test04.prototype, "type", {
		get : function(){
			return "udc.test04";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.test04.prototype, "newProperty1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty1", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.test04
/// start - udc.testHeader
/*
 * UDC Qualified Name: udc.testHeader
 * App URI: udc/testHeader
 * Source Location: udc/testHeader.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/testHeader", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * testHeader.js
			 * Created at 2020. 6. 23. 오후 3:30:00.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				abc();
			}
			var a ;
			function abc(){
				
				var opt = app.lookup("opt1");
				
				 a = setInterval(function(){
					opt.value  = parseInt(opt.value)+1;
				}, 1000);
			}
			
			
			
			
			/*
			 * Body에서 unload 이벤트 발생 시 호출.
			 * 앱이 언로드된 후 발생하는 이벤트입니다.
			 */
			function onBodyUnload(/* cpr.events.CEvent */ e){
				
				clearTimeout(abc);
			}
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
				
				console.log(app.getAppProperty("objs"));
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("objs", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.value = "1";
			output_1.dataType = "number";
			container.addChild(output_1, {
				"top": "10px",
				"right": "20px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_1 = new cpr.controls.Button("btn1");
			button_1.value = "Button";
			if(typeof onBtn1Click == "function") {
				button_1.addEventListener("click", onBtn1Click);
			}
			container.addChild(button_1, {
				"top": "20px",
				"left": "20px",
				"width": "100px",
				"height": "20px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyBeforeUnload == "function"){
				app.addEventListener("before-unload", onBodyBeforeUnload);
			}
			if(typeof onBodyUnload == "function"){
				app.addEventListener("unload", onBodyUnload);
			}
		}
	});
	internalApp.title = "testHeader";
	
	// Type declaration for testHeader
	cpr.utils.Util.ensurePackage("udc").testHeader = function(id){
		cpr.controls.UDCBase.call(this, "udc.testHeader", internalApp, id);
	};
	
	udc.testHeader.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.testHeader.prototype, "type", {
		get : function(){
			return "udc.testHeader";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.testHeader.prototype, "objs", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("objs");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("objs", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.testHeader
/// start - udc.tests.gridUDC
/*
 * UDC Qualified Name: udc.tests.gridUDC
 * App URI: udc/tests/gridUDC
 * Source Location: udc/tests/gridUDC.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/tests/gridUDC", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * gridUDC.js
			 * Created at 2021. 10. 7. 오후 1:14:43.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("gridCtrl", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "5px";
			formLayout_1.verticalSpacing = "5px";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.dataType = "number";
			output_1.format = "s#,##0";
			output_1.bind("value").toExpression("@gridCtrl.getRowCount()");
			container.addChild(output_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			
			var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
			numberEditor_1.spinButton = false;
			numberEditor_1.bind("value").toExpression("@gridCtrl.getViewingStartRowIndex()");
			container.addChild(numberEditor_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
		}
	});
	internalApp.title = "gridUDC";
	
	// Type declaration for gridUDC
	cpr.utils.Util.ensurePackage("udc.tests").gridUDC = function(id){
		cpr.controls.UDCBase.call(this, "udc.tests.gridUDC", internalApp, id);
	};
	
	udc.tests.gridUDC.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.tests.gridUDC.prototype, "type", {
		get : function(){
			return "udc.tests.gridUDC";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.tests.gridUDC.prototype, "gridCtrl", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridCtrl");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridCtrl", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.tests.gridUDC
/// start - udc.tests.multiTypeUDC
/*
 * UDC Qualified Name: udc.tests.multiTypeUDC
 * App URI: udc/tests/multiTypeUDC
 * Source Location: udc/tests/multiTypeUDC.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/tests/multiTypeUDC", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * multiTypeUDC.js
			 * Created at 2020. 7. 22. 오후 5:48:10.
			 *
			 * @author han
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
			//	app.getAppProperty("comboboxDataSet");
			//	app.getAppProperty("controlVisible");
			}
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				
				console.log(app.getAppProperty("comboboxDataSet"));
				console.log(app.getAppProperty("controlVisible"));
				
				var vsCtrlType = app.getAppProperty("controlVisible");
			/** @type cpr.data.DataSet */
				var vcDataSet = app.getAppProperty("comboboxDataSet");
			
				if(vsCtrlType == "combobox") {
					
					var vcContainer = app.getContainer();
					vcContainer.getLayout().setColumnVisible(0, false);
					vcContainer.getLayout().setColumnVisible(1, true);
				}
				else if(vsCtrlType =="inputbox") {
					
					var vcContainer = app.getContainer();
					vcContainer.getLayout().setColumnVisible(0, true);
					vcContainer.getLayout().setColumnVisible(1, false);
				}
				
				var vaColumnNms = vcDataSet.getColumnNames();
					
				app.lookup("cmbUdc1").setItemSet(vcDataSet, {
					label : vaColumnNms[0],
					value : vaColumnNms[1]
				});
			}
			
			
			/*
			 * 인풋 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onIpb1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb1 = e.control;
				alert("ㅋㅋ");
			}
			
			
			/*
			 * 콤보 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onCmb1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
				console.log("머하누");
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("values", null);
			app.declareAppProperty("controlVisible", null);
			app.declareAppProperty("comboboxDataSet", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setColumnVisible(0, false);
			formLayout_1.setColumnVisible(1, false);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipbUdc1");
			inputBox_1.bind("value").toAppProperty("values");
			if(typeof onIpb1Click == "function") {
				inputBox_1.addEventListener("click", onIpb1Click);
			}
			container.addChild(inputBox_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("cmbUdc1");
			comboBox_1.bind("value").toAppProperty("values");
			(function(comboBox_1){
			})(comboBox_1);
			if(typeof onCmb1Click == "function") {
				comboBox_1.addEventListener("click", onCmb1Click);
			}
			container.addChild(comboBox_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	internalApp.title = "multiTypeUDC";
	
	// Type declaration for multiTypeUDC
	cpr.utils.Util.ensurePackage("udc.tests").multiTypeUDC = function(id){
		cpr.controls.UDCBase.call(this, "udc.tests.multiTypeUDC", internalApp, id);
	};
	
	udc.tests.multiTypeUDC.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.tests.multiTypeUDC.prototype, "type", {
		get : function(){
			return "udc.tests.multiTypeUDC";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.tests.multiTypeUDC.prototype, "values", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("values");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("values", newValue, true);
		}
	});
	Object.defineProperty(udc.tests.multiTypeUDC.prototype, "controlVisible", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("controlVisible");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("controlVisible", newValue, true);
		}
	});
	Object.defineProperty(udc.tests.multiTypeUDC.prototype, "comboboxDataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("comboboxDataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("comboboxDataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.tests.multiTypeUDC
/// start - udc.tests.Untitled
/*
 * UDC Qualified Name: udc.tests.Untitled
 * App URI: udc/tests/Untitled
 * Source Location: udc/tests/Untitled.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/tests/Untitled", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Untitled.js
			 * Created at 2020. 1. 2. 오후 3:25:27.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				console.log("PROPERTY_CHANGE");
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("enabled", null);
			app.declareAppProperty("ipbValue", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			inputBox_1.bind("value").toAppProperty("ipbValue");
			container.addChild(inputBox_1, {
				"top": "20px",
				"left": "20px",
				"width": "260px",
				"height": "260px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "Untitled";
	
	// Type declaration for Untitled
	cpr.utils.Util.ensurePackage("udc.tests").Untitled = function(id){
		cpr.controls.UDCBase.call(this, "udc.tests.Untitled", internalApp, id);
	};
	
	udc.tests.Untitled.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.tests.Untitled.prototype, "type", {
		get : function(){
			return "udc.tests.Untitled";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.tests.Untitled.prototype, "enabled", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("enabled");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("enabled", newValue, true);
		}
	});
	Object.defineProperty(udc.tests.Untitled.prototype, "ipbValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("ipbValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("ipbValue", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.tests.Untitled
/// start - udc.udcCntyCd
/*
 * UDC Qualified Name: udc.udcCntyCd
 * App URI: udc/udcCntyCd
 * Source Location: udc/udcCntyCd.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/udcCntyCd", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * cntyCd.js
			 * Created at 2020. 7. 23. 오전 10:44:17.
			 *
			 * @author HanaTI
			 ************************************************/
			var util = createCommonUtil();
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			exports.valueChanger = function(){
				
				console.log(app.lookup("ipbCntyCd").value);
				app.lookup("ipbCntyCd").redraw();
			}
			/*
			 * 서치 인풋에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onSearchInputClick(/* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.SearchInput
				 */
				var searchInput = e.control;
				util.Dialog.open(app, "biz/cm/IQ64", 700, 400, function(e){
					/** @type cpr.controls.Dialog */
					var dialog = e.control;
					
					var returnValue = dialog.returnValue;
					if(returnValue){
						util.Control.setValue(app, "ipbCntyNm", returnValue["cntyNm"]);
						util.Control.setValue(app, "ipbCntyCd", returnValue["cntyCd"]);	
					}
				}, null, true);	
				
				var event = new cpr.events.CUIEvent("search");
				app.dispatchEvent(event);
				
			}
			
			
			/*
			 * 서치 인풋에서 value-change 이벤트 발생 시 호출.
			 * SearchInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onIpbCntyCdValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.SearchInput
				 */
				var ipbCntyCd = e.control;
				
				console.log("valueChange");
			}
			
			
			/*
			 * 루트 컨테이너에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				console.log("PROPERTY_CHANGE");
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "2fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipbCntyNm");
				container.addChild(inputBox_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var searchInput_1 = new cpr.controls.SearchInput("ipbCntyCd");
				searchInput_1.bind("value").toAppProperty("value");
				if(typeof onSearchInputClick == "function") {
					searchInput_1.addEventListener("click", onSearchInputClick);
				}
				if(typeof onIpbCntyCdValueChange == "function") {
					searchInput_1.addEventListener("value-change", onIpbCntyCdValueChange);
				}
				container.addChild(searchInput_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	internalApp.title = "udcCntyCd";
	
	// Type declaration for udcCntyCd
	cpr.utils.Util.ensurePackage("udc").udcCntyCd = function(id){
		cpr.controls.UDCBase.call(this, "udc.udcCntyCd", internalApp, id);
	};
	
	udc.udcCntyCd.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.udcCntyCd.prototype, "type", {
		get : function(){
			return "udc.udcCntyCd";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.udcCntyCd.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.udcCntyCd
/// start - udc.Untitled
/*
 * UDC Qualified Name: udc.Untitled
 * App URI: udc/Untitled
 * Source Location: udc/Untitled.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/Untitled", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * Untitled.js
			 * Created at 2020. 10. 27. 오전 9:19:34.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return app.getAppProperty("newProperty1") +" - " + app.getAppProperty("newProperty2");
			};;
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("newProperty1", null);
			app.declareBindableAppProperty("newProperty2", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "5px";
			formLayout_1.verticalSpacing = "5px";
			formLayout_1.setColumns(["1fr", "15px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			container.setLayout(formLayout_1);
			
			// UI Configuration
			var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
			numberEditor_1.spinButton = false;
			numberEditor_1.bind("value").toAppProperty("newProperty1");
			container.addChild(numberEditor_1, {
				"colIndex": 0,
				"rowIndex": 0
			});
			
			var numberEditor_2 = new cpr.controls.NumberEditor("nbe2");
			numberEditor_2.spinButton = false;
			numberEditor_2.bind("value").toAppProperty("newProperty2");
			container.addChild(numberEditor_2, {
				"colIndex": 2,
				"rowIndex": 0
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.value = "-";
			container.addChild(output_1, {
				"colIndex": 1,
				"rowIndex": 0
			});
		}
	});
	internalApp.title = "Untitled";
	
	// Type declaration for Untitled
	cpr.utils.Util.ensurePackage("udc").Untitled = function(id){
		cpr.controls.UDCBase.call(this, "udc.Untitled", internalApp, id);
	};
	
	udc.Untitled.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.Untitled.prototype, "type", {
		get : function(){
			return "udc.Untitled";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.Untitled.prototype, "newProperty1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty1", newValue, true);
		}
	});
	Object.defineProperty(udc.Untitled.prototype, "newProperty2", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("newProperty2");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("newProperty2", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.Untitled
/// start - udc.Vertical
/*
 * UDC Qualified Name: udc.Vertical
 * App URI: udc/Vertical
 * Source Location: udc/Vertical.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/Vertical", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * vertical.js
			 * Created at 2020. 3. 19. 오후 5:41:08.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			app.declareAppProperty("optValue", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-right-style" : "solid",
				"border-left-style" : "solid",
				"border-left-width" : "1px",
				"border-left-color" : "red",
				"border-right-color" : "red",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("opt1");
			output_1.style.css({
				"text-align" : "center"
			});
			output_1.bind("value").toAppProperty("optValue");
			container.addChild(output_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var output_2 = new cpr.controls.Output("opt2");
			output_2.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "red",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-left-color" : "red",
				"border-top-color" : "red",
				"border-bottom-style" : "solid",
				"border-right-color" : "red",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			container.addChild(output_2, {
				"right": "0px",
				"left": "0px",
				"height": "1px",
				"top": "calc(50% - 0px)"
			});
		}
	});
	internalApp.title = "Vertical";
	
	// Type declaration for Vertical
	cpr.utils.Util.ensurePackage("udc").Vertical = function(id){
		cpr.controls.UDCBase.call(this, "udc.Vertical", internalApp, id);
	};
	
	udc.Vertical.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.Vertical.prototype, "type", {
		get : function(){
			return "udc.Vertical";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.Vertical.prototype, "optValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("optValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("optValue", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.Vertical
/// start - udc.WaferController
/*
 * UDC Qualified Name: udc.WaferController
 * App URI: udc/WaferController
 * Source Location: udc/WaferController.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/WaferController", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			app.declareAppProperty("HideScreen", true);
			var dataMap_1 = new cpr.data.DataMap("dmLP1Info");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "LP1",
						"defaultValue": ""
					},
					{
						"name": "CTC__LP1_Exist",
						"dataType": "number",
						"defaultValue": ""
					},
					{
						"name": "CTC__LP1_UsageType",
						"dataType": "number"
					},
					{
						"name": "CTC__LP1_WfrCount",
						"dataType": "number"
					},
					{
						"name": "LP1__FoupPlacedStatus",
						"dataType": "number"
					}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grpScreen");
			group_1.bind("visible").toAppProperty("HideScreen");
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	internalApp.title = "WaferController";
	
	// Type declaration for WaferController
	cpr.utils.Util.ensurePackage("udc").WaferController = function(id){
		cpr.controls.UDCBase.call(this, "udc.WaferController", internalApp, id);
	};
	
	udc.WaferController.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.WaferController.prototype, "type", {
		get : function(){
			return "udc.WaferController";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.WaferController.prototype, "HideScreen", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("HideScreen");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("HideScreen", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.WaferController

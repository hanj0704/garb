/*
 * App URI: 201910/HanYangTest
 * Source Location: 201910/HanYangTest.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("201910/HanYangTest", {
		onPrepare: function(loader){
			loader.addCSS("201910/hanyang.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * HanYangTest.js
			 * Created at 2019. 10. 1. 오후 1:02:19.
			 *
			 * @author ryu
			 ************************************************/
			
			/* 레이아웃 정보  */
			var mnSubMenuWrapMargin = 15;
			
			/* 현재 보여지고 있는 메뉴 인덱스 */
			var mnShowingSubMenuIdx = 0;
			
			var a = 6;
			cpr.expression.ExpressionEngine.INSTANCE.registerFunction("abcc", function(){
				if(mnShowingSubMenuIdx == 0) {
					return false;
				} else {
					return true;
				}
			});
			
			function moveRight (){
				var vcGrpSubMenuWrap = app.lookup("grpSubMenuWrap");
			
				var vaSubMenus = vcGrpSubMenuWrap.getChildren();
				
				var voTargetOffsetRect = vaSubMenus[mnShowingSubMenuIdx].getOffsetRect();
				
				vcGrpSubMenuWrap.scrollTo(voTargetOffsetRect.left, 0, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT);
			}
			
			
			/**
			 * 선택된 라디오 버튼 아이템을 통해 하위 메뉴를 그립니다.
			 */
			 function createSubMenuContent() {
			 	var vcDsMenu = app.lookup("dsMenu");
			 	
			 	var vnSubMenuItemCount = vcDsMenu.getRowCount();
			 	
			 	if (vnSubMenuItemCount == 0){
			 		alert("하위 메뉴가 없습니다.");
			 		return;
			 	}
			
				var vnStartGroup = 1;
				var vnMaxGroup = _.max(vcDsMenu.getColumnData("group"));
				
				while(vnStartGroup <= vnMaxGroup){
					/* Create SubMenu Wrap Container */
					var vcGrpSubMenuListWrap = createSubMenuListWrap(vnStartGroup);
					
					/* Create SubMenu Title */
					createSubMenuListTitle(vcGrpSubMenuListWrap, vnStartGroup);
					
					/* Create SubMenu */
					createSubMenuList(vcGrpSubMenuListWrap, vnStartGroup);
					
					vnStartGroup++;
				}
				
				/* Create PageIndex for SubMenu */
				createPageIndex();
			 }
			 
			 
			 /**
			  * 서브 메뉴 타이틀과 서브 메뉴를 배치할 그룹을 동적으로 생성합니다.
			  *  @param {Number} pnGroup 현재 그려질 서브 메뉴 그룹 인덱스
			  */
			 function createSubMenuListWrap(pnGroup) {
			 	var vcGrpSubMenuListWrap = new cpr.controls.Container("grpSubMenu" + pnGroup);
			 	var voGrpSubMenuListWrapLayout = new cpr.controls.layouts.VerticalLayout();
			 	
			 	/* Set Container Infos */
			 	vcGrpSubMenuListWrap.style.addClass("sub-menu-wrap");
			 	
			 	/* Set Container's Layout Infos' */
			 	voGrpSubMenuListWrapLayout.leftMargin = mnSubMenuWrapMargin;
			 	voGrpSubMenuListWrapLayout.rightMargin = mnSubMenuWrapMargin;
			 	voGrpSubMenuListWrapLayout.scrollable = false;
			 	
			 	/* Set Layout */
			 	vcGrpSubMenuListWrap.setLayout(voGrpSubMenuListWrapLayout);
			 	
			 	/* add Container into SubMenuMenuWrap Container */
			 	app.lookup("grpSubMenuWrap").addChild(vcGrpSubMenuListWrap, {
					height : "300px",
			 		width : "175px"
			 	});
			 	
			 	return vcGrpSubMenuListWrap;
			 }
			 
			
			/**
			 * 서브 메뉴 타이틀을 동적으로 생성합니다.
			 * @param {cpr.controls.Container} pcParentContainer 부모 컨트롤 (컨테이너/그룹)
			 * @param {Number} pnGroup 현재 그려질 서브 메뉴 그룹 인덱스
			 */
			function createSubMenuListTitle(pcParentContainer, pnGroup) {
				var vcDsMenu = app.lookup("dsMenu");
				
				/* Find Title Label */
				var voRootSubMenu = vcDsMenu.findFirstRow("group == " + pnGroup);
				var vsRootSubMenuLabel = voRootSubMenu.getValue("cd_nm");
				
				/* Create Output Dynamically */
				var vcSubMenuItemTitle = new cpr.controls.Output("optSubMenuTitle" + pnGroup);
				
				/* set Output Title Infos */
				vcSubMenuItemTitle.value = vsRootSubMenuLabel;
				vcSubMenuItemTitle.style.addClass("menu-title");
				
				/* add Title Output into SubMenuListWrap Container */
				pcParentContainer.addChild(vcSubMenuItemTitle, {
					autoSize : "height",
					width : "100%",
					height : "30px"
				});
				
				return vcSubMenuItemTitle;
			}
			
			
			/**
			 * 서브 메뉴를 동적으로 생성합니다.
			 * @param {cpr.controls.Container} pcParentContainer 부모 컨트롤 (컨테이너/그룹)
			 * @param {Number} pnGroup 현재 그려질 서브 메뉴 그룹 인덱스
			 */
			function createSubMenuList(pcParentContainer, pnGroup) {
				var vcDsMenu = app.lookup("dsMenu");
				
				/* Create ListBox Dynamically */
				var vcSubMenuList = new cpr.controls.ListBox("lbxSubMenu" + pnGroup);
				
				/* set ListBox infos */
				vcSubMenuList.style.addClass("sub-menu");
				
				/* Link Dataset */
				vcSubMenuList.setItemSet(app.lookup("dsMenu"), {
					label : "label",
					value : "value",
					tooltip : "label"
				});
			
				/* Data Filter */
				var vsFilterCondition = "group == '" + pnGroup + "'";
				vcSubMenuList.setFilter(vsFilterCondition);
				
				
				/* add ListBox into SubMenuListWrap Container */
				pcParentContainer.addChild(vcSubMenuList, {
					autoSize : "height",
					width : "175px"
				});
				
				pcParentContainer.redraw();
				
				return vcSubMenuList;
			}
			
			
			/**
			 * 그려진 서브 메뉴에 따라 페이지 인덱서를 동적으로 생성합니다.
			 */
			function createPageIndex() {
				var vcGrpPageIndexWrap = app.lookup("grpPageIndexWrap");
				
				var vcGrpSubMenuWrap = app.lookup("grpSubMenuWrap");
				
				var vnSubMenuChildrenCount = vcGrpSubMenuWrap.getChildrenCount();
				
				for(var idx = 0; idx < vnSubMenuChildrenCount - 4; idx++){
					/* Create Output Dynamically */
					var vcPageIndex = new cpr.controls.Output("optPageIdx" + (idx + 1));
						vcPageIndex.userAttr("idx", idx.toString());
					
					/* set PageIndex Infos */
					vcPageIndex.style.addClass("sm-pageidx");
					
					if (idx == 0){
						vcPageIndex.style.addClass("on");
					}
					
					/* Add Click Event */
					vcPageIndex.addEventListener("click", function(e) {
						var vcControl = e.control;
						var vsControlId = vcControl.id;
						console.log(vcControl.userAttr("idx"));
						
						if(mnShowingSubMenuIdx > Number(vcControl.userAttr("idx"))) {
							mnShowingSubMenuIdx = Number(vcControl.userAttr("idx")+1);
							var vcGrpSubMenuWrap = app.lookup("grpSubMenuWrap");
			
							app.lookup("btnPrev").click();
						} else {
							mnShowingSubMenuIdx = Number(vcControl.userAttr("idx")-1);
						
							app.lookup("btnNext").click();
						}
						
						/* Set Style When It Clicked */
						vcGrpPageIndexWrap.getChildren().forEach(function(each){
							each.style.removeClass("on");
						});
						
						vcControl.style.addClass("on");
					});
					
					/* Add PageIndex into PageIndexWrap Container */
					vcGrpPageIndexWrap.addChild(vcPageIndex, {
						width : "10px",
						height : "5px"
					});	
				}
			}
			
			
			/**
			 * 이전으로 슬라이드 버튼의 활성화 상태를 변경합니다.
			 * @param {Boolean} pbEnable
			 */
			function setSlidifyPrevButtonStatus(pbEnable) {
				app.lookup("btnPrev").enabled = pbEnable;
			}
			
			
			/**
			 * 다음으로 슬라이드 버튼의 활성화 상태를 변경합니다.
			 * @param {Boolean} pbEnable
			 */
			function setSlidifyNextButtonStatus(pbEnable) {
				app.lookup("btnNext").enabled = pbEnable;
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				app.lookup("rdbMenu").selectItem(0);
			}
			
			
			/*
			 * 라디오 버튼에서 selection-change 이벤트 발생 시 호출.
			 * 라디오버튼 아이템을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onRdbMenuSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.RadioButton
				 */
				var rdbMenu = e.control;
				
				//TODO 서브미션을 통해 선택된 라디오 버튼의 value 값으로 서브 메뉴 데이터를 불러와야 합니다.
				
				createSubMenuContent();
			}
			
			
			/*
			 * "<" 버튼(btnPrev)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPrevClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnPrev = e.control;
				
				if (mnShowingSubMenuIdx <= 0){
					return;
				}
			
				mnShowingSubMenuIdx--;
				
				var vcGrpSubMenuWrap = app.lookup("grpSubMenuWrap");
			
				var vaSubMenus = vcGrpSubMenuWrap.getChildren();
				console.log(mnShowingSubMenuIdx);
				var vcTargetSubMenu = vaSubMenus[mnShowingSubMenuIdx];
				
				var voTargetOffsetRect = vcTargetSubMenu.getOffsetRect();
				
				vcGrpSubMenuWrap.scrollTo(voTargetOffsetRect.left, 0, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT);
			}
			
			
			/*
			 * ">" 버튼(btnNext)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnNextClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btnNext = e.control;
			
				mnShowingSubMenuIdx++;
				app.lookup("btnPrev").redraw();
				var vcGrpSubMenuWrap = app.lookup("grpSubMenuWrap");
			
				var vaSubMenus = vcGrpSubMenuWrap.getChildren();
				console.log(mnShowingSubMenuIdx);	
				var voTargetOffsetRect = vaSubMenus[mnShowingSubMenuIdx].getOffsetRect();
				
				vcGrpSubMenuWrap.scrollTo(voTargetOffsetRect.left, 0, 0.3, cpr.animation.TimingFunction.EASE_IN_OUT);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsMainMenu");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "교과", "value": "subject", "parent": "hycu"},
					{"label": "수업", "value": "class", "parent": "hycu"},
					{"label": "업무3", "value": "value3", "parent": "hycu"},
					{"label": "업무4", "value": "value4", "parent": "hycu"},
					{"label": "업무5", "value": "value5", "parent": "hycu"},
					{"label": "업무6", "value": "value6", "parent": "hycu"},
					{"label": "업무7", "value": "value7", "parent": "hycu"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("dsMenu");
			dataSet_2.parseData({
				"columns": [
					{"name": "cd"},
					{"name": "cd_nm"},
					{"name": "label"},
					{"name": "value"},
					{
						"name": "group",
						"dataType": "number"
					}
				],
				"rows": [
					{"label": "교과목관리", "value": "value2", "group": "1", "cd": "course", "cd_nm": "교과"},
					{"label": "교과운영현황", "value": "value3", "group": "1", "cd": "course", "cd_nm": "교과"},
					{"label": "담당교수/시간표관리", "value": "value5", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "강의실관리", "value": "value6", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "수업계획서관리", "value": "value7", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "수업평가", "value": "value8", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "휴/보강, 출강 관리", "value": "value9", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "강의운영현황", "value": "value10", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "담당교수/시간표관리", "value": "value11", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "강의실관리", "value": "value12", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "수업계획서관리", "value": "value13", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "수업평가", "value": "value14", "group": "2", "cd": "class", "cd_nm": "수업"},
					{"label": "휴/보강, 출강 관리", "value": "value15", "group": "3", "cd": "class", "cd_nm": "수업"},
					{"label": "강의운영현황", "value": "value16", "group": "3", "cd": "class", "cd_nm": "수업"},
					{"label": "입시관리", "value": "value18", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "수강관리", "value": "value19", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "수강정보", "value": "value20", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "승진평가", "value": "value21", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "수험평가", "value": "value22", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "기준정보관리", "value": "value23", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "코드관리", "value": "value24", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "정기평가", "value": "value25", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "자기평가서", "value": "value26", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "개편안내/메뉴얼", "value": "value27", "group": "4", "cd": "service", "cd_nm": "병무"},
					{"label": "장학금신청/접수관리", "value": "value29", "group": "5", "cd": "scholarship", "cd_nm": "장학"},
					{"label": "장학추천관리", "value": "value30", "group": "5", "cd": "scholarship", "cd_nm": "장학"},
					{"label": "장학정보", "value": "value31", "group": "5", "cd": "scholarship", "cd_nm": "장학"},
					{"label": "보고서", "value": "value32", "group": "5", "cd": "scholarship", "cd_nm": "장학"},
					{"label": "기준관리", "value": "value34", "group": "6", "cd": "hours", "cd_nm": "시수"},
					{"label": "책임시간 과리", "value": "value35", "group": "6", "cd": "hours", "cd_nm": "시수"},
					{"label": "시수 관리", "value": "value36", "group": "6", "cd": "hours", "cd_nm": "시수"},
					{"label": "강의료 관리", "value": "value37", "group": "6", "cd": "hours", "cd_nm": "시수"},
					{"label": "보고서", "value": "value38", "group": "6", "cd": "hours", "cd_nm": "시수"},
					{"cd": "cd34", "cd_nm": "cd_nm34", "label": "label34", "value": "value34", "group": "7"},
					{"cd": "cd35", "cd_nm": "cd_nm35", "label": "label35", "value": "value35", "group": "8"},
					{"cd": "cd36", "cd_nm": "cd_nm36", "label": "label36", "value": "value36", "group": "9"},
					{"cd": "cd37", "cd_nm": "마지막", "label": "label37", "value": "value37", "group": "10"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("dsRecmdMenu");
			dataSet_3.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [
					{"label": "기준관리", "value": "value1", "parent": "parent1"},
					{"label": "책임시간 관리", "value": "value2", "parent": "parent2"},
					{"label": "시수 관리", "value": "value3", "parent": "parent3"},
					{"label": "강의료 관리", "value": "value4", "parent": "parent4"},
					{"label": "보고서", "value": "value5", "parent": "parent5"}
				]
			});
			app.register(dataSet_3);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["menu-wrap"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container();
				group_2.style.setClasses(["menu-header"]);
				// Layout
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
					var radioButton_1 = new cpr.controls.RadioButton("rdbMenu");
					radioButton_1.style.setClasses(["menu"]);
					(function(radioButton_1){
						radioButton_1.setItemSet(app.lookup("dsMainMenu"), {
							"label": "label",
							"value": "value"
						})
					})(radioButton_1);
					if(typeof onRdbMenuSelectionChange == "function") {
						radioButton_1.addEventListener("selection-change", onRdbMenuSelectionChange);
					}
					container.addChild(radioButton_1, {
						"top": "0px",
						"right": "175px",
						"bottom": "0px",
						"left": "0px"
					});
					var output_1 = new cpr.controls.Output();
					output_1.style.css({
						"background-color" : "#475F78"
					});
					container.addChild(output_1, {
						"right": "173px",
						"width": "2px",
						"height": "25px",
						"top": "calc(50% - 12px)"
					});
					var button_1 = new cpr.controls.Button();
					button_1.value = "메뉴설정";
					container.addChild(button_1, {
						"top": "15px",
						"right": "15px",
						"bottom": "15px",
						"width": "80px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "0px",
					"right": "0px",
					"left": "0px",
					"height": "50px"
				});
				var group_3 = new cpr.controls.Container();
				// Layout
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				group_3.setLayout(xYLayout_4);
				(function(container){
					var group_4 = new cpr.controls.Container("grpSubMenuWrap");
					group_4.childCombinatorClass = "sub-menu-wrap";
					// Layout
					var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
					flowLayout_1.scrollable = false;
					flowLayout_1.horizontalSpacing = 0;
					flowLayout_1.verticalSpacing = 0;
					flowLayout_1.lineWrap = false;
					flowLayout_1.leftMargin = 0;
					flowLayout_1.rightMargin = 0;
					flowLayout_1.topMargin = 20;
					flowLayout_1.bottomMargin = 0;
					group_4.setLayout(flowLayout_1);
					(function(container){
					})(group_4);
					container.addChild(group_4, {
						"top": "0px",
						"right": "0px",
						"bottom": "20px",
						"left": "0px"
					});
					var group_5 = new cpr.controls.Container("grpPageIndexWrap");
					// Layout
					var flowLayout_2 = new cpr.controls.layouts.FlowLayout();
					flowLayout_2.scrollable = false;
					flowLayout_2.horizontalAlign = "center";
					flowLayout_2.verticalAlign = "middle";
					group_5.setLayout(flowLayout_2);
					(function(container){
					})(group_5);
					container.addChild(group_5, {
						"right": "0px",
						"bottom": "0px",
						"left": "0px",
						"height": "20px"
					});
				})(group_3);
				container.addChild(group_3, {
					"top": "50px",
					"right": "225px",
					"bottom": "0px",
					"left": "0px"
				});
				var group_6 = new cpr.controls.Container();
				group_6.style.setClasses(["recommand-menu-wrap"]);
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				verticalLayout_1.leftMargin = 20;
				verticalLayout_1.rightMargin = 20;
				verticalLayout_1.topMargin = 20;
				verticalLayout_1.bottomMargin = 0;
				group_6.setLayout(verticalLayout_1);
				(function(container){
					var output_2 = new cpr.controls.Output();
					output_2.value = "메뉴추천";
					output_2.style.setClasses(["menu-title", "left"]);
					container.addChild(output_2, {
						"autoSize": "height",
						"width": "100px",
						"height": "35px"
					});
					var listBox_1 = new cpr.controls.ListBox("lbx6");
					listBox_1.style.setClasses(["sub-menu", "recmd-menu"]);
					(function(listBox_1){
						listBox_1.setItemSet(app.lookup("dsRecmdMenu"), {
							"label": "label",
							"value": "value"
						})
					})(listBox_1);
					container.addChild(listBox_1, {
						"autoSize": "height",
						"width": "100px",
						"height": "100%"
					});
				})(group_6);
				container.addChild(group_6, {
					"top": "50px",
					"right": "0px",
					"bottom": "0px",
					"width": "175px"
				});
				var group_7 = new cpr.controls.Container();
				// Layout
				var xYLayout_5 = new cpr.controls.layouts.XYLayout();
				group_7.setLayout(xYLayout_5);
				(function(container){
					var button_2 = new cpr.controls.Button("btnPrev");
					button_2.value = "<";
					button_2.bind("enabled").toExpression("abcc()");
					if(typeof onBtnPrevClick == "function") {
						button_2.addEventListener("click", onBtnPrevClick);
					}
					container.addChild(button_2, {
						"right": "5px",
						"bottom": "50px",
						"left": "5px",
						"height": "40px"
					});
					var button_3 = new cpr.controls.Button("btnNext");
					button_3.value = ">";
					if(typeof onBtnNextClick == "function") {
						button_3.addEventListener("click", onBtnNextClick);
					}
					container.addChild(button_3, {
						"right": "5px",
						"bottom": "5px",
						"left": "5px",
						"height": "40px"
					});
				})(group_7);
				container.addChild(group_7, {
					"top": "50px",
					"right": "175px",
					"bottom": "0px",
					"width": "50px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "20px",
				"left": "20px",
				"width": "1100px",
				"height": "400px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "거의완성된 동적메뉴";
	cpr.core.Platform.INSTANCE.register(app);
})();

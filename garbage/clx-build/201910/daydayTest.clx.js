/*
 * App URI: 201910/daydayTest
 * Source Location: 201910/daydayTest.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("201910/daydayTest", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			
			//	document.documentElement.style.overflow = "hidden";
			
				var vcGrid = app.lookup("grd1");
				
				console.log(app.lookup("ds1").getRowDataRanged());
			
			
			//	console.dir(message);
				
				app.lookup("grd1").detail.getColumn(0);
						
			}
			
			
			
			/*
			 * "Button" 버튼(btn1)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn1 = e.control;
			}
			
			
			/*
			 * 콤보 박스에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onCmb1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
				
			//	e.preventDefault();
			//	if(cmb1.isOpened()) {
			//		cmb1.close();
			//	} else {
			//		cmb1.open();
			//	}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"stateRestore": true,
				"columns": [
					{"name": "column1"},
					{
						"name": "column2",
						"dataType": "string"
					},
					{
						"name": "column3",
						"dataType": "string"
					}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": ""},
					{"column1": "column12", "column2": "column22", "column3": ""},
					{"column1": "column13", "column2": "column23", "column3": ""},
					{"column1": "column14", "column2": "column24", "column3": ""},
					{"column1": "column15", "column2": "column25", "column3": ""},
					{"column1": "column16", "column2": "column26", "column3": ""},
					{"column1": "column17", "column2": "column27", "column3": ""},
					{"column1": "column18", "column2": "column28", "column3": ""},
					{"column1": "column19", "column2": "column29", "column3": ""}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds2");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "label1", "value": "value1"},
					{"label": "label2", "value": "value2"},
					{"label": "label3", "value": "value3"},
					{"label": "label4", "value": "value4"},
					{"label": "label5", "value": "value5"},
					{"label": "label6", "value": "value6"}
				]
			});
			app.register(dataSet_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "column1";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "column2";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "column3";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "column3";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "50px",
				"left": "61px",
				"width": "686px",
				"height": "331px"
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			(function(comboBox_1){
				comboBox_1.addItem(new cpr.controls.Item("label1", "value1"));
				comboBox_1.addItem(new cpr.controls.Item("label2", "value2"));
				comboBox_1.addItem(new cpr.controls.Item("label3", "value3"));
				comboBox_1.addItem(new cpr.controls.Item("label4", "value4"));
				comboBox_1.addItem(new cpr.controls.Item("label5", "value5"));
				comboBox_1.addItem(new cpr.controls.Item("label6", "value6"));
				comboBox_1.addItem(new cpr.controls.Item("label7", "value7"));
				comboBox_1.addItem(new cpr.controls.Item("label8", "value8"));
				comboBox_1.addItem(new cpr.controls.Item("label9", "value9"));
			})(comboBox_1);
			if(typeof onCmb1Click == "function") {
				comboBox_1.addEventListener("click", onCmb1Click);
			}
			container.addChild(comboBox_1, {
				"top": "413px",
				"left": "55px",
				"width": "166px",
				"height": "33px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "일별 테스트";
	cpr.core.Platform.INSTANCE.register(app);
})();
